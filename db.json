{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-phantom-master/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/css/main.css","path":"css/main.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/css/ie8.css","path":"css/ie8.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/css/ie9.css","path":"css/ie9.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/skel.min.js","path":"js/skel.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/sass/ie8.scss","path":"sass/ie8.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/sass/ie9.scss","path":"sass/ie9.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/sass/font-awesome.min.css","path":"sass/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/sass/main.scss","path":"sass/main.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/ie/html5shiv.js","path":"js/ie/html5shiv.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/js/ie/respond.min.js","path":"js/ie/respond.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-phantom-master/README.md","hash":"44d2145a91a2058f37ed65a0334c948cdc8c30ec","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/_config.yml","hash":"3fd6edcafca6425db966440d6fa45d5cc819e521","modified":1527890474630},{"_id":"source/_posts/01-mar-2018.md","hash":"1978c31c1905390f2283861ca9216b550710dea6","modified":1527889077268},{"_id":"source/_posts/06-mar-2018.md","hash":"ad0e5e97a8e390a741b3863e603bd69c77ba140e","modified":1527889077268},{"_id":"source/_posts/15-feb-2018.md","hash":"29855256e581902b20f6587bbde9a19434e09312","modified":1527889077268},{"_id":"source/_posts/22-feb-2018.md","hash":"e5569014c48fa666c7ccd4b4a92164ce5a445d99","modified":1527889077268},{"_id":"source/_posts/22-mar-2018.md","hash":"710d11e82efdf32447d87c2c7517dcc48b987742","modified":1527889077268},{"_id":"source/_posts/08-mar-2018.md","hash":"a94841ecdcdb4101705c4d0173d206000d48b557","modified":1527889077268},{"_id":"source/_posts/15-mar-2018.md","hash":"31f1b0d71cdc967ce9fcc6fdc1f58cf51aac6753","modified":1527889077268},{"_id":"source/_posts/6-feb-2018.md","hash":"bc3fb6b17f57e75945884b5604bef73aba24303f","modified":1527889077268},{"_id":"source/about/index.md","hash":"53c6694d7343ec45626f0da3515e2eac7533c5d5","modified":1527889077268},{"_id":"source/practice/index.md","hash":"f2bde7cc071e99a77bec2fb957b7018737a6cfa3","modified":1527889077268},{"_id":"source/projects/index.md","hash":"769a67ebf987cd78fb198a239737b43222980290","modified":1527889077268},{"_id":"source/machine-setup/index.md","hash":"79ca9ab732ab5fb57e83cc028c3d6b75ffbd0513","modified":1527889077268},{"_id":"source/onboarding/index.md","hash":"4e83bd3de03f323fc85ac085636f967f0ad73548","modified":1527889077268},{"_id":"source/setuplinux/index.md","hash":"3ddc2e5697fe8d1023a87a9260b3904f18306531","modified":1527889077268},{"_id":"source/setupmac/index.md","hash":"3dc902c8861e3c9906a843c14d3e26459a0182ec","modified":1527889077268},{"_id":"source/setupwindows/index.md","hash":"b8fb933d03c0a36e2ba839b5ee96ea425cd55b7d","modified":1527889077268},{"_id":"source/workshop/index.md","hash":"1812ae4117c419ee46d4a90c651d20c86b0df57c","modified":1527889077268},{"_id":"source/workshop1/index.md","hash":"4bd4bafd1541a0e282534182e82ee3a230595acd","modified":1527889077268},{"_id":"source/workshop2/index.md","hash":"670e2b59815c5967593fb2332418397098a15d13","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/archive.ejs","hash":"7ab1832ba8a8156a61896e9b618b084771e77124","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/index.ejs","hash":"09022447f0047ca04e14c27e8cdccc763131e9ad","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/layout.ejs","hash":"1cc5d0e68150966bf19e149c5bca86d5d741aebb","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/page.ejs","hash":"54f11f374dd0903086bd5bf7db507908034a8f28","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/after-footer.ejs","hash":"f3c32cb093d8230bba950b08fe6d44a84feb1366","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/article-full.ejs","hash":"b77037cf191fcdcdc01b14c4ac4e0cb73c9bd1f3","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/article-index.ejs","hash":"cccb2218f48dfbeef82da6d3417d56c1a1291c60","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/article-page.ejs","hash":"56bbf11584b920213a9ca811424400cdd767ebf9","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/article-archive.ejs","hash":"a59de36284b5fa1d1ae173ff69a08e20250b29d0","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/article-tags.ejs","hash":"df2a96bad2f411ba2a8216721fc2996fa79bc58b","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/footer.ejs","hash":"166fa2bc5b6ddcb1c23af2e6dd598f540f594b6f","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/head.ejs","hash":"8b4a1409c632c576b7ba7343ea8c653fec355354","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/menu.ejs","hash":"1e08ad924dc7c68acc2ff563114d8e8756abf8e3","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/layout/_partial/pagination.ejs","hash":"e093a501c62b8ac7587d6b684f39362955c83490","modified":1527889077268},{"_id":"themes/hexo-theme-phantom-master/source/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/css/main.css","hash":"7cd647c15e8e17d1e6646031e0b01b39a5140756","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/css/ie8.css","hash":"8438d7d3bba42b41d76d272263667576b209a93e","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/css/ie9.css","hash":"1dad1d8872d9d5c8d7013d9e2327c7ce947c5951","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/images/logo.svg","hash":"6de70d5f1da267250a06423e1fa9c32c0f61b3ed","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/main.js","hash":"373d6a6b66b774cd548c36ea65f43fe9986a2fec","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/skel.min.js","hash":"14f390065fddc652ca1717aaebf5b44f8de78f9d","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/ie8.scss","hash":"0119f291fb39e5910a2a663f6fd8ef16f914d4f0","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/ie9.scss","hash":"ead318fa43632d5f6756e59e4c91fc57bfffa8df","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/main.scss","hash":"6ac1f9081df1d1fb7239455d526ce48be50fe101","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1527889077272},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/base/_page.scss","hash":"ad76315b33bc518cde02dcce0bbd4083f826c68c","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/base/_code.scss","hash":"357e95e52b911dc0e6750a6ce313753afdad5b73","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/base/_typography.scss","hash":"42cb9f8e4a63000f0592c841d938dc6582986a2b","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_archives.scss","hash":"c67d35c13df4ba96780a9db92884113ba20527d7","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_box.scss","hash":"78e0660402876cece2af4d67e6a1ca4a8e259e46","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_button.scss","hash":"b0a66782c3c971f27933adbbd9608abed4790011","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_form.scss","hash":"61f8aaf6469ba14b2d3a93ae1c2aceed959a203e","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_gallery.scss","hash":"a7d7973d8dbe0391a66b10b77d6d0848dbc69596","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_icon.scss","hash":"e05ce4b4ebf3860b0be710a9092c35289e2da70f","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_image.scss","hash":"10912b920e29c62e1832dc7e99c92d2424612a3e","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_list.scss","hash":"64c8a89614e11d828adaaec31e6fd0b0bc3b9f87","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_pagination.scss","hash":"291ae4dfa01d2417d8028aa8c7592de5151f4d9c","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_section.scss","hash":"53cfb6eb05860f34cb2722c0802754d423473e38","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_table.scss","hash":"835e25f31f283ab6ed1708f8d7d4c7f055d5307b","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/components/_tiles.scss","hash":"fddd479c1fc3c081affd1935c6b20b17c28ebe79","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/libs/_functions.scss","hash":"4f1e4e3e65837ef26d6df42487ce0ee6d9a3c4cb","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/libs/_mixins.scss","hash":"091d0598e9beda606514d7a87d0879ef0558ed40","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/libs/_skel.scss","hash":"da4ca53bc3308b9f4bf35a1a75958fbfb56b4b90","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/libs/_vars.scss","hash":"d04b93a217e26c659928e76dd483432a0b948074","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/layout/_footer.scss","hash":"86bcd67b4f5abb3d48f4ae333a1b8b1738d2833d","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/layout/_header.scss","hash":"b11291785d56a8772a7acfd00d32acb9ecf2b01a","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/layout/_main.scss","hash":"9311165edc7106d27d5f09ed443a18242cb27ad0","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/layout/_menu.scss","hash":"44a085becfe39d541b509e42900906b6e361cf40","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/sass/layout/_wrapper.scss","hash":"8a17f3846c73918df2e44ab88bbbd49151f18044","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1527889077276},{"_id":"themes/hexo-theme-phantom-master/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1527889077276},{"_id":"public/about/index.html","hash":"b1eed6be0e263c307600c1a9852ea9c97a50cb5d","modified":1527891004833},{"_id":"public/practice/index.html","hash":"e6e3fd39777448b91a12e8235547f598991a1fb7","modified":1527891004833},{"_id":"public/projects/index.html","hash":"d64e982dedae7f97123e7387fe2ed118f2ff3f07","modified":1527891004834},{"_id":"public/machine-setup/index.html","hash":"3343ff08cab4ba2f57e777f47441b80f0fdbe10c","modified":1527891004834},{"_id":"public/setuplinux/index.html","hash":"6632c21adc979805e4d4b51bd13546a3d5136c31","modified":1527891004834},{"_id":"public/workshop/index.html","hash":"8904c134552d83d008e80868a0ac05baa97af1f9","modified":1527891004834},{"_id":"public/workshop2/index.html","hash":"27006733abd91eccd0ba9d3f71ff8cf9ef635074","modified":1527891004834},{"_id":"public/2018/03/22/22-mar-2018/index.html","hash":"3fec6f034db010538f45b7d3558d059ac9bde744","modified":1527891004834},{"_id":"public/2018/03/15/15-mar-2018/index.html","hash":"a4473f27c96d6045a242b59baf0892c071864cf6","modified":1527891004834},{"_id":"public/2018/03/08/08-mar-2018/index.html","hash":"e114466ca911ac42e58213ebaa12b243c9165568","modified":1527891004834},{"_id":"public/2018/03/06/06-mar-2018/index.html","hash":"5b334b01f7c4a3433568609696685c7c2e4d9e04","modified":1527891004835},{"_id":"public/2018/03/01/01-mar-2018/index.html","hash":"bb0cffcb92337ae1ce2ab7d8f3781dc40cd70f79","modified":1527891004835},{"_id":"public/2018/02/22/22-feb-2018/index.html","hash":"22b76748c0cc3b46de9b8d0d4a87365ace73c24b","modified":1527891004835},{"_id":"public/2018/02/15/15-feb-2018/index.html","hash":"a3cdb9cf9a7dffce256fd0e2802e2932be6a3bba","modified":1527891004835},{"_id":"public/2018/02/06/6-feb-2018/index.html","hash":"290f84ccf4a3967a820e9a0ac76882c85a60c66c","modified":1527891004835},{"_id":"public/archives/index.html","hash":"64e9d37a1b19fbb3896a951d37ed8ec486f84f8a","modified":1527891004835},{"_id":"public/archives/2018/index.html","hash":"c3f61167234e2e05ebdd888343afbb709304a40a","modified":1527891004835},{"_id":"public/archives/2018/02/index.html","hash":"f63c2f98764594c9318f59660f17bd2159edfe0b","modified":1527891004835},{"_id":"public/archives/2018/03/index.html","hash":"884e39ca8a8e19dfbf4ee81bcbe0460359dcc12a","modified":1527891004835},{"_id":"public/tags/python-meetup-recap/index.html","hash":"d1bcc7a6b75d064ccda5eefebc882e5656c8ffe4","modified":1527891004835},{"_id":"public/index.html","hash":"b871ae8dfc9da02b65a71d96bbba1d0b9200a85c","modified":1527891004835},{"_id":"public/onboarding/index.html","hash":"8440a40fa80c0f10573dd62af789e3777b09aed2","modified":1527891004835},{"_id":"public/setupmac/index.html","hash":"a345d83da8829ddae60d0c04164452bb9a90674e","modified":1527891004835},{"_id":"public/setupwindows/index.html","hash":"07c940c5be960813187a7deb94f2310dc0e28931","modified":1527891004835},{"_id":"public/workshop1/index.html","hash":"cc4aa3f4c5636e7133feb82be83bf96fa7c73f25","modified":1527891004835},{"_id":"public/images/logo.svg","hash":"6de70d5f1da267250a06423e1fa9c32c0f61b3ed","modified":1527891004839},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1527891004847},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1527891004853},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1527891004855},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1527891004855},{"_id":"public/css/ie8.css","hash":"8438d7d3bba42b41d76d272263667576b209a93e","modified":1527891004865},{"_id":"public/css/ie9.css","hash":"1dad1d8872d9d5c8d7013d9e2327c7ce947c5951","modified":1527891004865},{"_id":"public/js/main.js","hash":"373d6a6b66b774cd548c36ea65f43fe9986a2fec","modified":1527891004865},{"_id":"public/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1527891004865},{"_id":"public/js/skel.min.js","hash":"14f390065fddc652ca1717aaebf5b44f8de78f9d","modified":1527891004865},{"_id":"public/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1527891004865},{"_id":"public/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1527891004865},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1527891004865},{"_id":"public/css/main.css","hash":"7cd647c15e8e17d1e6646031e0b01b39a5140756","modified":1527891004865},{"_id":"public/sass/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1527891004865},{"_id":"public/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1527891004865},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1527891004865},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1527891004874},{"_id":"public/sass/ie9.css","hash":"9ea5a5ca43be204a431ca6925f2203eeabd6bfdb","modified":1527891004898},{"_id":"public/sass/ie8.css","hash":"b75deb355629b4afc49e5d6504b21e2891f2209c","modified":1527891004898},{"_id":"public/sass/main.css","hash":"f205ec6e6f607eb30d2da6e950b6e8d0ba506d7a","modified":1527891005005}],"Category":[],"Data":[],"Page":[{"title":"Contributing to Redmond Python","date":"2018-03-25T01:02:42.000Z","_content":"\n# Contributing\n\n## Contribute to the Meetup\n\nWe always welcome outside speakers. Talks generally range from 10-30 minutes. You can speak about anything related to Python, including:\n\n- **An application or script you've written**: This can be as fundamental as it gets. If you've written a script and it's solved a problem for you, we'd love to hear about it. It doesn't have to be complicated or fancy, as we welcome all newcomers and experienced dev alike to share experiences.\n- **Frameworks you've used**: Have you used a framework that you thought was cool or interesting? We welcome you to speak about frameworks and Python tools that you think others might want to learn about.\n- **Modules you've used**: There are a ton of Python modules out there. We've love to hear about modules you've used in your work, no matter how small.\n\nWe're open to any ideas! Message us on <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup.com</a> if you have an idea for talk you'd like to give.\n\n## Contribute to the Site\n\nThis is a quick guide on how you can contribute to [Redmondpython.com](http://github.com/fernando-mc/redmondpython.com). We accept pull requests for all content on the site.\n\n- For help with git commands and repository management, here is a [quick intro to Git](https://www.codeschool.com/courses/try-git).\n- You can also check out [GitKraken](https://www.gitkraken.com/) - an intuitive client for Git.\n\n### Get the Site Repo\n\nThe repository for this site is available [here @ Github](http://github.com/mkpt/rp2018).\n\n#### Requirements\n\nYou will need [Hexo](https://hexo.io/). Running the instance locally is a simple:\n\n```\n$ git clone http://github.com/mkpt/rp2018.git\n$ cd rp2018\n$ npm install\n$ hexo generate\n$ hexo server \n```\n\nYou should get the instance up [locally at http://localhost:4040/](http://localhost:4040/).\n\n## Community\n\nJoin us here!\n\n- <a href=\"https://redmondpython.slack.com/\">Slack</a>\n- <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup Group</a>\n","source":"about/index.md","raw":"---\ntitle: Contributing to Redmond Python\ndate: 2018-03-24 18:02:42\n---\n\n# Contributing\n\n## Contribute to the Meetup\n\nWe always welcome outside speakers. Talks generally range from 10-30 minutes. You can speak about anything related to Python, including:\n\n- **An application or script you've written**: This can be as fundamental as it gets. If you've written a script and it's solved a problem for you, we'd love to hear about it. It doesn't have to be complicated or fancy, as we welcome all newcomers and experienced dev alike to share experiences.\n- **Frameworks you've used**: Have you used a framework that you thought was cool or interesting? We welcome you to speak about frameworks and Python tools that you think others might want to learn about.\n- **Modules you've used**: There are a ton of Python modules out there. We've love to hear about modules you've used in your work, no matter how small.\n\nWe're open to any ideas! Message us on <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup.com</a> if you have an idea for talk you'd like to give.\n\n## Contribute to the Site\n\nThis is a quick guide on how you can contribute to [Redmondpython.com](http://github.com/fernando-mc/redmondpython.com). We accept pull requests for all content on the site.\n\n- For help with git commands and repository management, here is a [quick intro to Git](https://www.codeschool.com/courses/try-git).\n- You can also check out [GitKraken](https://www.gitkraken.com/) - an intuitive client for Git.\n\n### Get the Site Repo\n\nThe repository for this site is available [here @ Github](http://github.com/mkpt/rp2018).\n\n#### Requirements\n\nYou will need [Hexo](https://hexo.io/). Running the instance locally is a simple:\n\n```\n$ git clone http://github.com/mkpt/rp2018.git\n$ cd rp2018\n$ npm install\n$ hexo generate\n$ hexo server \n```\n\nYou should get the instance up [locally at http://localhost:4040/](http://localhost:4040/).\n\n## Community\n\nJoin us here!\n\n- <a href=\"https://redmondpython.slack.com/\">Slack</a>\n- <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup Group</a>\n","updated":"2018-06-01T21:37:57.268Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjhwiuryt000175j5lm2ommxp","content":"<h1 id=\"Contributing\"><a href=\"#Contributing\" class=\"headerlink\" title=\"Contributing\"></a>Contributing</h1><h2 id=\"Contribute-to-the-Meetup\"><a href=\"#Contribute-to-the-Meetup\" class=\"headerlink\" title=\"Contribute to the Meetup\"></a>Contribute to the Meetup</h2><p>We always welcome outside speakers. Talks generally range from 10-30 minutes. You can speak about anything related to Python, including:</p>\n<ul>\n<li><strong>An application or script you’ve written</strong>: This can be as fundamental as it gets. If you’ve written a script and it’s solved a problem for you, we’d love to hear about it. It doesn’t have to be complicated or fancy, as we welcome all newcomers and experienced dev alike to share experiences.</li>\n<li><strong>Frameworks you’ve used</strong>: Have you used a framework that you thought was cool or interesting? We welcome you to speak about frameworks and Python tools that you think others might want to learn about.</li>\n<li><strong>Modules you’ve used</strong>: There are a ton of Python modules out there. We’ve love to hear about modules you’ve used in your work, no matter how small.</li>\n</ul>\n<p>We’re open to any ideas! Message us on <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup.com</a> if you have an idea for talk you’d like to give.</p>\n<h2 id=\"Contribute-to-the-Site\"><a href=\"#Contribute-to-the-Site\" class=\"headerlink\" title=\"Contribute to the Site\"></a>Contribute to the Site</h2><p>This is a quick guide on how you can contribute to <a href=\"http://github.com/fernando-mc/redmondpython.com\" target=\"_blank\" rel=\"noopener\">Redmondpython.com</a>. We accept pull requests for all content on the site.</p>\n<ul>\n<li>For help with git commands and repository management, here is a <a href=\"https://www.codeschool.com/courses/try-git\" target=\"_blank\" rel=\"noopener\">quick intro to Git</a>.</li>\n<li>You can also check out <a href=\"https://www.gitkraken.com/\" target=\"_blank\" rel=\"noopener\">GitKraken</a> - an intuitive client for Git.</li>\n</ul>\n<h3 id=\"Get-the-Site-Repo\"><a href=\"#Get-the-Site-Repo\" class=\"headerlink\" title=\"Get the Site Repo\"></a>Get the Site Repo</h3><p>The repository for this site is available <a href=\"http://github.com/mkpt/rp2018\" target=\"_blank\" rel=\"noopener\">here @ Github</a>.</p>\n<h4 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h4><p>You will need <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>. Running the instance locally is a simple:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone http://github.com/mkpt/rp2018.git</span><br><span class=\"line\">$ cd rp2018</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>You should get the instance up <a href=\"http://localhost:4040/\" target=\"_blank\" rel=\"noopener\">locally at http://localhost:4040/</a>.</p>\n<h2 id=\"Community\"><a href=\"#Community\" class=\"headerlink\" title=\"Community\"></a>Community</h2><p>Join us here!</p>\n<ul>\n<li><a href=\"https://redmondpython.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a></li>\n<li><a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup Group</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Contributing\"><a href=\"#Contributing\" class=\"headerlink\" title=\"Contributing\"></a>Contributing</h1><h2 id=\"Contribute-to-the-Meetup\"><a href=\"#Contribute-to-the-Meetup\" class=\"headerlink\" title=\"Contribute to the Meetup\"></a>Contribute to the Meetup</h2><p>We always welcome outside speakers. Talks generally range from 10-30 minutes. You can speak about anything related to Python, including:</p>\n<ul>\n<li><strong>An application or script you’ve written</strong>: This can be as fundamental as it gets. If you’ve written a script and it’s solved a problem for you, we’d love to hear about it. It doesn’t have to be complicated or fancy, as we welcome all newcomers and experienced dev alike to share experiences.</li>\n<li><strong>Frameworks you’ve used</strong>: Have you used a framework that you thought was cool or interesting? We welcome you to speak about frameworks and Python tools that you think others might want to learn about.</li>\n<li><strong>Modules you’ve used</strong>: There are a ton of Python modules out there. We’ve love to hear about modules you’ve used in your work, no matter how small.</li>\n</ul>\n<p>We’re open to any ideas! Message us on <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup.com</a> if you have an idea for talk you’d like to give.</p>\n<h2 id=\"Contribute-to-the-Site\"><a href=\"#Contribute-to-the-Site\" class=\"headerlink\" title=\"Contribute to the Site\"></a>Contribute to the Site</h2><p>This is a quick guide on how you can contribute to <a href=\"http://github.com/fernando-mc/redmondpython.com\" target=\"_blank\" rel=\"noopener\">Redmondpython.com</a>. We accept pull requests for all content on the site.</p>\n<ul>\n<li>For help with git commands and repository management, here is a <a href=\"https://www.codeschool.com/courses/try-git\" target=\"_blank\" rel=\"noopener\">quick intro to Git</a>.</li>\n<li>You can also check out <a href=\"https://www.gitkraken.com/\" target=\"_blank\" rel=\"noopener\">GitKraken</a> - an intuitive client for Git.</li>\n</ul>\n<h3 id=\"Get-the-Site-Repo\"><a href=\"#Get-the-Site-Repo\" class=\"headerlink\" title=\"Get the Site Repo\"></a>Get the Site Repo</h3><p>The repository for this site is available <a href=\"http://github.com/mkpt/rp2018\" target=\"_blank\" rel=\"noopener\">here @ Github</a>.</p>\n<h4 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h4><p>You will need <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>. Running the instance locally is a simple:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone http://github.com/mkpt/rp2018.git</span><br><span class=\"line\">$ cd rp2018</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>You should get the instance up <a href=\"http://localhost:4040/\" target=\"_blank\" rel=\"noopener\">locally at http://localhost:4040/</a>.</p>\n<h2 id=\"Community\"><a href=\"#Community\" class=\"headerlink\" title=\"Community\"></a>Community</h2><p>Join us here!</p>\n<ul>\n<li><a href=\"https://redmondpython.slack.com/\" target=\"_blank\" rel=\"noopener\">Slack</a></li>\n<li><a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup Group</a></li>\n</ul>\n"},{"title":"Practice Exercises","date":"2018-03-25T01:25:39.000Z","_content":"\nHere are some tutorials and exercises to practice your new Python skills.\n\n## Exercises and tutorials in Python 3\n\n- [**Interactive Python**](http://interactivepython.org/runestone/static/thinkcspy/toc.html): This includes some theory as well as some practical exercises.\n- [**HackerRank**](https://www.hackerrank.com/): The mother of all exercise sites. Use Python 3 or 2.\n- [**Python Tutorial from University of Waterloo**](http://cscircles.cemc.uwaterloo.ca/dev/): Follow the tutorial and run interactive code in your browser.\n- [**Coding Bat**](www.codingbat.com): This is a series of short Python exercises that are great for quick practice. Create an account & log in to track your progress and access additional exercises.\n\n## Exercises and tutorials in Python 2\n\nThese exercises and tutorials are in Python 2, but since they're all browser-based you should be able to follow along regardless of what version of Python you use locally. \n\n- [**Codecademy**](http://www.codecademy.com/courses/python-beginner-en-kSQwt/0/1): This is part of Codecademy's Intro to Python class. Again, you can create an account to track your progress and access additional lessons.\n\nRemember the two main differences in Python 2 and 3:\n\n```\n# Printing in Python 2\nprint \"Hello World\"\n# Printing in Python 3\nprint(\"Hello World\")\n\n# Division in Python 2\n5/2   # result is 2\n5/2.0 # result is 2.5\n# Division in Python 3\n5/2   # result is 2.5\n5//2  # result is 2\n```\n","source":"practice/index.md","raw":"---\ntitle: Practice Exercises\ndate: 2018-03-24 18:25:39\n---\n\nHere are some tutorials and exercises to practice your new Python skills.\n\n## Exercises and tutorials in Python 3\n\n- [**Interactive Python**](http://interactivepython.org/runestone/static/thinkcspy/toc.html): This includes some theory as well as some practical exercises.\n- [**HackerRank**](https://www.hackerrank.com/): The mother of all exercise sites. Use Python 3 or 2.\n- [**Python Tutorial from University of Waterloo**](http://cscircles.cemc.uwaterloo.ca/dev/): Follow the tutorial and run interactive code in your browser.\n- [**Coding Bat**](www.codingbat.com): This is a series of short Python exercises that are great for quick practice. Create an account & log in to track your progress and access additional exercises.\n\n## Exercises and tutorials in Python 2\n\nThese exercises and tutorials are in Python 2, but since they're all browser-based you should be able to follow along regardless of what version of Python you use locally. \n\n- [**Codecademy**](http://www.codecademy.com/courses/python-beginner-en-kSQwt/0/1): This is part of Codecademy's Intro to Python class. Again, you can create an account to track your progress and access additional lessons.\n\nRemember the two main differences in Python 2 and 3:\n\n```\n# Printing in Python 2\nprint \"Hello World\"\n# Printing in Python 3\nprint(\"Hello World\")\n\n# Division in Python 2\n5/2   # result is 2\n5/2.0 # result is 2.5\n# Division in Python 3\n5/2   # result is 2.5\n5//2  # result is 2\n```\n","updated":"2018-06-01T21:37:57.268Z","path":"practice/index.html","comments":1,"layout":"page","_id":"cjhwiurz1000375j5ihttjpk7","content":"<p>Here are some tutorials and exercises to practice your new Python skills.</p>\n<h2 id=\"Exercises-and-tutorials-in-Python-3\"><a href=\"#Exercises-and-tutorials-in-Python-3\" class=\"headerlink\" title=\"Exercises and tutorials in Python 3\"></a>Exercises and tutorials in Python 3</h2><ul>\n<li><a href=\"http://interactivepython.org/runestone/static/thinkcspy/toc.html\" target=\"_blank\" rel=\"noopener\"><strong>Interactive Python</strong></a>: This includes some theory as well as some practical exercises.</li>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\"><strong>HackerRank</strong></a>: The mother of all exercise sites. Use Python 3 or 2.</li>\n<li><a href=\"http://cscircles.cemc.uwaterloo.ca/dev/\" target=\"_blank\" rel=\"noopener\"><strong>Python Tutorial from University of Waterloo</strong></a>: Follow the tutorial and run interactive code in your browser.</li>\n<li><a href=\"www.codingbat.com\"><strong>Coding Bat</strong></a>: This is a series of short Python exercises that are great for quick practice. Create an account &amp; log in to track your progress and access additional exercises.</li>\n</ul>\n<h2 id=\"Exercises-and-tutorials-in-Python-2\"><a href=\"#Exercises-and-tutorials-in-Python-2\" class=\"headerlink\" title=\"Exercises and tutorials in Python 2\"></a>Exercises and tutorials in Python 2</h2><p>These exercises and tutorials are in Python 2, but since they’re all browser-based you should be able to follow along regardless of what version of Python you use locally. </p>\n<ul>\n<li><a href=\"http://www.codecademy.com/courses/python-beginner-en-kSQwt/0/1\" target=\"_blank\" rel=\"noopener\"><strong>Codecademy</strong></a>: This is part of Codecademy’s Intro to Python class. Again, you can create an account to track your progress and access additional lessons.</li>\n</ul>\n<p>Remember the two main differences in Python 2 and 3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Printing in Python 2</span><br><span class=\"line\">print &quot;Hello World&quot;</span><br><span class=\"line\"># Printing in Python 3</span><br><span class=\"line\">print(&quot;Hello World&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Division in Python 2</span><br><span class=\"line\">5/2   # result is 2</span><br><span class=\"line\">5/2.0 # result is 2.5</span><br><span class=\"line\"># Division in Python 3</span><br><span class=\"line\">5/2   # result is 2.5</span><br><span class=\"line\">5//2  # result is 2</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Here are some tutorials and exercises to practice your new Python skills.</p>\n<h2 id=\"Exercises-and-tutorials-in-Python-3\"><a href=\"#Exercises-and-tutorials-in-Python-3\" class=\"headerlink\" title=\"Exercises and tutorials in Python 3\"></a>Exercises and tutorials in Python 3</h2><ul>\n<li><a href=\"http://interactivepython.org/runestone/static/thinkcspy/toc.html\" target=\"_blank\" rel=\"noopener\"><strong>Interactive Python</strong></a>: This includes some theory as well as some practical exercises.</li>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\"><strong>HackerRank</strong></a>: The mother of all exercise sites. Use Python 3 or 2.</li>\n<li><a href=\"http://cscircles.cemc.uwaterloo.ca/dev/\" target=\"_blank\" rel=\"noopener\"><strong>Python Tutorial from University of Waterloo</strong></a>: Follow the tutorial and run interactive code in your browser.</li>\n<li><a href=\"www.codingbat.com\"><strong>Coding Bat</strong></a>: This is a series of short Python exercises that are great for quick practice. Create an account &amp; log in to track your progress and access additional exercises.</li>\n</ul>\n<h2 id=\"Exercises-and-tutorials-in-Python-2\"><a href=\"#Exercises-and-tutorials-in-Python-2\" class=\"headerlink\" title=\"Exercises and tutorials in Python 2\"></a>Exercises and tutorials in Python 2</h2><p>These exercises and tutorials are in Python 2, but since they’re all browser-based you should be able to follow along regardless of what version of Python you use locally. </p>\n<ul>\n<li><a href=\"http://www.codecademy.com/courses/python-beginner-en-kSQwt/0/1\" target=\"_blank\" rel=\"noopener\"><strong>Codecademy</strong></a>: This is part of Codecademy’s Intro to Python class. Again, you can create an account to track your progress and access additional lessons.</li>\n</ul>\n<p>Remember the two main differences in Python 2 and 3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Printing in Python 2</span><br><span class=\"line\">print &quot;Hello World&quot;</span><br><span class=\"line\"># Printing in Python 3</span><br><span class=\"line\">print(&quot;Hello World&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Division in Python 2</span><br><span class=\"line\">5/2   # result is 2</span><br><span class=\"line\">5/2.0 # result is 2.5</span><br><span class=\"line\"># Division in Python 3</span><br><span class=\"line\">5/2   # result is 2.5</span><br><span class=\"line\">5//2  # result is 2</span><br></pre></td></tr></table></figure>\n"},{"title":"Projects","date":"2018-03-25T01:25:45.000Z","_content":"\nDownload these projects as part of the workshop curriculum.\n\n## Sparrow\n\nBuild a Twitter bot that Tweets things out for you, you can even deploy it to an [Infrastructure as a Service](https://github.com/fernando-mc/sparrow) provider like AWS. Here is a [comprehensive walkthrough](https://www.fernandomc.com/posts/sparrow-python-twitter-bot-shell-aws-lambda/). \n\n## Wordplay\n\nExplore these short Python files that help you cheat at Scrabble or crossword puzzles.  Wordplay is comptatible with both Python 2 & Python 3.\n[Git clone](https://github.com/PyStarPhilly/Wordplay) or [download zip file](https://github.com/PyStarPhilly/Wordplay/archive/master.zip).\n\n## ColorWall\n\nSee how Python can be used to create simple animations.\n\n- *ColorWall for Python3*: [Git Clone](https://github.com/PyStarPhilly/Colorwall3) or [download zip file](https://github.com/PyStarPhilly/Colorwall3/archive/master.zip).\n- *ColorWall for Python2*: [Git Clone](https://github.com/PyStarPhilly/ColorWall) or [download zip file](https://github.com/PyStarPhilly/ColorWall/archive/master.zip).\n\n## Basic Flask API\n\nA basic REST API using the Flask Framework: [Github](https://github.com/mkpt/basic-flask-api).\n\n## Web Scraper\n\nA web scraper for the New York Times homepage: [Github](https://github.com/mkpt/bsoup).","source":"projects/index.md","raw":"---\ntitle: Projects\ndate: 2018-03-24 18:25:45\n---\n\nDownload these projects as part of the workshop curriculum.\n\n## Sparrow\n\nBuild a Twitter bot that Tweets things out for you, you can even deploy it to an [Infrastructure as a Service](https://github.com/fernando-mc/sparrow) provider like AWS. Here is a [comprehensive walkthrough](https://www.fernandomc.com/posts/sparrow-python-twitter-bot-shell-aws-lambda/). \n\n## Wordplay\n\nExplore these short Python files that help you cheat at Scrabble or crossword puzzles.  Wordplay is comptatible with both Python 2 & Python 3.\n[Git clone](https://github.com/PyStarPhilly/Wordplay) or [download zip file](https://github.com/PyStarPhilly/Wordplay/archive/master.zip).\n\n## ColorWall\n\nSee how Python can be used to create simple animations.\n\n- *ColorWall for Python3*: [Git Clone](https://github.com/PyStarPhilly/Colorwall3) or [download zip file](https://github.com/PyStarPhilly/Colorwall3/archive/master.zip).\n- *ColorWall for Python2*: [Git Clone](https://github.com/PyStarPhilly/ColorWall) or [download zip file](https://github.com/PyStarPhilly/ColorWall/archive/master.zip).\n\n## Basic Flask API\n\nA basic REST API using the Flask Framework: [Github](https://github.com/mkpt/basic-flask-api).\n\n## Web Scraper\n\nA web scraper for the New York Times homepage: [Github](https://github.com/mkpt/bsoup).","updated":"2018-06-01T21:37:57.268Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cjhwiurzb000675j5pteqyyjy","content":"<p>Download these projects as part of the workshop curriculum.</p>\n<h2 id=\"Sparrow\"><a href=\"#Sparrow\" class=\"headerlink\" title=\"Sparrow\"></a>Sparrow</h2><p>Build a Twitter bot that Tweets things out for you, you can even deploy it to an <a href=\"https://github.com/fernando-mc/sparrow\" target=\"_blank\" rel=\"noopener\">Infrastructure as a Service</a> provider like AWS. Here is a <a href=\"https://www.fernandomc.com/posts/sparrow-python-twitter-bot-shell-aws-lambda/\" target=\"_blank\" rel=\"noopener\">comprehensive walkthrough</a>. </p>\n<h2 id=\"Wordplay\"><a href=\"#Wordplay\" class=\"headerlink\" title=\"Wordplay\"></a>Wordplay</h2><p>Explore these short Python files that help you cheat at Scrabble or crossword puzzles.  Wordplay is comptatible with both Python 2 &amp; Python 3.<br><a href=\"https://github.com/PyStarPhilly/Wordplay\" target=\"_blank\" rel=\"noopener\">Git clone</a> or <a href=\"https://github.com/PyStarPhilly/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</p>\n<h2 id=\"ColorWall\"><a href=\"#ColorWall\" class=\"headerlink\" title=\"ColorWall\"></a>ColorWall</h2><p>See how Python can be used to create simple animations.</p>\n<ul>\n<li><em>ColorWall for Python3</em>: <a href=\"https://github.com/PyStarPhilly/Colorwall3\" target=\"_blank\" rel=\"noopener\">Git Clone</a> or <a href=\"https://github.com/PyStarPhilly/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</li>\n<li><em>ColorWall for Python2</em>: <a href=\"https://github.com/PyStarPhilly/ColorWall\" target=\"_blank\" rel=\"noopener\">Git Clone</a> or <a href=\"https://github.com/PyStarPhilly/ColorWall/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</li>\n</ul>\n<h2 id=\"Basic-Flask-API\"><a href=\"#Basic-Flask-API\" class=\"headerlink\" title=\"Basic Flask API\"></a>Basic Flask API</h2><p>A basic REST API using the Flask Framework: <a href=\"https://github.com/mkpt/basic-flask-api\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n<h2 id=\"Web-Scraper\"><a href=\"#Web-Scraper\" class=\"headerlink\" title=\"Web Scraper\"></a>Web Scraper</h2><p>A web scraper for the New York Times homepage: <a href=\"https://github.com/mkpt/bsoup\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Download these projects as part of the workshop curriculum.</p>\n<h2 id=\"Sparrow\"><a href=\"#Sparrow\" class=\"headerlink\" title=\"Sparrow\"></a>Sparrow</h2><p>Build a Twitter bot that Tweets things out for you, you can even deploy it to an <a href=\"https://github.com/fernando-mc/sparrow\" target=\"_blank\" rel=\"noopener\">Infrastructure as a Service</a> provider like AWS. Here is a <a href=\"https://www.fernandomc.com/posts/sparrow-python-twitter-bot-shell-aws-lambda/\" target=\"_blank\" rel=\"noopener\">comprehensive walkthrough</a>. </p>\n<h2 id=\"Wordplay\"><a href=\"#Wordplay\" class=\"headerlink\" title=\"Wordplay\"></a>Wordplay</h2><p>Explore these short Python files that help you cheat at Scrabble or crossword puzzles.  Wordplay is comptatible with both Python 2 &amp; Python 3.<br><a href=\"https://github.com/PyStarPhilly/Wordplay\" target=\"_blank\" rel=\"noopener\">Git clone</a> or <a href=\"https://github.com/PyStarPhilly/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</p>\n<h2 id=\"ColorWall\"><a href=\"#ColorWall\" class=\"headerlink\" title=\"ColorWall\"></a>ColorWall</h2><p>See how Python can be used to create simple animations.</p>\n<ul>\n<li><em>ColorWall for Python3</em>: <a href=\"https://github.com/PyStarPhilly/Colorwall3\" target=\"_blank\" rel=\"noopener\">Git Clone</a> or <a href=\"https://github.com/PyStarPhilly/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</li>\n<li><em>ColorWall for Python2</em>: <a href=\"https://github.com/PyStarPhilly/ColorWall\" target=\"_blank\" rel=\"noopener\">Git Clone</a> or <a href=\"https://github.com/PyStarPhilly/ColorWall/archive/master.zip\" target=\"_blank\" rel=\"noopener\">download zip file</a>.</li>\n</ul>\n<h2 id=\"Basic-Flask-API\"><a href=\"#Basic-Flask-API\" class=\"headerlink\" title=\"Basic Flask API\"></a>Basic Flask API</h2><p>A basic REST API using the Flask Framework: <a href=\"https://github.com/mkpt/basic-flask-api\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n<h2 id=\"Web-Scraper\"><a href=\"#Web-Scraper\" class=\"headerlink\" title=\"Web Scraper\"></a>Web Scraper</h2><p>A web scraper for the New York Times homepage: <a href=\"https://github.com/mkpt/bsoup\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n"},{"title":"Machine Setup","date":"2018-03-27T00:09:50.000Z","_content":"\nFollow the links below for your platform:\n\n- [Windows](/setupwindows)\n- [Mac](/setupmac)\n- [Linux](/setuplinux)","source":"machine-setup/index.md","raw":"---\ntitle: Machine Setup\ndate: 2018-03-26 17:09:50\n---\n\nFollow the links below for your platform:\n\n- [Windows](/setupwindows)\n- [Mac](/setupmac)\n- [Linux](/setuplinux)","updated":"2018-06-01T21:37:57.268Z","path":"machine-setup/index.html","comments":1,"layout":"page","_id":"cjhwiurze000875j5nkosg0jj","content":"<p>Follow the links below for your platform:</p>\n<ul>\n<li><a href=\"/setupwindows\">Windows</a></li>\n<li><a href=\"/setupmac\">Mac</a></li>\n<li><a href=\"/setuplinux\">Linux</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Follow the links below for your platform:</p>\n<ul>\n<li><a href=\"/setupwindows\">Windows</a></li>\n<li><a href=\"/setupmac\">Mac</a></li>\n<li><a href=\"/setuplinux\">Linux</a></li>\n</ul>\n"},{"title":"Redmond Python Meetup Onboarding","date":"2018-03-24T20:45:35.000Z","_content":"\n## Overview\n\nWelcome!\n\nIf you are reading this page, you have expressed an interest in attending the Redmond Python Meetup. The Redmond Python Meetup is for *everyone*--from new programmers to experienced developers.\n\nThis page will walk you through the following:\n\n- How to install Python on your computer\n- How to use the Python Interpreter to run Python code\n- How to write and manipulate basic Python data types, functions, and loops\n\nAt this point, you probably fall into one of three categories based on your experience level:\n\n|Experience Level|Recommendation\n|:---:|---|\n|\"I'm brand new to development and Python.\"|Come to the meetup for a guided on-boarding session with our TAs where you can complete this page and ask questions as you go. If you're feeling adventurous, you can start with installation below and try to get as far as you can.|\n|\"I'm new to Python but I have some programming experience.\"|Feel free to get as far as you can on this page and come to the meetup with questions, or you can come to the meetup and do an on-boarding session with our TAs.|\n|\"I'm an experience developer\"|Feel free to go through this page on your own and come to the meetup with any questions|\n\n## About Python\n\nPython is an easy-to-write, easy-to-read interpreted scripting language. \"Hello world!\" is one line and looks like this:\n\n```py\n>>> print(\"Hello world!\")\nHello world!\n```\nHere is a more complex example application that sends an email. It's still only 5 lines, though.\n\n```py\nimport smtplib\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.login(\"youremailusername\", \"password\")\nmsg = \"/nHello!\"\nserver.sendmail(\"you@gmail.com\", \"yourFriend@hotmail.com\", msg)\n```\nThe above code does the following:\n\n1. Imports some code in an external module (code that we didn't write, but that are nevertheless using).\n2. Creates an SMTP object to connect to a server.\n3. Logs in to the server.\n4. Creates our message.\n5. Sends the message.\n\nYou don't need to understand this syntax at this time. The purpose of this example is simply to show you what you can accomplish in a few lines of Python code, which may take dozens of lines in other programming languages.\n\n## Basic Python Features\n\nThere are a few characteristics of Python that you should remember:\n\n- **Python is open source**: Anyone can see all of the underlying code and everyone has the chance to contribute to the code base.\n- **Python is object-oriented**: Everything in Python is an object.\n- **Python is platform-independent**: You can write an application on one operating system and run it on another.\n- **Python has a minimalist design philosophy**: This emphasizes cleanliness and readability, with minimal semicolons and brackets.\n\n## What kinds of things can you do with Python?\n\nThe sky is the limit, but here are some examples:\n\n  - Interact with files on your computer\n  - Automate tasks as part of a workflow\n  - Scrape data off a website\n  - Build and deploy REST APIs\n  - Build games\n  - Interact with cloud services (AWS, Azure, Google, etc.)\n\n# Setup\n\n## Installing Python\n\nLet's first get Python installed on your computer. There are two major versions of Python out there in the wild right now: Python 2 and Python 3. Python 2 is retiring in 2020, so we'll be using Python 3.\n\nIn fact, you might already have one of these versions installed on your computer. Let's check:\n\n1. Open a terminal or command prompt.\n    - **WIN**: Start Menu > Command Prompt.\n    - **MAC/LIN**: Application > Terminal.\n2. Type `python` and hit **ENTER**. Do you see something like this? It means you have Python 3 installed on your computer.\n    ```bash\n    Python 3.6.4 (default, Jan  3 2018, 12:27:09)\n    [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>\n    ```\n    If you get an error, you probably need to install Python. Note that you may have Python 2 installed (it will say `Python 2.x.x`), in which case you'll want to install Python 3.\n\nSee the following pages for platform-specific instructions on installing Python:\n\n- [Windows](/setupwindows)\n- [MacOS](/setupmac/)\n- [Linux](/setuplinux/)\n\nWhen you're finished, come back here and continue to the next section.\n\n## Using the Python Interpreter\n\nNow that we have Python installed, let's open the Python interpreter. The interpreter is a small application that let's us type some Python and execute it easily:\n\n1. Open a terminal or command prompt like you did in the previous section.\n2. Type `python` and hit **ENTER**.\n\nYour prompt should look something like the following (if it doesn't, let a TA know):\n```\nPython 3.6.4 (default, Jan  3 2018, 12:27:09)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\nYou'll know you're in the Python interpreter when you see this prompt:\n```\n>>>\n```\nThis means the Python interpreter is ready for your input. We can type Python code directly into this prompt and it will execute. Note that as you go through this on-boarding page, you'll see code samples like this:\n```\n>>> a = \"Hello\"\n```\nThis means that you can type this line in at the `>>>` prompt. Simply enter the line of code, hit **Enter** after every line you enter, and note the output (although sometimes there won't be any!).\n\n**Tip**: Don't copy and paste commands -- type them out. You'll learn far more if you take the time to type everything yourself.\n\nTo exit the interpreter:\n\n1. Type `exit()` or hit `ctrl+d` to exit the Python interpreter and return to the computer's terminal.\n2. Now, reopen the Python interpreter. A key point here is that everything that you entered in that previous Python interpreter session is **lost** between sessions. **The data does NOT persist**.\n\nFor now, we'll just be working with Python via the interpreter while we learn the basics. We'll show you later how to write lines of code in a file and run a full Python script at the command line.\n\n# Getting Started with Python Code\n\n## Basic Operations\n\nLet's do some basic operations in Python to teach you how to interact with the Python interpreter.\n\n1. Open the Python interpreter like we showed you in the previous section.\n2. Type the following lines, noting the output:\n  ```py\n  >>> 2 + 4\n  >>> 5 - 1\n  >>> 3 * 4\n  >>> 10 / 2\n  ```\n  Awesome! This is how easy it is to write and execute Python. This also introduces you to some basic math operations available to you in Python like addition, subtraction, etc. We'll expand on those later.\n\n  Now try these:\n  ```py\n  >>> 2+4\n  >>> 5-1\n  >>> 3*4\n  >>> 10/2\n  ```\n  Same operations as before. Note that the whitespace between values, in this case, doesn't matter. In Python, `2+4` is the same as `2 + 4`.\n\n## Variables\n\nNext, let's introduce variables. Variables are used to store values--numbers, words, lists of numbers and words, etc. This allows us to reference these variables later in our application. Imagine if you were writing an application and wanted to display your company name in 20 different places. Instead of writing your company name out 20 times, you can write it once and store it in a variable, and then reference the variable wherever you need it.\n\n### Storing Numbers\n\nLet's create a few variables that store some simple numbers. We'll use the `=` symbol to store values. This equals sign is formally called the **assignment operator**.\n```py\n>>> x = 4\n>>> y = 2\n>>> print(x + y)\n```\nWhat did we just do?\n\n1. We assigned the number 4 to the variable \"x\" and the number 2 to \"y\".\n2. We then called the \"print\" function to print the sum. `print()` is a built-in function that we can access anywhere, and always prints the contents out to the console.\n\nFor experienced developers, note that we don't have to tell the interpreter that our variables are numbers. We just assign and run. Python will assign the type automatically when we run our program (\"at runtime\").\n\n## Storing Strings\n\nNumbers are great, but let's try entering some strings of text. Go ahead and type the following, replacing the value for the `name` variable with your name below:\n```py\n>>> name = 'Your Name'\n>>> print(name)\n>>> fav_food = \"Pasta\"\n>>> print(fav_food)\n>>> long_multiline_string = \"\"\"When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.\"\"\"\n>>> print(long_multiline_string)\n```\nNotice the use of quotes--single, double, or triple quotes are acceptable in Python. Just be consistent throughout your application! To keep things simple, we'll use double quotes and all of our variables will start with a lowercase letter for now. We'll be expanding on variables and functions later.\n\n>*Remember*: Once you close the interpreter, all of this data is lost.\n\n## Numbers\n\nThere are two number data types in Python 3:\n\n- **integers**: Whole numbers with no decimal point (e.g. 1, 2, -504803, 6238746289374692837649283764829).\n- **floats**: Written with a decimal point dividing the integer and fractional parts (e.g. .5, 842.32, .000238923).\n\nMath in Python looks a lot like math with a calculator. Type the following into the interpreter.\n\n### Addition\n\n```py\n>>> 2 + 2\n>>> 1.65 + 2.15\n>>> 2 + 1.65\n```\n\n### Subtraction\n\n```py\n>>> 12 - 5\n>>> 45.9 - 25.3\n>>> 2 - -4\n```\n\n### Multiplication\n\n```py\n>>> 6 * 7\n>>> 5.6 * 4.3\n>>> 6 * -5\n```\n\n### Division\n\n```py\n>>> 12/3\n>>> 16/5\n>>> 10/-5\n```\n\nIf you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division. Try the following, one with one `/` and the other with two `//`:\n```py\n>>> 16/5\n>>> 16//5\n```\n\n### Modulus\n\nThinking back to long division that you may have learned in school, the modulus is the “remainder” after performing division. It uses the % symbol.\n```py\n>>> 16%5\n>>> 50%4\n```\n\n### Order of Operations\n\nOrder of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.\n```py\n>>> 5 + 4 * 3\n>>> (5 + 4) * 3\n```\n\n> **Note:** We've just covered a lot! Using the interpreter, variables, entering basic data types, doing some basic math....questions? Ask a TA!\n\n## Booleans\n\nSo far, the code we've written has been *unconditional*: no choice is getting made in the program--all of the code runs. Python has another data type called a **boolean** that is helpful when writing code that makes decisions. Booleans hold two values: `True` and `False`.\n\nOpen the Python interpreter and type these:\n```py\n>>> True\n>>> type(True)\n>>> False\n>>> type(False)\n>>> true\n>>> false\n```\n\n### Testing for Equality\n\nYou can use booleans to test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console (note that the double equals tests for equality):\n\n```py\n>>> 0 == 0\n>>> 1 == 0\n>>> 54 = 42\n```\n\nUse `==` to test for equality. Recall that `=` is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: `=` is assignment, `==` is comparison.\n\n### Testing for Inequality\n\nTo test for inequality, use `!=`:\n\n```py\n>>> \"a\" != \"a\"\n>>> \"a\" != \"A\"\n```\nThe above example demonstrates an important point: Python is CASE-SENSITIVE. Uppercase and lowercase matter.\n\n### Comparison Operators\n\nNext, let's look at comparison operators. `<`, `<=`, `>`, and `>=` have the same meaning as in math class. The result of these tests is a boolean:\n\n```py\n>>> 1 > 0\n>>> 2 >= 3\n>>> -1 < 0\n>>> .5 <= 1\n```\n\n### Membership Operators\n\nFinally, let's briefly look at membership operators. You can check for membership using the `in` keyword, which also results in a boolean:\n```py\n>>> \"H\" in \"Hello\"\n>>> \"h\" in \"Hello\"\n>>> x = \"He\"\n>>> x in \"Hello\"\n```\nOr check for a lack of membership with `not in`:\n```py\n>>> \"a\" not in \"abcde\"\n>>> \"Chicago\" not in \"Redmond Python Workshop\"\n```\n\n## Operators\n\nWe just introduced some operators that let us further manipulate our data. We've outlined some (not all) of the Python operators in the following tables:\n\n### Assignment Operators\n\n|Operator|Description|Example|\n|:----:|---|---|\n|`=`|Assigns values from right side operands to left side operand|`c = a + b` assigns value of `a + b` into `c`|\n|`+=` Add AND |Adds right operand to the left operand and assign the result to left operand|`c += a` is equivalent to `c = c + a`|\n|`-=` Subtract AND|Subtracts right operand from the left operand and assign the result to left operand|`c -= a` is equivalent to `c = c - a`|\n|`*=` Multiply AND|Multiplies right operand with the left operand and assign the result to left operand|`c *= a` is equivalent to `c = c * a`|\n|`/=` Divide AND|Divides left operand with the right operand and assign the result to left operand|`c /= a`  is equivalent to `c = c / a`|\n|`%=` Modulus AND|Calculates modulus using two operands and assign the result to left operand|`c %= a` is equivalent to `c = c % a`|\n|`**=` Exponent AND|Performs exponential calculation on operators and assign value to the left operand|`c **= a` is equivalent to `c = c ** a`|\n|`//=` Floor Division|Performs floor division on operators and assign value to the left operand |`c //= a` is equivalent to `c = c // a`|\n\nExercise:\n```py\n>>> a = 21\n>>> b = 10\n>>> c = 0\n>>> c = a + b\n>>> c\n>>> c += a\n>>> c\n>>> c *= a\n>>> c\n>>> c /= a\n>>> c\n>>> c = 2\n>>> c %= a\n>>> c\n>>> c **= a\n>>> c\n>>> c //= a\n>>> c\n```\n\n### Comparison Operators\n\nAssume `a = 5` and `b = 10`.\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`==`|If the values of two operands are equal, then the condition becomes true.|`a == b` evaluates to false.|\n|`!=`|If values of two operands are not equal, then condition becomes true.|`a != b` is true.|\n|`>`|If the value of left operand is greater than the value of right operand, then condition becomes true.|`a > b` is not true.|\n|`<`|If the value of left operand is less than the value of right operand, then condition becomes true.|`a < b` is true.|\n|`>=`|If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.|`a >= b` is not true.|\n|`<=`|If the value of left operand is less than or equal to the value of right operand, then condition becomes true.|`a <= b` is true.|\n\nExercise:\n```py\n>>> a = 5\n>>> b = 10\n>>> a == b\n>>> a != b\n>>> b = 5\n>>> a == b\n>>> a != b\n```\n\n**Key Point**: `=` assigns a value, `==` tests for equality, `!=` tests for inequality.\n\n### Logical Operators\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`and`|If both the operands are true then condition becomes true.|`x>4 and y<5`|\n|`or`|If any of the two operands are non-zero then condition becomes true.|`x>4 or y<5`|\n|`not`|Used to reverse the logical state of its operand.|`not(x and y)`|\n\n### Identity Operators\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`is`|Evaluates to true if the variables on either side of the operator point to the same object.|See below.|\n|`is not`|Evaluates to false if the variables on either side of the operator point to the same object.|See below.|\n\nExercise:\n```py\n>>> a = 1\n>>> b = 1\n>>> a is b\n>>> b = 2\n>>> a is b\n```\n\n## Conditional Branching\n\n### Using `if`\n\nNow that we know how to check if something is `True` or `False` using booleans and operators, we can use \"conditional branching\" to make Python execute commands on a conditional basis. Just take a look at the following code:\n\n```py\nif 6 > 5:\n     print(\"Six is greater than five!\")\n```\n\nThis is the first piece of Python we've written that crosses multiple lines, and the way to enter it at a Python interpreter's prompt is a little different than single lines of code.\n\nIn the interpreter:\n\n1. Type `if 6 > 5:`, and hit `ENTER`. The next line will have `...` as a prompt, instead of the usual `>>>`. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.\n2. Type 4 spaces, type `print(\"Six is greater than five!\")`, and then hit `ENTER` to end the line. Note that spaces are [officially the preferred indentation method](https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces).\n3. Finally, hit `ENTER` again to tell Python you are done with this code block. All together, it will look like this:\n\n```py\n>>> if 6 > 5:\n...      print(\"Six is greater than five!\")\nSix is greater than five!\n```\n\nSo what's going on here? When Python encounters the `if` keyword, it evaluates the expression following the keyword and before the colon.\n\n  - If that expression evaluates to `True`, Python executes the code in the indented code block under the `if` line.\n  - If that expression evaluates to `False`, Python skips over the code block.\n\nIn this case, because \"6 is greater than 5\" evaluates to true, Python executes the code block under the if statement, and we see \"Six is greater than five!\" printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:\n\n```py\n>>> if 0 > 2:\n...     print(\"Zero is greater than two!\")\n```\nAnother:\n```py\n>>> if \"banana\" in \"bananarama\":\n...    print(\"I miss the 80s.\")\n```\nOne more:\n```py\n>>> if \"Ringo\" not in \"John, Paul, and George\":\n...    print(\"Ringo wasn't much of a songwriter.\")\n```\n\n### Using `if` and `else`\n\nYou can use the `else` keyword to execute code only when the `if` expression isn't `True`:\n\n```py\n>>> sister_age = 15\n>>> brother_age = 12\n>>> if sister_age > brother_age:\n...    print(\"sister is older\")\n... else:\n...    print(\"brother is older\")\n```\n\nLike with `if`, the code block under the `else` statement must be indented so Python knows that it is a part of the `else` block.\n\n### Using `and` and `or`\n\nWe've been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the `and` and `or` logical operators.\n\n- If two expressions are joined by an `and`, they **both** have to be `True` for the overall expression to be `True`.\n- If two expressions are joined by an `or`, as long as **at least one** is `True`, the overall expression is `True`.\n\nTry typing these out and see what you get:\n\n```py\n>>> 1 > 0 and 1 < 2\n>>> 1 < 2 and \"x\" in \"abc\"\n>>> \"a\" in \"hello\" or \"e\" in \"hello\"\n>>> 1 <= 0 or \"a\" not in \"abc\"\n```\nGuess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting. Indenting is a crucial part of the syntax of Python.\n\n```py\n>>> temperature = 32\n>>> if temperature > 60 and temperature < 75:\n...    print(\"It's nice and cozy in here!\")\n... else:\n....    print(\"Too extreme for me.\")\n```\nOne more:\n```py\n>>> hour = 11\n>>> if hour < 7 or hour > 23:\n...    print(\"Go away!\")\n...    print(\"I'm sleeping!\")\n... else:\n...    print(\"Welcome to the cheese shop!\")\n...    print(\"Can I interest you in some choice gouda?\")\n```\n\nYou can have as many lines of code as you want in if-else block, just make sure to indent them so Python knows they are a part of the same indentation block.\n\n### Using `elif` and `else`\n\nIf you have more than two cases, you can use the `elif` keyword to check more cases. Think of `elif` as Python-speak for else if. You can have as many `elif` cases as you want. Python will go down the code checking each `elif` until it finds a `True` condition or reaches the default `else` block.\n\n```py\n>>> sister_age = 15\n>>> brother_age = 12\n>>> if sister_age > brother_age:\n...    print(\"sister is older\")\n... elif sister_age == brother_age:\n...    print(\"sister and brother are the same age\")\n... else:\n...    print(\"brother is older\")\n```\n\nYou don't have to have an `else` block if you don't need it. That just means there isn't default code to execute when none of the `if` or `elif`conditions are `True`:\n\n```py\n>>> color = \"orange\"\n... if color == \"green\" or color == \"red\":\n...    print(\"Christmas color!\")\n... elif color == \"black\" or color == \"orange\":\n...    print(\"Halloween color!\")\n... elif color == \"pink\":\n...    print(\"Valentine's Day color!\")\n```\n\nIf `color` had been \"purple\", the code wouldn't have printed anything. Remember that `=` is for assignment and `==` is for comparison.\n\n## Functions\n\nFunctions are how we perform actions on our data. We've been using a function a lot so far: `print()`. Calling a function is as easy as calling the function name and putting a variable or value between round brackets like we've been doing.\n\nTry the following:\n```py\n>>> a = \"The number 3: \"\n>>> b = 3\n>>> type(a)\n>>> type(b)\n>>> print(a, b)\n```\n\nThe values between the `()` brackets are called \"arguments.\" Certain functions let us pass arguments to our functions. like so:\n```py\n>>> str1 = \"Bill is\"\n>>> a = 50\n>>> str2 = \"years old.\"\n>>> print(str1, a, str2)\n```\nThere are three basic categories of functions:\n\n- The built-in kind that come with Python when we install it (e.g.`print()`)\n- The kind we write ourselves\n- The kind that other people wrote that we can borrow (by importing their code modules and using them in our programs)\n\nWe've already introduced the built-in kind. Next, we'll show you how to write your own. Later, we'll show you how to import and use functions written by other people.\n\n### Writing Our Own Function\n\nIn the interpreter, write the following code:\n```py\n>>> def myFirstFunction():\n...     print(\"Hello!\")\n```\nWe just wrote our first function! Now call it:\n```py\n>>> myFirstFunction()\n```\nOur function takes no arguments. Let's write a function that passes an argument:\n```py\n>>> def mySecondFunction(name):\n...     print(\"Hello\", name)\n```\nNow let's run it, passing in the name of your choice:\n```py\n>>> mySecondFunction(\"Bill Gates\")\n```\nFantastic! You just authored and called your first function that passed an argument.\n\n### Utility Functions\n\nWe'll gradually expand your knowledge of functions, but for now we'll introduce a few other built-in functions that can help us with numerical types and strings.\n\n#### For Numbers\n\nWe can convert between numerical types with ease.\n\nConvert from float to int:\n```py\n>>> x = 5.5\n>>> x\n>>> type(x)\n>>> x = int(x)\n>>> x\n>>> type(x)\n```\nConvert from int to float:\n```py\n>>> y = 4\n>>> y\n>>> type(y)\n>>> y = float(y)\n>>> y\n>>> type(y)\n```\n#### For Strings\n\n`upper()` and `lower()` are handy:\n```py\n>>> str = \"My String\"\n>>> str.upper()\n>>> str.lower()\n```\n\n## Additional Concepts\n\nLet's briefly introduce some additional concepts and tools that will help you on your journey with Python.\n\n### Tracebacks\n\nWhen you make a mistake and try to run your program, Python will generate a traceback to tell you what went wrong. By now, you may have seen a few of these!\n\nOpen the interpreter and run:\n```py\n>>> a = \"John\"\n>>> a + 2\n```\nWe see the following error:\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: must be str, not int\n```\nThe above traceback tells us the following:\n\n- The name of the file where the error occurred: \"<stdin>\" (means that the error occurred on input)\n- The line number containing the error: 1\n- The name of the module (if applicable, which it's not here)\n- The error type: `TypeError`\n- What we did wrong: We tried to perform an operation on one data type that Python wouldn't allow.\n\nTracebacks are invaluable when trying to diagnose why something won't run.\n\n### Comments\n\nComments help us communicate with teammates about what our functions are doing. We'll use them more when we start running applications in Python files. For now, just know that when you see the following syntax, it's a comment. There's no need to enter the code below, just familiarize yourself with the concepts.\n\nSingle line comment:\n```py\n# Here is a comment in python! It's great and is ignored when the program runs!\nname = \"Your Name\"\nprint(name)\nprint(\"Your Name\")\n```\nThis is an in-line comment:\n```py\nname = \"Your Name\"\nprint(name) # Here is an in-line comment!\nprint(\"Your Name\")\n```\nHere is a multiline comment that uses three apostrophes above and below the comment:\n```py\n'''\nThis is a multiline comment for longer comments that you want to put in your code. Commenting code is important when you're sharing code with multiple people. Because we're using the three apostrophes, we can make this comment as looooooooooong as we want!\n'''\nname = \"Your Name\"\nprint(name)\nprint(\"Your Name\")\n```\n\n# Wrap-up\n\nWe just covered a LOT of material. Remember:\n\n1. We've just barely scratched the surface here. We have have skipped some things. That's ok! This is supposed to be an introduction. Over time, you will fill in the gaps.\n2. If something is unclear, **ask for help**. That's why we're here.\n3. If you don't understand something or feel overwhelmed, **keep at it**. This is just the beginning of a long journey towards learning the ins and outs of Python.\n\n## Additional Resources\n\nThere is no shortage of additional resources on Python. It helps to read multiple articles and tutorials on the core concepts mentioned above, so we encourage you to read and explore the following:\n\n- [Python Guide for Beginners - Non-Programmers](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers)\n- [Python Guide for Beginners - Programmers](https://wiki.python.org/moin/BeginnersGuide/Programmers)\n\n### Coding Exercises\n\n- [Coding Bat](https://www.codingbat.com/python)\n- [Hacker Rank](https://hackerrank.com)\n\n### Other Tools\n\n- [Try Git](https://www.codeschool.com/courses/try-git)\n","source":"onboarding/index.md","raw":"---\ntitle: Redmond Python Meetup Onboarding\ndate: 2018-03-24 13:45:35\n---\n\n## Overview\n\nWelcome!\n\nIf you are reading this page, you have expressed an interest in attending the Redmond Python Meetup. The Redmond Python Meetup is for *everyone*--from new programmers to experienced developers.\n\nThis page will walk you through the following:\n\n- How to install Python on your computer\n- How to use the Python Interpreter to run Python code\n- How to write and manipulate basic Python data types, functions, and loops\n\nAt this point, you probably fall into one of three categories based on your experience level:\n\n|Experience Level|Recommendation\n|:---:|---|\n|\"I'm brand new to development and Python.\"|Come to the meetup for a guided on-boarding session with our TAs where you can complete this page and ask questions as you go. If you're feeling adventurous, you can start with installation below and try to get as far as you can.|\n|\"I'm new to Python but I have some programming experience.\"|Feel free to get as far as you can on this page and come to the meetup with questions, or you can come to the meetup and do an on-boarding session with our TAs.|\n|\"I'm an experience developer\"|Feel free to go through this page on your own and come to the meetup with any questions|\n\n## About Python\n\nPython is an easy-to-write, easy-to-read interpreted scripting language. \"Hello world!\" is one line and looks like this:\n\n```py\n>>> print(\"Hello world!\")\nHello world!\n```\nHere is a more complex example application that sends an email. It's still only 5 lines, though.\n\n```py\nimport smtplib\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.login(\"youremailusername\", \"password\")\nmsg = \"/nHello!\"\nserver.sendmail(\"you@gmail.com\", \"yourFriend@hotmail.com\", msg)\n```\nThe above code does the following:\n\n1. Imports some code in an external module (code that we didn't write, but that are nevertheless using).\n2. Creates an SMTP object to connect to a server.\n3. Logs in to the server.\n4. Creates our message.\n5. Sends the message.\n\nYou don't need to understand this syntax at this time. The purpose of this example is simply to show you what you can accomplish in a few lines of Python code, which may take dozens of lines in other programming languages.\n\n## Basic Python Features\n\nThere are a few characteristics of Python that you should remember:\n\n- **Python is open source**: Anyone can see all of the underlying code and everyone has the chance to contribute to the code base.\n- **Python is object-oriented**: Everything in Python is an object.\n- **Python is platform-independent**: You can write an application on one operating system and run it on another.\n- **Python has a minimalist design philosophy**: This emphasizes cleanliness and readability, with minimal semicolons and brackets.\n\n## What kinds of things can you do with Python?\n\nThe sky is the limit, but here are some examples:\n\n  - Interact with files on your computer\n  - Automate tasks as part of a workflow\n  - Scrape data off a website\n  - Build and deploy REST APIs\n  - Build games\n  - Interact with cloud services (AWS, Azure, Google, etc.)\n\n# Setup\n\n## Installing Python\n\nLet's first get Python installed on your computer. There are two major versions of Python out there in the wild right now: Python 2 and Python 3. Python 2 is retiring in 2020, so we'll be using Python 3.\n\nIn fact, you might already have one of these versions installed on your computer. Let's check:\n\n1. Open a terminal or command prompt.\n    - **WIN**: Start Menu > Command Prompt.\n    - **MAC/LIN**: Application > Terminal.\n2. Type `python` and hit **ENTER**. Do you see something like this? It means you have Python 3 installed on your computer.\n    ```bash\n    Python 3.6.4 (default, Jan  3 2018, 12:27:09)\n    [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>\n    ```\n    If you get an error, you probably need to install Python. Note that you may have Python 2 installed (it will say `Python 2.x.x`), in which case you'll want to install Python 3.\n\nSee the following pages for platform-specific instructions on installing Python:\n\n- [Windows](/setupwindows)\n- [MacOS](/setupmac/)\n- [Linux](/setuplinux/)\n\nWhen you're finished, come back here and continue to the next section.\n\n## Using the Python Interpreter\n\nNow that we have Python installed, let's open the Python interpreter. The interpreter is a small application that let's us type some Python and execute it easily:\n\n1. Open a terminal or command prompt like you did in the previous section.\n2. Type `python` and hit **ENTER**.\n\nYour prompt should look something like the following (if it doesn't, let a TA know):\n```\nPython 3.6.4 (default, Jan  3 2018, 12:27:09)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\nYou'll know you're in the Python interpreter when you see this prompt:\n```\n>>>\n```\nThis means the Python interpreter is ready for your input. We can type Python code directly into this prompt and it will execute. Note that as you go through this on-boarding page, you'll see code samples like this:\n```\n>>> a = \"Hello\"\n```\nThis means that you can type this line in at the `>>>` prompt. Simply enter the line of code, hit **Enter** after every line you enter, and note the output (although sometimes there won't be any!).\n\n**Tip**: Don't copy and paste commands -- type them out. You'll learn far more if you take the time to type everything yourself.\n\nTo exit the interpreter:\n\n1. Type `exit()` or hit `ctrl+d` to exit the Python interpreter and return to the computer's terminal.\n2. Now, reopen the Python interpreter. A key point here is that everything that you entered in that previous Python interpreter session is **lost** between sessions. **The data does NOT persist**.\n\nFor now, we'll just be working with Python via the interpreter while we learn the basics. We'll show you later how to write lines of code in a file and run a full Python script at the command line.\n\n# Getting Started with Python Code\n\n## Basic Operations\n\nLet's do some basic operations in Python to teach you how to interact with the Python interpreter.\n\n1. Open the Python interpreter like we showed you in the previous section.\n2. Type the following lines, noting the output:\n  ```py\n  >>> 2 + 4\n  >>> 5 - 1\n  >>> 3 * 4\n  >>> 10 / 2\n  ```\n  Awesome! This is how easy it is to write and execute Python. This also introduces you to some basic math operations available to you in Python like addition, subtraction, etc. We'll expand on those later.\n\n  Now try these:\n  ```py\n  >>> 2+4\n  >>> 5-1\n  >>> 3*4\n  >>> 10/2\n  ```\n  Same operations as before. Note that the whitespace between values, in this case, doesn't matter. In Python, `2+4` is the same as `2 + 4`.\n\n## Variables\n\nNext, let's introduce variables. Variables are used to store values--numbers, words, lists of numbers and words, etc. This allows us to reference these variables later in our application. Imagine if you were writing an application and wanted to display your company name in 20 different places. Instead of writing your company name out 20 times, you can write it once and store it in a variable, and then reference the variable wherever you need it.\n\n### Storing Numbers\n\nLet's create a few variables that store some simple numbers. We'll use the `=` symbol to store values. This equals sign is formally called the **assignment operator**.\n```py\n>>> x = 4\n>>> y = 2\n>>> print(x + y)\n```\nWhat did we just do?\n\n1. We assigned the number 4 to the variable \"x\" and the number 2 to \"y\".\n2. We then called the \"print\" function to print the sum. `print()` is a built-in function that we can access anywhere, and always prints the contents out to the console.\n\nFor experienced developers, note that we don't have to tell the interpreter that our variables are numbers. We just assign and run. Python will assign the type automatically when we run our program (\"at runtime\").\n\n## Storing Strings\n\nNumbers are great, but let's try entering some strings of text. Go ahead and type the following, replacing the value for the `name` variable with your name below:\n```py\n>>> name = 'Your Name'\n>>> print(name)\n>>> fav_food = \"Pasta\"\n>>> print(fav_food)\n>>> long_multiline_string = \"\"\"When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.\"\"\"\n>>> print(long_multiline_string)\n```\nNotice the use of quotes--single, double, or triple quotes are acceptable in Python. Just be consistent throughout your application! To keep things simple, we'll use double quotes and all of our variables will start with a lowercase letter for now. We'll be expanding on variables and functions later.\n\n>*Remember*: Once you close the interpreter, all of this data is lost.\n\n## Numbers\n\nThere are two number data types in Python 3:\n\n- **integers**: Whole numbers with no decimal point (e.g. 1, 2, -504803, 6238746289374692837649283764829).\n- **floats**: Written with a decimal point dividing the integer and fractional parts (e.g. .5, 842.32, .000238923).\n\nMath in Python looks a lot like math with a calculator. Type the following into the interpreter.\n\n### Addition\n\n```py\n>>> 2 + 2\n>>> 1.65 + 2.15\n>>> 2 + 1.65\n```\n\n### Subtraction\n\n```py\n>>> 12 - 5\n>>> 45.9 - 25.3\n>>> 2 - -4\n```\n\n### Multiplication\n\n```py\n>>> 6 * 7\n>>> 5.6 * 4.3\n>>> 6 * -5\n```\n\n### Division\n\n```py\n>>> 12/3\n>>> 16/5\n>>> 10/-5\n```\n\nIf you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division. Try the following, one with one `/` and the other with two `//`:\n```py\n>>> 16/5\n>>> 16//5\n```\n\n### Modulus\n\nThinking back to long division that you may have learned in school, the modulus is the “remainder” after performing division. It uses the % symbol.\n```py\n>>> 16%5\n>>> 50%4\n```\n\n### Order of Operations\n\nOrder of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.\n```py\n>>> 5 + 4 * 3\n>>> (5 + 4) * 3\n```\n\n> **Note:** We've just covered a lot! Using the interpreter, variables, entering basic data types, doing some basic math....questions? Ask a TA!\n\n## Booleans\n\nSo far, the code we've written has been *unconditional*: no choice is getting made in the program--all of the code runs. Python has another data type called a **boolean** that is helpful when writing code that makes decisions. Booleans hold two values: `True` and `False`.\n\nOpen the Python interpreter and type these:\n```py\n>>> True\n>>> type(True)\n>>> False\n>>> type(False)\n>>> true\n>>> false\n```\n\n### Testing for Equality\n\nYou can use booleans to test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console (note that the double equals tests for equality):\n\n```py\n>>> 0 == 0\n>>> 1 == 0\n>>> 54 = 42\n```\n\nUse `==` to test for equality. Recall that `=` is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: `=` is assignment, `==` is comparison.\n\n### Testing for Inequality\n\nTo test for inequality, use `!=`:\n\n```py\n>>> \"a\" != \"a\"\n>>> \"a\" != \"A\"\n```\nThe above example demonstrates an important point: Python is CASE-SENSITIVE. Uppercase and lowercase matter.\n\n### Comparison Operators\n\nNext, let's look at comparison operators. `<`, `<=`, `>`, and `>=` have the same meaning as in math class. The result of these tests is a boolean:\n\n```py\n>>> 1 > 0\n>>> 2 >= 3\n>>> -1 < 0\n>>> .5 <= 1\n```\n\n### Membership Operators\n\nFinally, let's briefly look at membership operators. You can check for membership using the `in` keyword, which also results in a boolean:\n```py\n>>> \"H\" in \"Hello\"\n>>> \"h\" in \"Hello\"\n>>> x = \"He\"\n>>> x in \"Hello\"\n```\nOr check for a lack of membership with `not in`:\n```py\n>>> \"a\" not in \"abcde\"\n>>> \"Chicago\" not in \"Redmond Python Workshop\"\n```\n\n## Operators\n\nWe just introduced some operators that let us further manipulate our data. We've outlined some (not all) of the Python operators in the following tables:\n\n### Assignment Operators\n\n|Operator|Description|Example|\n|:----:|---|---|\n|`=`|Assigns values from right side operands to left side operand|`c = a + b` assigns value of `a + b` into `c`|\n|`+=` Add AND |Adds right operand to the left operand and assign the result to left operand|`c += a` is equivalent to `c = c + a`|\n|`-=` Subtract AND|Subtracts right operand from the left operand and assign the result to left operand|`c -= a` is equivalent to `c = c - a`|\n|`*=` Multiply AND|Multiplies right operand with the left operand and assign the result to left operand|`c *= a` is equivalent to `c = c * a`|\n|`/=` Divide AND|Divides left operand with the right operand and assign the result to left operand|`c /= a`  is equivalent to `c = c / a`|\n|`%=` Modulus AND|Calculates modulus using two operands and assign the result to left operand|`c %= a` is equivalent to `c = c % a`|\n|`**=` Exponent AND|Performs exponential calculation on operators and assign value to the left operand|`c **= a` is equivalent to `c = c ** a`|\n|`//=` Floor Division|Performs floor division on operators and assign value to the left operand |`c //= a` is equivalent to `c = c // a`|\n\nExercise:\n```py\n>>> a = 21\n>>> b = 10\n>>> c = 0\n>>> c = a + b\n>>> c\n>>> c += a\n>>> c\n>>> c *= a\n>>> c\n>>> c /= a\n>>> c\n>>> c = 2\n>>> c %= a\n>>> c\n>>> c **= a\n>>> c\n>>> c //= a\n>>> c\n```\n\n### Comparison Operators\n\nAssume `a = 5` and `b = 10`.\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`==`|If the values of two operands are equal, then the condition becomes true.|`a == b` evaluates to false.|\n|`!=`|If values of two operands are not equal, then condition becomes true.|`a != b` is true.|\n|`>`|If the value of left operand is greater than the value of right operand, then condition becomes true.|`a > b` is not true.|\n|`<`|If the value of left operand is less than the value of right operand, then condition becomes true.|`a < b` is true.|\n|`>=`|If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.|`a >= b` is not true.|\n|`<=`|If the value of left operand is less than or equal to the value of right operand, then condition becomes true.|`a <= b` is true.|\n\nExercise:\n```py\n>>> a = 5\n>>> b = 10\n>>> a == b\n>>> a != b\n>>> b = 5\n>>> a == b\n>>> a != b\n```\n\n**Key Point**: `=` assigns a value, `==` tests for equality, `!=` tests for inequality.\n\n### Logical Operators\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`and`|If both the operands are true then condition becomes true.|`x>4 and y<5`|\n|`or`|If any of the two operands are non-zero then condition becomes true.|`x>4 or y<5`|\n|`not`|Used to reverse the logical state of its operand.|`not(x and y)`|\n\n### Identity Operators\n\n|Operator|Description|Example|\n|:---:|---|---|\n|`is`|Evaluates to true if the variables on either side of the operator point to the same object.|See below.|\n|`is not`|Evaluates to false if the variables on either side of the operator point to the same object.|See below.|\n\nExercise:\n```py\n>>> a = 1\n>>> b = 1\n>>> a is b\n>>> b = 2\n>>> a is b\n```\n\n## Conditional Branching\n\n### Using `if`\n\nNow that we know how to check if something is `True` or `False` using booleans and operators, we can use \"conditional branching\" to make Python execute commands on a conditional basis. Just take a look at the following code:\n\n```py\nif 6 > 5:\n     print(\"Six is greater than five!\")\n```\n\nThis is the first piece of Python we've written that crosses multiple lines, and the way to enter it at a Python interpreter's prompt is a little different than single lines of code.\n\nIn the interpreter:\n\n1. Type `if 6 > 5:`, and hit `ENTER`. The next line will have `...` as a prompt, instead of the usual `>>>`. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.\n2. Type 4 spaces, type `print(\"Six is greater than five!\")`, and then hit `ENTER` to end the line. Note that spaces are [officially the preferred indentation method](https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces).\n3. Finally, hit `ENTER` again to tell Python you are done with this code block. All together, it will look like this:\n\n```py\n>>> if 6 > 5:\n...      print(\"Six is greater than five!\")\nSix is greater than five!\n```\n\nSo what's going on here? When Python encounters the `if` keyword, it evaluates the expression following the keyword and before the colon.\n\n  - If that expression evaluates to `True`, Python executes the code in the indented code block under the `if` line.\n  - If that expression evaluates to `False`, Python skips over the code block.\n\nIn this case, because \"6 is greater than 5\" evaluates to true, Python executes the code block under the if statement, and we see \"Six is greater than five!\" printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:\n\n```py\n>>> if 0 > 2:\n...     print(\"Zero is greater than two!\")\n```\nAnother:\n```py\n>>> if \"banana\" in \"bananarama\":\n...    print(\"I miss the 80s.\")\n```\nOne more:\n```py\n>>> if \"Ringo\" not in \"John, Paul, and George\":\n...    print(\"Ringo wasn't much of a songwriter.\")\n```\n\n### Using `if` and `else`\n\nYou can use the `else` keyword to execute code only when the `if` expression isn't `True`:\n\n```py\n>>> sister_age = 15\n>>> brother_age = 12\n>>> if sister_age > brother_age:\n...    print(\"sister is older\")\n... else:\n...    print(\"brother is older\")\n```\n\nLike with `if`, the code block under the `else` statement must be indented so Python knows that it is a part of the `else` block.\n\n### Using `and` and `or`\n\nWe've been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the `and` and `or` logical operators.\n\n- If two expressions are joined by an `and`, they **both** have to be `True` for the overall expression to be `True`.\n- If two expressions are joined by an `or`, as long as **at least one** is `True`, the overall expression is `True`.\n\nTry typing these out and see what you get:\n\n```py\n>>> 1 > 0 and 1 < 2\n>>> 1 < 2 and \"x\" in \"abc\"\n>>> \"a\" in \"hello\" or \"e\" in \"hello\"\n>>> 1 <= 0 or \"a\" not in \"abc\"\n```\nGuess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting. Indenting is a crucial part of the syntax of Python.\n\n```py\n>>> temperature = 32\n>>> if temperature > 60 and temperature < 75:\n...    print(\"It's nice and cozy in here!\")\n... else:\n....    print(\"Too extreme for me.\")\n```\nOne more:\n```py\n>>> hour = 11\n>>> if hour < 7 or hour > 23:\n...    print(\"Go away!\")\n...    print(\"I'm sleeping!\")\n... else:\n...    print(\"Welcome to the cheese shop!\")\n...    print(\"Can I interest you in some choice gouda?\")\n```\n\nYou can have as many lines of code as you want in if-else block, just make sure to indent them so Python knows they are a part of the same indentation block.\n\n### Using `elif` and `else`\n\nIf you have more than two cases, you can use the `elif` keyword to check more cases. Think of `elif` as Python-speak for else if. You can have as many `elif` cases as you want. Python will go down the code checking each `elif` until it finds a `True` condition or reaches the default `else` block.\n\n```py\n>>> sister_age = 15\n>>> brother_age = 12\n>>> if sister_age > brother_age:\n...    print(\"sister is older\")\n... elif sister_age == brother_age:\n...    print(\"sister and brother are the same age\")\n... else:\n...    print(\"brother is older\")\n```\n\nYou don't have to have an `else` block if you don't need it. That just means there isn't default code to execute when none of the `if` or `elif`conditions are `True`:\n\n```py\n>>> color = \"orange\"\n... if color == \"green\" or color == \"red\":\n...    print(\"Christmas color!\")\n... elif color == \"black\" or color == \"orange\":\n...    print(\"Halloween color!\")\n... elif color == \"pink\":\n...    print(\"Valentine's Day color!\")\n```\n\nIf `color` had been \"purple\", the code wouldn't have printed anything. Remember that `=` is for assignment and `==` is for comparison.\n\n## Functions\n\nFunctions are how we perform actions on our data. We've been using a function a lot so far: `print()`. Calling a function is as easy as calling the function name and putting a variable or value between round brackets like we've been doing.\n\nTry the following:\n```py\n>>> a = \"The number 3: \"\n>>> b = 3\n>>> type(a)\n>>> type(b)\n>>> print(a, b)\n```\n\nThe values between the `()` brackets are called \"arguments.\" Certain functions let us pass arguments to our functions. like so:\n```py\n>>> str1 = \"Bill is\"\n>>> a = 50\n>>> str2 = \"years old.\"\n>>> print(str1, a, str2)\n```\nThere are three basic categories of functions:\n\n- The built-in kind that come with Python when we install it (e.g.`print()`)\n- The kind we write ourselves\n- The kind that other people wrote that we can borrow (by importing their code modules and using them in our programs)\n\nWe've already introduced the built-in kind. Next, we'll show you how to write your own. Later, we'll show you how to import and use functions written by other people.\n\n### Writing Our Own Function\n\nIn the interpreter, write the following code:\n```py\n>>> def myFirstFunction():\n...     print(\"Hello!\")\n```\nWe just wrote our first function! Now call it:\n```py\n>>> myFirstFunction()\n```\nOur function takes no arguments. Let's write a function that passes an argument:\n```py\n>>> def mySecondFunction(name):\n...     print(\"Hello\", name)\n```\nNow let's run it, passing in the name of your choice:\n```py\n>>> mySecondFunction(\"Bill Gates\")\n```\nFantastic! You just authored and called your first function that passed an argument.\n\n### Utility Functions\n\nWe'll gradually expand your knowledge of functions, but for now we'll introduce a few other built-in functions that can help us with numerical types and strings.\n\n#### For Numbers\n\nWe can convert between numerical types with ease.\n\nConvert from float to int:\n```py\n>>> x = 5.5\n>>> x\n>>> type(x)\n>>> x = int(x)\n>>> x\n>>> type(x)\n```\nConvert from int to float:\n```py\n>>> y = 4\n>>> y\n>>> type(y)\n>>> y = float(y)\n>>> y\n>>> type(y)\n```\n#### For Strings\n\n`upper()` and `lower()` are handy:\n```py\n>>> str = \"My String\"\n>>> str.upper()\n>>> str.lower()\n```\n\n## Additional Concepts\n\nLet's briefly introduce some additional concepts and tools that will help you on your journey with Python.\n\n### Tracebacks\n\nWhen you make a mistake and try to run your program, Python will generate a traceback to tell you what went wrong. By now, you may have seen a few of these!\n\nOpen the interpreter and run:\n```py\n>>> a = \"John\"\n>>> a + 2\n```\nWe see the following error:\n```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: must be str, not int\n```\nThe above traceback tells us the following:\n\n- The name of the file where the error occurred: \"<stdin>\" (means that the error occurred on input)\n- The line number containing the error: 1\n- The name of the module (if applicable, which it's not here)\n- The error type: `TypeError`\n- What we did wrong: We tried to perform an operation on one data type that Python wouldn't allow.\n\nTracebacks are invaluable when trying to diagnose why something won't run.\n\n### Comments\n\nComments help us communicate with teammates about what our functions are doing. We'll use them more when we start running applications in Python files. For now, just know that when you see the following syntax, it's a comment. There's no need to enter the code below, just familiarize yourself with the concepts.\n\nSingle line comment:\n```py\n# Here is a comment in python! It's great and is ignored when the program runs!\nname = \"Your Name\"\nprint(name)\nprint(\"Your Name\")\n```\nThis is an in-line comment:\n```py\nname = \"Your Name\"\nprint(name) # Here is an in-line comment!\nprint(\"Your Name\")\n```\nHere is a multiline comment that uses three apostrophes above and below the comment:\n```py\n'''\nThis is a multiline comment for longer comments that you want to put in your code. Commenting code is important when you're sharing code with multiple people. Because we're using the three apostrophes, we can make this comment as looooooooooong as we want!\n'''\nname = \"Your Name\"\nprint(name)\nprint(\"Your Name\")\n```\n\n# Wrap-up\n\nWe just covered a LOT of material. Remember:\n\n1. We've just barely scratched the surface here. We have have skipped some things. That's ok! This is supposed to be an introduction. Over time, you will fill in the gaps.\n2. If something is unclear, **ask for help**. That's why we're here.\n3. If you don't understand something or feel overwhelmed, **keep at it**. This is just the beginning of a long journey towards learning the ins and outs of Python.\n\n## Additional Resources\n\nThere is no shortage of additional resources on Python. It helps to read multiple articles and tutorials on the core concepts mentioned above, so we encourage you to read and explore the following:\n\n- [Python Guide for Beginners - Non-Programmers](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers)\n- [Python Guide for Beginners - Programmers](https://wiki.python.org/moin/BeginnersGuide/Programmers)\n\n### Coding Exercises\n\n- [Coding Bat](https://www.codingbat.com/python)\n- [Hacker Rank](https://hackerrank.com)\n\n### Other Tools\n\n- [Try Git](https://www.codeschool.com/courses/try-git)\n","updated":"2018-06-01T21:37:57.268Z","path":"onboarding/index.html","comments":1,"layout":"page","_id":"cjhwiurzk000b75j5ek6tqqph","content":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Welcome!</p>\n<p>If you are reading this page, you have expressed an interest in attending the Redmond Python Meetup. The Redmond Python Meetup is for <em>everyone</em>–from new programmers to experienced developers.</p>\n<p>This page will walk you through the following:</p>\n<ul>\n<li>How to install Python on your computer</li>\n<li>How to use the Python Interpreter to run Python code</li>\n<li>How to write and manipulate basic Python data types, functions, and loops</li>\n</ul>\n<p>At this point, you probably fall into one of three categories based on your experience level:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Experience Level</th>\n<th>Recommendation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“I’m brand new to development and Python.”</td>\n<td>Come to the meetup for a guided on-boarding session with our TAs where you can complete this page and ask questions as you go. If you’re feeling adventurous, you can start with installation below and try to get as far as you can.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“I’m new to Python but I have some programming experience.”</td>\n<td>Feel free to get as far as you can on this page and come to the meetup with questions, or you can come to the meetup and do an on-boarding session with our TAs.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“I’m an experience developer”</td>\n<td>Feel free to go through this page on your own and come to the meetup with any questions</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"About-Python\"><a href=\"#About-Python\" class=\"headerlink\" title=\"About Python\"></a>About Python</h2><p>Python is an easy-to-write, easy-to-read interpreted scripting language. “Hello world!” is one line and looks like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">Hello world!</span><br></pre></td></tr></table></figure>\n<p>Here is a more complex example application that sends an email. It’s still only 5 lines, though.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\">server = smtplib.SMTP(<span class=\"string\">\"smtp.gmail.com\"</span>, <span class=\"number\">587</span>)</span><br><span class=\"line\">server.login(<span class=\"string\">\"youremailusername\"</span>, <span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">msg = <span class=\"string\">\"/nHello!\"</span></span><br><span class=\"line\">server.sendmail(<span class=\"string\">\"you@gmail.com\"</span>, <span class=\"string\">\"yourFriend@hotmail.com\"</span>, msg)</span><br></pre></td></tr></table></figure>\n<p>The above code does the following:</p>\n<ol>\n<li>Imports some code in an external module (code that we didn’t write, but that are nevertheless using).</li>\n<li>Creates an SMTP object to connect to a server.</li>\n<li>Logs in to the server.</li>\n<li>Creates our message.</li>\n<li>Sends the message.</li>\n</ol>\n<p>You don’t need to understand this syntax at this time. The purpose of this example is simply to show you what you can accomplish in a few lines of Python code, which may take dozens of lines in other programming languages.</p>\n<h2 id=\"Basic-Python-Features\"><a href=\"#Basic-Python-Features\" class=\"headerlink\" title=\"Basic Python Features\"></a>Basic Python Features</h2><p>There are a few characteristics of Python that you should remember:</p>\n<ul>\n<li><strong>Python is open source</strong>: Anyone can see all of the underlying code and everyone has the chance to contribute to the code base.</li>\n<li><strong>Python is object-oriented</strong>: Everything in Python is an object.</li>\n<li><strong>Python is platform-independent</strong>: You can write an application on one operating system and run it on another.</li>\n<li><strong>Python has a minimalist design philosophy</strong>: This emphasizes cleanliness and readability, with minimal semicolons and brackets.</li>\n</ul>\n<h2 id=\"What-kinds-of-things-can-you-do-with-Python\"><a href=\"#What-kinds-of-things-can-you-do-with-Python\" class=\"headerlink\" title=\"What kinds of things can you do with Python?\"></a>What kinds of things can you do with Python?</h2><p>The sky is the limit, but here are some examples:</p>\n<ul>\n<li>Interact with files on your computer</li>\n<li>Automate tasks as part of a workflow</li>\n<li>Scrape data off a website</li>\n<li>Build and deploy REST APIs</li>\n<li>Build games</li>\n<li>Interact with cloud services (AWS, Azure, Google, etc.)</li>\n</ul>\n<h1 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h1><h2 id=\"Installing-Python\"><a href=\"#Installing-Python\" class=\"headerlink\" title=\"Installing Python\"></a>Installing Python</h2><p>Let’s first get Python installed on your computer. There are two major versions of Python out there in the wild right now: Python 2 and Python 3. Python 2 is retiring in 2020, so we’ll be using Python 3.</p>\n<p>In fact, you might already have one of these versions installed on your computer. Let’s check:</p>\n<ol>\n<li>Open a terminal or command prompt.<ul>\n<li><strong>WIN</strong>: Start Menu &gt; Command Prompt.</li>\n<li><strong>MAC/LIN</strong>: Application &gt; Terminal.</li>\n</ul>\n</li>\n<li><p>Type <code>python</code> and hit <strong>ENTER</strong>. Do you see something like this? It means you have Python 3 installed on your computer.</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (default, Jan  3 2018, 12:27:09)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p> If you get an error, you probably need to install Python. Note that you may have Python 2 installed (it will say <code>Python 2.x.x</code>), in which case you’ll want to install Python 3.</p>\n</li>\n</ol>\n<p>See the following pages for platform-specific instructions on installing Python:</p>\n<ul>\n<li><a href=\"/setupwindows\">Windows</a></li>\n<li><a href=\"/setupmac/\">MacOS</a></li>\n<li><a href=\"/setuplinux/\">Linux</a></li>\n</ul>\n<p>When you’re finished, come back here and continue to the next section.</p>\n<h2 id=\"Using-the-Python-Interpreter\"><a href=\"#Using-the-Python-Interpreter\" class=\"headerlink\" title=\"Using the Python Interpreter\"></a>Using the Python Interpreter</h2><p>Now that we have Python installed, let’s open the Python interpreter. The interpreter is a small application that let’s us type some Python and execute it easily:</p>\n<ol>\n<li>Open a terminal or command prompt like you did in the previous section.</li>\n<li>Type <code>python</code> and hit <strong>ENTER</strong>.</li>\n</ol>\n<p>Your prompt should look something like the following (if it doesn’t, let a TA know):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (default, Jan  3 2018, 12:27:09)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>You’ll know you’re in the Python interpreter when you see this prompt:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>This means the Python interpreter is ready for your input. We can type Python code directly into this prompt and it will execute. Note that as you go through this on-boarding page, you’ll see code samples like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = &quot;Hello&quot;</span><br></pre></td></tr></table></figure></p>\n<p>This means that you can type this line in at the <code>&gt;&gt;&gt;</code> prompt. Simply enter the line of code, hit <strong>Enter</strong> after every line you enter, and note the output (although sometimes there won’t be any!).</p>\n<p><strong>Tip</strong>: Don’t copy and paste commands – type them out. You’ll learn far more if you take the time to type everything yourself.</p>\n<p>To exit the interpreter:</p>\n<ol>\n<li>Type <code>exit()</code> or hit <code>ctrl+d</code> to exit the Python interpreter and return to the computer’s terminal.</li>\n<li>Now, reopen the Python interpreter. A key point here is that everything that you entered in that previous Python interpreter session is <strong>lost</strong> between sessions. <strong>The data does NOT persist</strong>.</li>\n</ol>\n<p>For now, we’ll just be working with Python via the interpreter while we learn the basics. We’ll show you later how to write lines of code in a file and run a full Python script at the command line.</p>\n<h1 id=\"Getting-Started-with-Python-Code\"><a href=\"#Getting-Started-with-Python-Code\" class=\"headerlink\" title=\"Getting Started with Python Code\"></a>Getting Started with Python Code</h1><h2 id=\"Basic-Operations\"><a href=\"#Basic-Operations\" class=\"headerlink\" title=\"Basic Operations\"></a>Basic Operations</h2><p>Let’s do some basic operations in Python to teach you how to interact with the Python interpreter.</p>\n<ol>\n<li>Open the Python interpreter like we showed you in the previous section.</li>\n<li><p>Type the following lines, noting the output:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Awesome! This is how easy it is to write and execute Python. This also introduces you to some basic math operations available to you in Python like addition, subtraction, etc. We’ll expand on those later.</p>\n<p>Now try these:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span>+<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span><span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span>*<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span>/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Same operations as before. Note that the whitespace between values, in this case, doesn’t matter. In Python, <code>2+4</code> is the same as <code>2 + 4</code>.</p>\n</li>\n</ol>\n<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><p>Next, let’s introduce variables. Variables are used to store values–numbers, words, lists of numbers and words, etc. This allows us to reference these variables later in our application. Imagine if you were writing an application and wanted to display your company name in 20 different places. Instead of writing your company name out 20 times, you can write it once and store it in a variable, and then reference the variable wherever you need it.</p>\n<h3 id=\"Storing-Numbers\"><a href=\"#Storing-Numbers\" class=\"headerlink\" title=\"Storing Numbers\"></a>Storing Numbers</h3><p>Let’s create a few variables that store some simple numbers. We’ll use the <code>=</code> symbol to store values. This equals sign is formally called the <strong>assignment operator</strong>.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(x + y)</span><br></pre></td></tr></table></figure></p>\n<p>What did we just do?</p>\n<ol>\n<li>We assigned the number 4 to the variable “x” and the number 2 to “y”.</li>\n<li>We then called the “print” function to print the sum. <code>print()</code> is a built-in function that we can access anywhere, and always prints the contents out to the console.</li>\n</ol>\n<p>For experienced developers, note that we don’t have to tell the interpreter that our variables are numbers. We just assign and run. Python will assign the type automatically when we run our program (“at runtime”).</p>\n<h2 id=\"Storing-Strings\"><a href=\"#Storing-Strings\" class=\"headerlink\" title=\"Storing Strings\"></a>Storing Strings</h2><p>Numbers are great, but let’s try entering some strings of text. Go ahead and type the following, replacing the value for the <code>name</code> variable with your name below:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">'Your Name'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(name)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fav_food = <span class=\"string\">\"Pasta\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fav_food)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_multiline_string = <span class=\"string\">\"\"\"When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(long_multiline_string)</span><br></pre></td></tr></table></figure></p>\n<p>Notice the use of quotes–single, double, or triple quotes are acceptable in Python. Just be consistent throughout your application! To keep things simple, we’ll use double quotes and all of our variables will start with a lowercase letter for now. We’ll be expanding on variables and functions later.</p>\n<blockquote>\n<p><em>Remember</em>: Once you close the interpreter, all of this data is lost.</p>\n</blockquote>\n<h2 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h2><p>There are two number data types in Python 3:</p>\n<ul>\n<li><strong>integers</strong>: Whole numbers with no decimal point (e.g. 1, 2, -504803, 6238746289374692837649283764829).</li>\n<li><strong>floats</strong>: Written with a decimal point dividing the integer and fractional parts (e.g. .5, 842.32, .000238923).</li>\n</ul>\n<p>Math in Python looks a lot like math with a calculator. Type the following into the interpreter.</p>\n<h3 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1.65</span> + <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1.65</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Subtraction\"><a href=\"#Subtraction\" class=\"headerlink\" title=\"Subtraction\"></a>Subtraction</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">12</span> - <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">45.9</span> - <span class=\"number\">25.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> - <span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Multiplication\"><a href=\"#Multiplication\" class=\"headerlink\" title=\"Multiplication\"></a>Multiplication</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> * <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5.6</span> * <span class=\"number\">4.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> * <span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Division\"><a href=\"#Division\" class=\"headerlink\" title=\"Division\"></a>Division</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">12</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span>/<span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<p>If you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division. Try the following, one with one <code>/</code> and the other with two <code>//</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>//<span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Modulus\"><a href=\"#Modulus\" class=\"headerlink\" title=\"Modulus\"></a>Modulus</h3><p>Thinking back to long division that you may have learned in school, the modulus is the “remainder” after performing division. It uses the % symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>%<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">50</span>%<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Order-of-Operations\"><a href=\"#Order-of-Operations\" class=\"headerlink\" title=\"Order of Operations\"></a>Order of Operations</h3><p>Order of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">5</span> + <span class=\"number\">4</span>) * <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>Note:</strong> We’ve just covered a lot! Using the interpreter, variables, entering basic data types, doing some basic math….questions? Ask a TA!</p>\n</blockquote>\n<h2 id=\"Booleans\"><a href=\"#Booleans\" class=\"headerlink\" title=\"Booleans\"></a>Booleans</h2><p>So far, the code we’ve written has been <em>unconditional</em>: no choice is getting made in the program–all of the code runs. Python has another data type called a <strong>boolean</strong> that is helpful when writing code that makes decisions. Booleans hold two values: <code>True</code> and <code>False</code>.</p>\n<p>Open the Python interpreter and type these:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>true</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Testing-for-Equality\"><a href=\"#Testing-for-Equality\" class=\"headerlink\" title=\"Testing for Equality\"></a>Testing for Equality</h3><p>You can use booleans to test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console (note that the double equals tests for equality):</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">54</span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<p>Use <code>==</code> to test for equality. Recall that <code>=</code> is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: <code>=</code> is assignment, <code>==</code> is comparison.</p>\n<h3 id=\"Testing-for-Inequality\"><a href=\"#Testing-for-Inequality\" class=\"headerlink\" title=\"Testing for Inequality\"></a>Testing for Inequality</h3><p>To test for inequality, use <code>!=</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> != <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> != <span class=\"string\">\"A\"</span></span><br></pre></td></tr></table></figure>\n<p>The above example demonstrates an important point: Python is CASE-SENSITIVE. Uppercase and lowercase matter.</p>\n<h3 id=\"Comparison-Operators\"><a href=\"#Comparison-Operators\" class=\"headerlink\" title=\"Comparison Operators\"></a>Comparison Operators</h3><p>Next, let’s look at comparison operators. <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> have the same meaning as in math class. The result of these tests is a boolean:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> &gt;= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">-1</span> &lt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">.5</span> &lt;= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Membership-Operators\"><a href=\"#Membership-Operators\" class=\"headerlink\" title=\"Membership Operators\"></a>Membership Operators</h3><p>Finally, let’s briefly look at membership operators. You can check for membership using the <code>in</code> keyword, which also results in a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"H\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"h\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"string\">\"He\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or check for a lack of membership with <code>not in</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abcde\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"Chicago\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Redmond Python Workshop\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p>We just introduced some operators that let us further manipulate our data. We’ve outlined some (not all) of the Python operators in the following tables:</p>\n<h3 id=\"Assignment-Operators\"><a href=\"#Assignment-Operators\" class=\"headerlink\" title=\"Assignment Operators\"></a>Assignment Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td>Assigns values from right side operands to left side operand</td>\n<td><code>c = a + b</code> assigns value of <code>a + b</code> into <code>c</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+=</code> Add AND</td>\n<td>Adds right operand to the left operand and assign the result to left operand</td>\n<td><code>c += a</code> is equivalent to <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-=</code> Subtract AND</td>\n<td>Subtracts right operand from the left operand and assign the result to left operand</td>\n<td><code>c -= a</code> is equivalent to <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*=</code> Multiply AND</td>\n<td>Multiplies right operand with the left operand and assign the result to left operand</td>\n<td><code>c *= a</code> is equivalent to <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>/=</code> Divide AND</td>\n<td>Divides left operand with the right operand and assign the result to left operand</td>\n<td><code>c /= a</code>  is equivalent to <code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>%=</code> Modulus AND</td>\n<td>Calculates modulus using two operands and assign the result to left operand</td>\n<td><code>c %= a</code> is equivalent to <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>**=</code> Exponent AND</td>\n<td>Performs exponential calculation on operators and assign value to the left operand</td>\n<td><code>c **= a</code> is equivalent to <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>//=</code> Floor Division</td>\n<td>Performs floor division on operators and assign value to the left operand</td>\n<td><code>c //= a</code> is equivalent to <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = a + b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c += a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c *= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c /= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c %= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c **= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c //= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Comparison-Operators-1\"><a href=\"#Comparison-Operators-1\" class=\"headerlink\" title=\"Comparison Operators\"></a>Comparison Operators</h3><p>Assume <code>a = 5</code> and <code>b = 10</code>.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>==</code></td>\n<td>If the values of two operands are equal, then the condition becomes true.</td>\n<td><code>a == b</code> evaluates to false.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td>If values of two operands are not equal, then condition becomes true.</td>\n<td><code>a != b</code> is true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;</code></td>\n<td>If the value of left operand is greater than the value of right operand, then condition becomes true.</td>\n<td><code>a &gt; b</code> is not true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;</code></td>\n<td>If the value of left operand is less than the value of right operand, then condition becomes true.</td>\n<td><code>a &lt; b</code> is true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code></td>\n<td>If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.</td>\n<td><code>a &gt;= b</code> is not true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;=</code></td>\n<td>If the value of left operand is less than or equal to the value of right operand, then condition becomes true.</td>\n<td><code>a &lt;= b</code> is true.</td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a != b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a != b</span><br></pre></td></tr></table></figure></p>\n<p><strong>Key Point</strong>: <code>=</code> assigns a value, <code>==</code> tests for equality, <code>!=</code> tests for inequality.</p>\n<h3 id=\"Logical-Operators\"><a href=\"#Logical-Operators\" class=\"headerlink\" title=\"Logical Operators\"></a>Logical Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>and</code></td>\n<td>If both the operands are true then condition becomes true.</td>\n<td><code>x&gt;4 and y&lt;5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>or</code></td>\n<td>If any of the two operands are non-zero then condition becomes true.</td>\n<td><code>x&gt;4 or y&lt;5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not</code></td>\n<td>Used to reverse the logical state of its operand.</td>\n<td><code>not(x and y)</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Identity-Operators\"><a href=\"#Identity-Operators\" class=\"headerlink\" title=\"Identity Operators\"></a>Identity Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>is</code></td>\n<td>Evaluates to true if the variables on either side of the operator point to the same object.</td>\n<td>See below.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is not</code></td>\n<td>Evaluates to false if the variables on either side of the operator point to the same object.</td>\n<td>See below.</td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conditional-Branching\"><a href=\"#Conditional-Branching\" class=\"headerlink\" title=\"Conditional Branching\"></a>Conditional Branching</h2><h3 id=\"Using-if\"><a href=\"#Using-if\" class=\"headerlink\" title=\"Using if\"></a>Using <code>if</code></h3><p>Now that we know how to check if something is <code>True</code> or <code>False</code> using booleans and operators, we can use “conditional branching” to make Python execute commands on a conditional basis. Just take a look at the following code:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>This is the first piece of Python we’ve written that crosses multiple lines, and the way to enter it at a Python interpreter’s prompt is a little different than single lines of code.</p>\n<p>In the interpreter:</p>\n<ol>\n<li>Type <code>if 6 &gt; 5:</code>, and hit <code>ENTER</code>. The next line will have <code>...</code> as a prompt, instead of the usual <code>&gt;&gt;&gt;</code>. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.</li>\n<li>Type 4 spaces, type <code>print(&quot;Six is greater than five!&quot;)</code>, and then hit <code>ENTER</code> to end the line. Note that spaces are <a href=\"https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces\" target=\"_blank\" rel=\"noopener\">officially the preferred indentation method</a>.</li>\n<li>Finally, hit <code>ENTER</code> again to tell Python you are done with this code block. All together, it will look like this:</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br><span class=\"line\">Six <span class=\"keyword\">is</span> greater than five!</span><br></pre></td></tr></table></figure>\n<p>So what’s going on here? When Python encounters the <code>if</code> keyword, it evaluates the expression following the keyword and before the colon.</p>\n<ul>\n<li>If that expression evaluates to <code>True</code>, Python executes the code in the indented code block under the <code>if</code> line.</li>\n<li>If that expression evaluates to <code>False</code>, Python skips over the code block.</li>\n</ul>\n<p>In this case, because “6 is greater than 5” evaluates to true, Python executes the code block under the if statement, and we see “Six is greater than five!” printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">0</span> &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Zero is greater than two!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Another:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"string\">\"banana\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"bananarama\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"I miss the 80s.\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>One more:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"string\">\"Ringo\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"John, Paul, and George\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Ringo wasn't much of a songwriter.\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Using-if-and-else\"><a href=\"#Using-if-and-else\" class=\"headerlink\" title=\"Using if and else\"></a>Using <code>if</code> and <code>else</code></h3><p>You can use the <code>else</code> keyword to execute code only when the <code>if</code> expression isn’t <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sister_age = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Like with <code>if</code>, the code block under the <code>else</code> statement must be indented so Python knows that it is a part of the <code>else</code> block.</p>\n<h3 id=\"Using-and-and-or\"><a href=\"#Using-and-and-or\" class=\"headerlink\" title=\"Using and and or\"></a>Using <code>and</code> and <code>or</code></h3><p>We’ve been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the <code>and</code> and <code>or</code> logical operators.</p>\n<ul>\n<li>If two expressions are joined by an <code>and</code>, they <strong>both</strong> have to be <code>True</code> for the overall expression to be <code>True</code>.</li>\n<li>If two expressions are joined by an <code>or</code>, as long as <strong>at least one</strong> is <code>True</code>, the overall expression is <code>True</code>.</li>\n</ul>\n<p>Try typing these out and see what you get:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"e\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &lt;= <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure>\n<p>Guess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting. Indenting is a crucial part of the syntax of Python.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>temperature = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> temperature &lt; <span class=\"number\">75</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"It's nice and cozy in here!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\">....    print(<span class=\"string\">\"Too extreme for me.\"</span>)</span><br></pre></td></tr></table></figure>\n<p>One more:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hour = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> hour &lt; <span class=\"number\">7</span> <span class=\"keyword\">or</span> hour &gt; <span class=\"number\">23</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Go away!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"I'm sleeping!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Welcome to the cheese shop!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Can I interest you in some choice gouda?\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>You can have as many lines of code as you want in if-else block, just make sure to indent them so Python knows they are a part of the same indentation block.</p>\n<h3 id=\"Using-elif-and-else\"><a href=\"#Using-elif-and-else\" class=\"headerlink\" title=\"Using elif and else\"></a>Using <code>elif</code> and <code>else</code></h3><p>If you have more than two cases, you can use the <code>elif</code> keyword to check more cases. Think of <code>elif</code> as Python-speak for else if. You can have as many <code>elif</code> cases as you want. Python will go down the code checking each <code>elif</code> until it finds a <code>True</code> condition or reaches the default <code>else</code> block.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sister_age = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> sister_age == brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister and brother are the same age\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You don’t have to have an <code>else</code> block if you don’t need it. That just means there isn’t default code to execute when none of the <code>if</code> or <code>elif</code>conditions are <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>color = <span class=\"string\">\"orange\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">if</span> color == <span class=\"string\">\"green\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Christmas color!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> color == <span class=\"string\">\"black\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"orange\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Halloween color!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> color == <span class=\"string\">\"pink\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Valentine's Day color!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>If <code>color</code> had been “purple”, the code wouldn’t have printed anything. Remember that <code>=</code> is for assignment and <code>==</code> is for comparison.</p>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><p>Functions are how we perform actions on our data. We’ve been using a function a lot so far: <code>print()</code>. Calling a function is as easy as calling the function name and putting a variable or value between round brackets like we’ve been doing.</p>\n<p>Try the following:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"The number 3: \"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a, b)</span><br></pre></td></tr></table></figure></p>\n<p>The values between the <code>()</code> brackets are called “arguments.” Certain functions let us pass arguments to our functions. like so:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"Bill is\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"years old.\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1, a, str2)</span><br></pre></td></tr></table></figure></p>\n<p>There are three basic categories of functions:</p>\n<ul>\n<li>The built-in kind that come with Python when we install it (e.g.<code>print()</code>)</li>\n<li>The kind we write ourselves</li>\n<li>The kind that other people wrote that we can borrow (by importing their code modules and using them in our programs)</li>\n</ul>\n<p>We’ve already introduced the built-in kind. Next, we’ll show you how to write your own. Later, we’ll show you how to import and use functions written by other people.</p>\n<h3 id=\"Writing-Our-Own-Function\"><a href=\"#Writing-Our-Own-Function\" class=\"headerlink\" title=\"Writing Our Own Function\"></a>Writing Our Own Function</h3><p>In the interpreter, write the following code:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFirstFunction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Hello!\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>We just wrote our first function! Now call it:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myFirstFunction()</span><br></pre></td></tr></table></figure></p>\n<p>Our function takes no arguments. Let’s write a function that passes an argument:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mySecondFunction</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Hello\"</span>, name)</span><br></pre></td></tr></table></figure></p>\n<p>Now let’s run it, passing in the name of your choice:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mySecondFunction(<span class=\"string\">\"Bill Gates\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Fantastic! You just authored and called your first function that passed an argument.</p>\n<h3 id=\"Utility-Functions\"><a href=\"#Utility-Functions\" class=\"headerlink\" title=\"Utility Functions\"></a>Utility Functions</h3><p>We’ll gradually expand your knowledge of functions, but for now we’ll introduce a few other built-in functions that can help us with numerical types and strings.</p>\n<h4 id=\"For-Numbers\"><a href=\"#For-Numbers\" class=\"headerlink\" title=\"For Numbers\"></a>For Numbers</h4><p>We can convert between numerical types with ease.</p>\n<p>Convert from float to int:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">5.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = int(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(x)</span><br></pre></td></tr></table></figure></p>\n<p>Convert from int to float:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = float(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(y)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"For-Strings\"><a href=\"#For-Strings\" class=\"headerlink\" title=\"For Strings\"></a>For Strings</h4><p><code>upper()</code> and <code>lower()</code> are handy:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"My String\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.upper()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.lower()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Additional-Concepts\"><a href=\"#Additional-Concepts\" class=\"headerlink\" title=\"Additional Concepts\"></a>Additional Concepts</h2><p>Let’s briefly introduce some additional concepts and tools that will help you on your journey with Python.</p>\n<h3 id=\"Tracebacks\"><a href=\"#Tracebacks\" class=\"headerlink\" title=\"Tracebacks\"></a>Tracebacks</h3><p>When you make a mistake and try to run your program, Python will generate a traceback to tell you what went wrong. By now, you may have seen a few of these!</p>\n<p>Open the interpreter and run:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"John\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>We see the following error:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: must be str, <span class=\"keyword\">not</span> int</span><br></pre></td></tr></table></figure></p>\n<p>The above traceback tells us the following:</p>\n<ul>\n<li>The name of the file where the error occurred: “<stdin>“ (means that the error occurred on input)</stdin></li>\n<li>The line number containing the error: 1</li>\n<li>The name of the module (if applicable, which it’s not here)</li>\n<li>The error type: <code>TypeError</code></li>\n<li>What we did wrong: We tried to perform an operation on one data type that Python wouldn’t allow.</li>\n</ul>\n<p>Tracebacks are invaluable when trying to diagnose why something won’t run.</p>\n<h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3><p>Comments help us communicate with teammates about what our functions are doing. We’ll use them more when we start running applications in Python files. For now, just know that when you see the following syntax, it’s a comment. There’s no need to enter the code below, just familiarize yourself with the concepts.</p>\n<p>Single line comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Here is a comment in python! It's great and is ignored when the program runs!</span></span><br><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name)</span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>This is an in-line comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name) <span class=\"comment\"># Here is an in-line comment!</span></span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Here is a multiline comment that uses three apostrophes above and below the comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">This is a multiline comment for longer comments that you want to put in your code. Commenting code is important when you're sharing code with multiple people. Because we're using the three apostrophes, we can make this comment as looooooooooong as we want!</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name)</span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap-up\"></a>Wrap-up</h1><p>We just covered a LOT of material. Remember:</p>\n<ol>\n<li>We’ve just barely scratched the surface here. We have have skipped some things. That’s ok! This is supposed to be an introduction. Over time, you will fill in the gaps.</li>\n<li>If something is unclear, <strong>ask for help</strong>. That’s why we’re here.</li>\n<li>If you don’t understand something or feel overwhelmed, <strong>keep at it</strong>. This is just the beginning of a long journey towards learning the ins and outs of Python.</li>\n</ol>\n<h2 id=\"Additional-Resources\"><a href=\"#Additional-Resources\" class=\"headerlink\" title=\"Additional Resources\"></a>Additional Resources</h2><p>There is no shortage of additional resources on Python. It helps to read multiple articles and tutorials on the core concepts mentioned above, so we encourage you to read and explore the following:</p>\n<ul>\n<li><a href=\"https://wiki.python.org/moin/BeginnersGuide/NonProgrammers\" target=\"_blank\" rel=\"noopener\">Python Guide for Beginners - Non-Programmers</a></li>\n<li><a href=\"https://wiki.python.org/moin/BeginnersGuide/Programmers\" target=\"_blank\" rel=\"noopener\">Python Guide for Beginners - Programmers</a></li>\n</ul>\n<h3 id=\"Coding-Exercises\"><a href=\"#Coding-Exercises\" class=\"headerlink\" title=\"Coding Exercises\"></a>Coding Exercises</h3><ul>\n<li><a href=\"https://www.codingbat.com/python\" target=\"_blank\" rel=\"noopener\">Coding Bat</a></li>\n<li><a href=\"https://hackerrank.com\" target=\"_blank\" rel=\"noopener\">Hacker Rank</a></li>\n</ul>\n<h3 id=\"Other-Tools\"><a href=\"#Other-Tools\" class=\"headerlink\" title=\"Other Tools\"></a>Other Tools</h3><ul>\n<li><a href=\"https://www.codeschool.com/courses/try-git\" target=\"_blank\" rel=\"noopener\">Try Git</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Welcome!</p>\n<p>If you are reading this page, you have expressed an interest in attending the Redmond Python Meetup. The Redmond Python Meetup is for <em>everyone</em>–from new programmers to experienced developers.</p>\n<p>This page will walk you through the following:</p>\n<ul>\n<li>How to install Python on your computer</li>\n<li>How to use the Python Interpreter to run Python code</li>\n<li>How to write and manipulate basic Python data types, functions, and loops</li>\n</ul>\n<p>At this point, you probably fall into one of three categories based on your experience level:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Experience Level</th>\n<th>Recommendation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“I’m brand new to development and Python.”</td>\n<td>Come to the meetup for a guided on-boarding session with our TAs where you can complete this page and ask questions as you go. If you’re feeling adventurous, you can start with installation below and try to get as far as you can.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“I’m new to Python but I have some programming experience.”</td>\n<td>Feel free to get as far as you can on this page and come to the meetup with questions, or you can come to the meetup and do an on-boarding session with our TAs.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“I’m an experience developer”</td>\n<td>Feel free to go through this page on your own and come to the meetup with any questions</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"About-Python\"><a href=\"#About-Python\" class=\"headerlink\" title=\"About Python\"></a>About Python</h2><p>Python is an easy-to-write, easy-to-read interpreted scripting language. “Hello world!” is one line and looks like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">Hello world!</span><br></pre></td></tr></table></figure>\n<p>Here is a more complex example application that sends an email. It’s still only 5 lines, though.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\">server = smtplib.SMTP(<span class=\"string\">\"smtp.gmail.com\"</span>, <span class=\"number\">587</span>)</span><br><span class=\"line\">server.login(<span class=\"string\">\"youremailusername\"</span>, <span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">msg = <span class=\"string\">\"/nHello!\"</span></span><br><span class=\"line\">server.sendmail(<span class=\"string\">\"you@gmail.com\"</span>, <span class=\"string\">\"yourFriend@hotmail.com\"</span>, msg)</span><br></pre></td></tr></table></figure>\n<p>The above code does the following:</p>\n<ol>\n<li>Imports some code in an external module (code that we didn’t write, but that are nevertheless using).</li>\n<li>Creates an SMTP object to connect to a server.</li>\n<li>Logs in to the server.</li>\n<li>Creates our message.</li>\n<li>Sends the message.</li>\n</ol>\n<p>You don’t need to understand this syntax at this time. The purpose of this example is simply to show you what you can accomplish in a few lines of Python code, which may take dozens of lines in other programming languages.</p>\n<h2 id=\"Basic-Python-Features\"><a href=\"#Basic-Python-Features\" class=\"headerlink\" title=\"Basic Python Features\"></a>Basic Python Features</h2><p>There are a few characteristics of Python that you should remember:</p>\n<ul>\n<li><strong>Python is open source</strong>: Anyone can see all of the underlying code and everyone has the chance to contribute to the code base.</li>\n<li><strong>Python is object-oriented</strong>: Everything in Python is an object.</li>\n<li><strong>Python is platform-independent</strong>: You can write an application on one operating system and run it on another.</li>\n<li><strong>Python has a minimalist design philosophy</strong>: This emphasizes cleanliness and readability, with minimal semicolons and brackets.</li>\n</ul>\n<h2 id=\"What-kinds-of-things-can-you-do-with-Python\"><a href=\"#What-kinds-of-things-can-you-do-with-Python\" class=\"headerlink\" title=\"What kinds of things can you do with Python?\"></a>What kinds of things can you do with Python?</h2><p>The sky is the limit, but here are some examples:</p>\n<ul>\n<li>Interact with files on your computer</li>\n<li>Automate tasks as part of a workflow</li>\n<li>Scrape data off a website</li>\n<li>Build and deploy REST APIs</li>\n<li>Build games</li>\n<li>Interact with cloud services (AWS, Azure, Google, etc.)</li>\n</ul>\n<h1 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h1><h2 id=\"Installing-Python\"><a href=\"#Installing-Python\" class=\"headerlink\" title=\"Installing Python\"></a>Installing Python</h2><p>Let’s first get Python installed on your computer. There are two major versions of Python out there in the wild right now: Python 2 and Python 3. Python 2 is retiring in 2020, so we’ll be using Python 3.</p>\n<p>In fact, you might already have one of these versions installed on your computer. Let’s check:</p>\n<ol>\n<li>Open a terminal or command prompt.<ul>\n<li><strong>WIN</strong>: Start Menu &gt; Command Prompt.</li>\n<li><strong>MAC/LIN</strong>: Application &gt; Terminal.</li>\n</ul>\n</li>\n<li><p>Type <code>python</code> and hit <strong>ENTER</strong>. Do you see something like this? It means you have Python 3 installed on your computer.</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (default, Jan  3 2018, 12:27:09)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span>, <span class=\"string\">\"copyright\"</span>, <span class=\"string\">\"credits\"</span> or <span class=\"string\">\"license\"</span> <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p> If you get an error, you probably need to install Python. Note that you may have Python 2 installed (it will say <code>Python 2.x.x</code>), in which case you’ll want to install Python 3.</p>\n</li>\n</ol>\n<p>See the following pages for platform-specific instructions on installing Python:</p>\n<ul>\n<li><a href=\"/setupwindows\">Windows</a></li>\n<li><a href=\"/setupmac/\">MacOS</a></li>\n<li><a href=\"/setuplinux/\">Linux</a></li>\n</ul>\n<p>When you’re finished, come back here and continue to the next section.</p>\n<h2 id=\"Using-the-Python-Interpreter\"><a href=\"#Using-the-Python-Interpreter\" class=\"headerlink\" title=\"Using the Python Interpreter\"></a>Using the Python Interpreter</h2><p>Now that we have Python installed, let’s open the Python interpreter. The interpreter is a small application that let’s us type some Python and execute it easily:</p>\n<ol>\n<li>Open a terminal or command prompt like you did in the previous section.</li>\n<li>Type <code>python</code> and hit <strong>ENTER</strong>.</li>\n</ol>\n<p>Your prompt should look something like the following (if it doesn’t, let a TA know):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.4 (default, Jan  3 2018, 12:27:09)</span><br><span class=\"line\">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>You’ll know you’re in the Python interpreter when you see this prompt:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>This means the Python interpreter is ready for your input. We can type Python code directly into this prompt and it will execute. Note that as you go through this on-boarding page, you’ll see code samples like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = &quot;Hello&quot;</span><br></pre></td></tr></table></figure></p>\n<p>This means that you can type this line in at the <code>&gt;&gt;&gt;</code> prompt. Simply enter the line of code, hit <strong>Enter</strong> after every line you enter, and note the output (although sometimes there won’t be any!).</p>\n<p><strong>Tip</strong>: Don’t copy and paste commands – type them out. You’ll learn far more if you take the time to type everything yourself.</p>\n<p>To exit the interpreter:</p>\n<ol>\n<li>Type <code>exit()</code> or hit <code>ctrl+d</code> to exit the Python interpreter and return to the computer’s terminal.</li>\n<li>Now, reopen the Python interpreter. A key point here is that everything that you entered in that previous Python interpreter session is <strong>lost</strong> between sessions. <strong>The data does NOT persist</strong>.</li>\n</ol>\n<p>For now, we’ll just be working with Python via the interpreter while we learn the basics. We’ll show you later how to write lines of code in a file and run a full Python script at the command line.</p>\n<h1 id=\"Getting-Started-with-Python-Code\"><a href=\"#Getting-Started-with-Python-Code\" class=\"headerlink\" title=\"Getting Started with Python Code\"></a>Getting Started with Python Code</h1><h2 id=\"Basic-Operations\"><a href=\"#Basic-Operations\" class=\"headerlink\" title=\"Basic Operations\"></a>Basic Operations</h2><p>Let’s do some basic operations in Python to teach you how to interact with the Python interpreter.</p>\n<ol>\n<li>Open the Python interpreter like we showed you in the previous section.</li>\n<li><p>Type the following lines, noting the output:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> - <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> * <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> / <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Awesome! This is how easy it is to write and execute Python. This also introduces you to some basic math operations available to you in Python like addition, subtraction, etc. We’ll expand on those later.</p>\n<p>Now try these:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span>+<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span><span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span>*<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span>/<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Same operations as before. Note that the whitespace between values, in this case, doesn’t matter. In Python, <code>2+4</code> is the same as <code>2 + 4</code>.</p>\n</li>\n</ol>\n<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><p>Next, let’s introduce variables. Variables are used to store values–numbers, words, lists of numbers and words, etc. This allows us to reference these variables later in our application. Imagine if you were writing an application and wanted to display your company name in 20 different places. Instead of writing your company name out 20 times, you can write it once and store it in a variable, and then reference the variable wherever you need it.</p>\n<h3 id=\"Storing-Numbers\"><a href=\"#Storing-Numbers\" class=\"headerlink\" title=\"Storing Numbers\"></a>Storing Numbers</h3><p>Let’s create a few variables that store some simple numbers. We’ll use the <code>=</code> symbol to store values. This equals sign is formally called the <strong>assignment operator</strong>.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(x + y)</span><br></pre></td></tr></table></figure></p>\n<p>What did we just do?</p>\n<ol>\n<li>We assigned the number 4 to the variable “x” and the number 2 to “y”.</li>\n<li>We then called the “print” function to print the sum. <code>print()</code> is a built-in function that we can access anywhere, and always prints the contents out to the console.</li>\n</ol>\n<p>For experienced developers, note that we don’t have to tell the interpreter that our variables are numbers. We just assign and run. Python will assign the type automatically when we run our program (“at runtime”).</p>\n<h2 id=\"Storing-Strings\"><a href=\"#Storing-Strings\" class=\"headerlink\" title=\"Storing Strings\"></a>Storing Strings</h2><p>Numbers are great, but let’s try entering some strings of text. Go ahead and type the following, replacing the value for the <code>name</code> variable with your name below:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">'Your Name'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(name)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fav_food = <span class=\"string\">\"Pasta\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(fav_food)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_multiline_string = <span class=\"string\">\"\"\"When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(long_multiline_string)</span><br></pre></td></tr></table></figure></p>\n<p>Notice the use of quotes–single, double, or triple quotes are acceptable in Python. Just be consistent throughout your application! To keep things simple, we’ll use double quotes and all of our variables will start with a lowercase letter for now. We’ll be expanding on variables and functions later.</p>\n<blockquote>\n<p><em>Remember</em>: Once you close the interpreter, all of this data is lost.</p>\n</blockquote>\n<h2 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h2><p>There are two number data types in Python 3:</p>\n<ul>\n<li><strong>integers</strong>: Whole numbers with no decimal point (e.g. 1, 2, -504803, 6238746289374692837649283764829).</li>\n<li><strong>floats</strong>: Written with a decimal point dividing the integer and fractional parts (e.g. .5, 842.32, .000238923).</li>\n</ul>\n<p>Math in Python looks a lot like math with a calculator. Type the following into the interpreter.</p>\n<h3 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1.65</span> + <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1.65</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Subtraction\"><a href=\"#Subtraction\" class=\"headerlink\" title=\"Subtraction\"></a>Subtraction</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">12</span> - <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">45.9</span> - <span class=\"number\">25.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> - <span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Multiplication\"><a href=\"#Multiplication\" class=\"headerlink\" title=\"Multiplication\"></a>Multiplication</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> * <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5.6</span> * <span class=\"number\">4.3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">6</span> * <span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Division\"><a href=\"#Division\" class=\"headerlink\" title=\"Division\"></a>Division</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">12</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span>/<span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<p>If you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division. Try the following, one with one <code>/</code> and the other with two <code>//</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>//<span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Modulus\"><a href=\"#Modulus\" class=\"headerlink\" title=\"Modulus\"></a>Modulus</h3><p>Thinking back to long division that you may have learned in school, the modulus is the “remainder” after performing division. It uses the % symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">16</span>%<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">50</span>%<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Order-of-Operations\"><a href=\"#Order-of-Operations\" class=\"headerlink\" title=\"Order of Operations\"></a>Order of Operations</h3><p>Order of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> + <span class=\"number\">4</span> * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">5</span> + <span class=\"number\">4</span>) * <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>Note:</strong> We’ve just covered a lot! Using the interpreter, variables, entering basic data types, doing some basic math….questions? Ask a TA!</p>\n</blockquote>\n<h2 id=\"Booleans\"><a href=\"#Booleans\" class=\"headerlink\" title=\"Booleans\"></a>Booleans</h2><p>So far, the code we’ve written has been <em>unconditional</em>: no choice is getting made in the program–all of the code runs. Python has another data type called a <strong>boolean</strong> that is helpful when writing code that makes decisions. Booleans hold two values: <code>True</code> and <code>False</code>.</p>\n<p>Open the Python interpreter and type these:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>true</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Testing-for-Equality\"><a href=\"#Testing-for-Equality\" class=\"headerlink\" title=\"Testing for Equality\"></a>Testing for Equality</h3><p>You can use booleans to test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console (note that the double equals tests for equality):</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">54</span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<p>Use <code>==</code> to test for equality. Recall that <code>=</code> is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: <code>=</code> is assignment, <code>==</code> is comparison.</p>\n<h3 id=\"Testing-for-Inequality\"><a href=\"#Testing-for-Inequality\" class=\"headerlink\" title=\"Testing for Inequality\"></a>Testing for Inequality</h3><p>To test for inequality, use <code>!=</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> != <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> != <span class=\"string\">\"A\"</span></span><br></pre></td></tr></table></figure>\n<p>The above example demonstrates an important point: Python is CASE-SENSITIVE. Uppercase and lowercase matter.</p>\n<h3 id=\"Comparison-Operators\"><a href=\"#Comparison-Operators\" class=\"headerlink\" title=\"Comparison Operators\"></a>Comparison Operators</h3><p>Next, let’s look at comparison operators. <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> have the same meaning as in math class. The result of these tests is a boolean:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> &gt;= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">-1</span> &lt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">.5</span> &lt;= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Membership-Operators\"><a href=\"#Membership-Operators\" class=\"headerlink\" title=\"Membership Operators\"></a>Membership Operators</h3><p>Finally, let’s briefly look at membership operators. You can check for membership using the <code>in</code> keyword, which also results in a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"H\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"h\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"string\">\"He\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or check for a lack of membership with <code>not in</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abcde\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"Chicago\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Redmond Python Workshop\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p>We just introduced some operators that let us further manipulate our data. We’ve outlined some (not all) of the Python operators in the following tables:</p>\n<h3 id=\"Assignment-Operators\"><a href=\"#Assignment-Operators\" class=\"headerlink\" title=\"Assignment Operators\"></a>Assignment Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td>Assigns values from right side operands to left side operand</td>\n<td><code>c = a + b</code> assigns value of <code>a + b</code> into <code>c</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+=</code> Add AND</td>\n<td>Adds right operand to the left operand and assign the result to left operand</td>\n<td><code>c += a</code> is equivalent to <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-=</code> Subtract AND</td>\n<td>Subtracts right operand from the left operand and assign the result to left operand</td>\n<td><code>c -= a</code> is equivalent to <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*=</code> Multiply AND</td>\n<td>Multiplies right operand with the left operand and assign the result to left operand</td>\n<td><code>c *= a</code> is equivalent to <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>/=</code> Divide AND</td>\n<td>Divides left operand with the right operand and assign the result to left operand</td>\n<td><code>c /= a</code>  is equivalent to <code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>%=</code> Modulus AND</td>\n<td>Calculates modulus using two operands and assign the result to left operand</td>\n<td><code>c %= a</code> is equivalent to <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>**=</code> Exponent AND</td>\n<td>Performs exponential calculation on operators and assign value to the left operand</td>\n<td><code>c **= a</code> is equivalent to <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>//=</code> Floor Division</td>\n<td>Performs floor division on operators and assign value to the left operand</td>\n<td><code>c //= a</code> is equivalent to <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = a + b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c += a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c *= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c /= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c %= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c **= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c //= a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Comparison-Operators-1\"><a href=\"#Comparison-Operators-1\" class=\"headerlink\" title=\"Comparison Operators\"></a>Comparison Operators</h3><p>Assume <code>a = 5</code> and <code>b = 10</code>.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>==</code></td>\n<td>If the values of two operands are equal, then the condition becomes true.</td>\n<td><code>a == b</code> evaluates to false.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td>If values of two operands are not equal, then condition becomes true.</td>\n<td><code>a != b</code> is true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;</code></td>\n<td>If the value of left operand is greater than the value of right operand, then condition becomes true.</td>\n<td><code>a &gt; b</code> is not true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;</code></td>\n<td>If the value of left operand is less than the value of right operand, then condition becomes true.</td>\n<td><code>a &lt; b</code> is true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code></td>\n<td>If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.</td>\n<td><code>a &gt;= b</code> is not true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;=</code></td>\n<td>If the value of left operand is less than or equal to the value of right operand, then condition becomes true.</td>\n<td><code>a &lt;= b</code> is true.</td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a != b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a != b</span><br></pre></td></tr></table></figure></p>\n<p><strong>Key Point</strong>: <code>=</code> assigns a value, <code>==</code> tests for equality, <code>!=</code> tests for inequality.</p>\n<h3 id=\"Logical-Operators\"><a href=\"#Logical-Operators\" class=\"headerlink\" title=\"Logical Operators\"></a>Logical Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>and</code></td>\n<td>If both the operands are true then condition becomes true.</td>\n<td><code>x&gt;4 and y&lt;5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>or</code></td>\n<td>If any of the two operands are non-zero then condition becomes true.</td>\n<td><code>x&gt;4 or y&lt;5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>not</code></td>\n<td>Used to reverse the logical state of its operand.</td>\n<td><code>not(x and y)</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Identity-Operators\"><a href=\"#Identity-Operators\" class=\"headerlink\" title=\"Identity Operators\"></a>Identity Operators</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>is</code></td>\n<td>Evaluates to true if the variables on either side of the operator point to the same object.</td>\n<td>See below.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>is not</code></td>\n<td>Evaluates to false if the variables on either side of the operator point to the same object.</td>\n<td>See below.</td>\n</tr>\n</tbody>\n</table>\n<p>Exercise:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a <span class=\"keyword\">is</span> b</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Conditional-Branching\"><a href=\"#Conditional-Branching\" class=\"headerlink\" title=\"Conditional Branching\"></a>Conditional Branching</h2><h3 id=\"Using-if\"><a href=\"#Using-if\" class=\"headerlink\" title=\"Using if\"></a>Using <code>if</code></h3><p>Now that we know how to check if something is <code>True</code> or <code>False</code> using booleans and operators, we can use “conditional branching” to make Python execute commands on a conditional basis. Just take a look at the following code:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>This is the first piece of Python we’ve written that crosses multiple lines, and the way to enter it at a Python interpreter’s prompt is a little different than single lines of code.</p>\n<p>In the interpreter:</p>\n<ol>\n<li>Type <code>if 6 &gt; 5:</code>, and hit <code>ENTER</code>. The next line will have <code>...</code> as a prompt, instead of the usual <code>&gt;&gt;&gt;</code>. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.</li>\n<li>Type 4 spaces, type <code>print(&quot;Six is greater than five!&quot;)</code>, and then hit <code>ENTER</code> to end the line. Note that spaces are <a href=\"https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces\" target=\"_blank\" rel=\"noopener\">officially the preferred indentation method</a>.</li>\n<li>Finally, hit <code>ENTER</code> again to tell Python you are done with this code block. All together, it will look like this:</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br><span class=\"line\">Six <span class=\"keyword\">is</span> greater than five!</span><br></pre></td></tr></table></figure>\n<p>So what’s going on here? When Python encounters the <code>if</code> keyword, it evaluates the expression following the keyword and before the colon.</p>\n<ul>\n<li>If that expression evaluates to <code>True</code>, Python executes the code in the indented code block under the <code>if</code> line.</li>\n<li>If that expression evaluates to <code>False</code>, Python skips over the code block.</li>\n</ul>\n<p>In this case, because “6 is greater than 5” evaluates to true, Python executes the code block under the if statement, and we see “Six is greater than five!” printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">0</span> &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Zero is greater than two!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Another:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"string\">\"banana\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"bananarama\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"I miss the 80s.\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>One more:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"string\">\"Ringo\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"John, Paul, and George\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Ringo wasn't much of a songwriter.\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Using-if-and-else\"><a href=\"#Using-if-and-else\" class=\"headerlink\" title=\"Using if and else\"></a>Using <code>if</code> and <code>else</code></h3><p>You can use the <code>else</code> keyword to execute code only when the <code>if</code> expression isn’t <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sister_age = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Like with <code>if</code>, the code block under the <code>else</code> statement must be indented so Python knows that it is a part of the <code>else</code> block.</p>\n<h3 id=\"Using-and-and-or\"><a href=\"#Using-and-and-or\" class=\"headerlink\" title=\"Using and and or\"></a>Using <code>and</code> and <code>or</code></h3><p>We’ve been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the <code>and</code> and <code>or</code> logical operators.</p>\n<ul>\n<li>If two expressions are joined by an <code>and</code>, they <strong>both</strong> have to be <code>True</code> for the overall expression to be <code>True</code>.</li>\n<li>If two expressions are joined by an <code>or</code>, as long as <strong>at least one</strong> is <code>True</code>, the overall expression is <code>True</code>.</li>\n</ul>\n<p>Try typing these out and see what you get:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"e\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &lt;= <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure>\n<p>Guess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting. Indenting is a crucial part of the syntax of Python.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>temperature = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> temperature &lt; <span class=\"number\">75</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"It's nice and cozy in here!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\">....    print(<span class=\"string\">\"Too extreme for me.\"</span>)</span><br></pre></td></tr></table></figure>\n<p>One more:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hour = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> hour &lt; <span class=\"number\">7</span> <span class=\"keyword\">or</span> hour &gt; <span class=\"number\">23</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Go away!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"I'm sleeping!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Welcome to the cheese shop!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Can I interest you in some choice gouda?\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>You can have as many lines of code as you want in if-else block, just make sure to indent them so Python knows they are a part of the same indentation block.</p>\n<h3 id=\"Using-elif-and-else\"><a href=\"#Using-elif-and-else\" class=\"headerlink\" title=\"Using elif and else\"></a>Using <code>elif</code> and <code>else</code></h3><p>If you have more than two cases, you can use the <code>elif</code> keyword to check more cases. Think of <code>elif</code> as Python-speak for else if. You can have as many <code>elif</code> cases as you want. Python will go down the code checking each <code>elif</code> until it finds a <code>True</code> condition or reaches the default <code>else</code> block.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sister_age = <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> sister_age == brother_age:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"sister and brother are the same age\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You don’t have to have an <code>else</code> block if you don’t need it. That just means there isn’t default code to execute when none of the <code>if</code> or <code>elif</code>conditions are <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>color = <span class=\"string\">\"orange\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">if</span> color == <span class=\"string\">\"green\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Christmas color!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> color == <span class=\"string\">\"black\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"orange\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Halloween color!\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">elif</span> color == <span class=\"string\">\"pink\"</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>   print(<span class=\"string\">\"Valentine's Day color!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>If <code>color</code> had been “purple”, the code wouldn’t have printed anything. Remember that <code>=</code> is for assignment and <code>==</code> is for comparison.</p>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><p>Functions are how we perform actions on our data. We’ve been using a function a lot so far: <code>print()</code>. Calling a function is as easy as calling the function name and putting a variable or value between round brackets like we’ve been doing.</p>\n<p>Try the following:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"The number 3: \"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(a, b)</span><br></pre></td></tr></table></figure></p>\n<p>The values between the <code>()</code> brackets are called “arguments.” Certain functions let us pass arguments to our functions. like so:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"Bill is\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"years old.\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(str1, a, str2)</span><br></pre></td></tr></table></figure></p>\n<p>There are three basic categories of functions:</p>\n<ul>\n<li>The built-in kind that come with Python when we install it (e.g.<code>print()</code>)</li>\n<li>The kind we write ourselves</li>\n<li>The kind that other people wrote that we can borrow (by importing their code modules and using them in our programs)</li>\n</ul>\n<p>We’ve already introduced the built-in kind. Next, we’ll show you how to write your own. Later, we’ll show you how to import and use functions written by other people.</p>\n<h3 id=\"Writing-Our-Own-Function\"><a href=\"#Writing-Our-Own-Function\" class=\"headerlink\" title=\"Writing Our Own Function\"></a>Writing Our Own Function</h3><p>In the interpreter, write the following code:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFirstFunction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Hello!\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>We just wrote our first function! Now call it:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>myFirstFunction()</span><br></pre></td></tr></table></figure></p>\n<p>Our function takes no arguments. Let’s write a function that passes an argument:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mySecondFunction</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"Hello\"</span>, name)</span><br></pre></td></tr></table></figure></p>\n<p>Now let’s run it, passing in the name of your choice:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mySecondFunction(<span class=\"string\">\"Bill Gates\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Fantastic! You just authored and called your first function that passed an argument.</p>\n<h3 id=\"Utility-Functions\"><a href=\"#Utility-Functions\" class=\"headerlink\" title=\"Utility Functions\"></a>Utility Functions</h3><p>We’ll gradually expand your knowledge of functions, but for now we’ll introduce a few other built-in functions that can help us with numerical types and strings.</p>\n<h4 id=\"For-Numbers\"><a href=\"#For-Numbers\" class=\"headerlink\" title=\"For Numbers\"></a>For Numbers</h4><p>We can convert between numerical types with ease.</p>\n<p>Convert from float to int:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">5.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = int(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(x)</span><br></pre></td></tr></table></figure></p>\n<p>Convert from int to float:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = float(y)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(y)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"For-Strings\"><a href=\"#For-Strings\" class=\"headerlink\" title=\"For Strings\"></a>For Strings</h4><p><code>upper()</code> and <code>lower()</code> are handy:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"My String\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.upper()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.lower()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Additional-Concepts\"><a href=\"#Additional-Concepts\" class=\"headerlink\" title=\"Additional Concepts\"></a>Additional Concepts</h2><p>Let’s briefly introduce some additional concepts and tools that will help you on your journey with Python.</p>\n<h3 id=\"Tracebacks\"><a href=\"#Tracebacks\" class=\"headerlink\" title=\"Tracebacks\"></a>Tracebacks</h3><p>When you make a mistake and try to run your program, Python will generate a traceback to tell you what went wrong. By now, you may have seen a few of these!</p>\n<p>Open the interpreter and run:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"John\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>We see the following error:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: must be str, <span class=\"keyword\">not</span> int</span><br></pre></td></tr></table></figure></p>\n<p>The above traceback tells us the following:</p>\n<ul>\n<li>The name of the file where the error occurred: “<stdin>“ (means that the error occurred on input)</stdin></li>\n<li>The line number containing the error: 1</li>\n<li>The name of the module (if applicable, which it’s not here)</li>\n<li>The error type: <code>TypeError</code></li>\n<li>What we did wrong: We tried to perform an operation on one data type that Python wouldn’t allow.</li>\n</ul>\n<p>Tracebacks are invaluable when trying to diagnose why something won’t run.</p>\n<h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3><p>Comments help us communicate with teammates about what our functions are doing. We’ll use them more when we start running applications in Python files. For now, just know that when you see the following syntax, it’s a comment. There’s no need to enter the code below, just familiarize yourself with the concepts.</p>\n<p>Single line comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Here is a comment in python! It's great and is ignored when the program runs!</span></span><br><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name)</span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>This is an in-line comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name) <span class=\"comment\"># Here is an in-line comment!</span></span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Here is a multiline comment that uses three apostrophes above and below the comment:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">This is a multiline comment for longer comments that you want to put in your code. Commenting code is important when you're sharing code with multiple people. Because we're using the three apostrophes, we can make this comment as looooooooooong as we want!</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">name = <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">print(name)</span><br><span class=\"line\">print(<span class=\"string\">\"Your Name\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap-up\"></a>Wrap-up</h1><p>We just covered a LOT of material. Remember:</p>\n<ol>\n<li>We’ve just barely scratched the surface here. We have have skipped some things. That’s ok! This is supposed to be an introduction. Over time, you will fill in the gaps.</li>\n<li>If something is unclear, <strong>ask for help</strong>. That’s why we’re here.</li>\n<li>If you don’t understand something or feel overwhelmed, <strong>keep at it</strong>. This is just the beginning of a long journey towards learning the ins and outs of Python.</li>\n</ol>\n<h2 id=\"Additional-Resources\"><a href=\"#Additional-Resources\" class=\"headerlink\" title=\"Additional Resources\"></a>Additional Resources</h2><p>There is no shortage of additional resources on Python. It helps to read multiple articles and tutorials on the core concepts mentioned above, so we encourage you to read and explore the following:</p>\n<ul>\n<li><a href=\"https://wiki.python.org/moin/BeginnersGuide/NonProgrammers\" target=\"_blank\" rel=\"noopener\">Python Guide for Beginners - Non-Programmers</a></li>\n<li><a href=\"https://wiki.python.org/moin/BeginnersGuide/Programmers\" target=\"_blank\" rel=\"noopener\">Python Guide for Beginners - Programmers</a></li>\n</ul>\n<h3 id=\"Coding-Exercises\"><a href=\"#Coding-Exercises\" class=\"headerlink\" title=\"Coding Exercises\"></a>Coding Exercises</h3><ul>\n<li><a href=\"https://www.codingbat.com/python\" target=\"_blank\" rel=\"noopener\">Coding Bat</a></li>\n<li><a href=\"https://hackerrank.com\" target=\"_blank\" rel=\"noopener\">Hacker Rank</a></li>\n</ul>\n<h3 id=\"Other-Tools\"><a href=\"#Other-Tools\" class=\"headerlink\" title=\"Other Tools\"></a>Other Tools</h3><ul>\n<li><a href=\"https://www.codeschool.com/courses/try-git\" target=\"_blank\" rel=\"noopener\">Try Git</a></li>\n</ul>\n"},{"title":"Setting Up Python on Linux","date":"2018-03-24T21:40:32.000Z","_content":"\nHere's what you need to do to set up your Linux machine.\n\n## Download and Install Python\n\nMost Linux machines have both Python 2 and Python 3 pre-installed. Open a Terminal window and type `python3` at the prompt. You should see something like the example in the Python shell section below. If you don't, please see an instructor.\n\n## Prepare a text editor\n\nWhile you can absolutely write python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n1. [**Download Sublime Text from here**](http://www.sublimetext.com/3). Install as you would any other program.\n2. Be sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to `True`. In the Sublime Text Menu, add content below **Preferences > Settings - User**. Make sure that it is inside the curly braces at the top of your file.\n\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n\n      ... rest of file\n\n  }\n  ```\n\n3. Save the file.\n\n# Accessing the Python Interpreter\n\nPractice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open a command prompt.\n2. To start Python, type `python3` at the command prompt and hit enter. You should see something like:\n\n  ```\n  Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n  [GCC 4.8.2] on linux\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n\n  The `>>>` indicates that you are at a Python prompt.\n\n3. Exit the Python prompt by typing `exit()` and hitting enter.\n\n# Navigating From a Terminal\n\nThe filesystem on your computer is like a tree made up of folders (also called \"directories\") and files. The filesystem has a root directory called `/`, and everything on your computer lives in subdirectories of this root directory.\n\nWe often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.\nThere are three commands that we'll be using at a command prompt to navigate the filesystem on your computer:\n\n- `ls` lists the contents of a directory (\"what's in this folder?\").\n- `pwd` prints the full directory path to your current directory. It stands for \"print working directory.\" (\"where am I?\")\n- `cd` moves you into a new directory (it stands for \"change directory\").\n    - `cd folder_name` - Go into `folder_name` directory.\n    - `cd ..` - Go up one level in the folder heirarchy.\n\nLet's practice using these commands.\n\n1. Open a command prompt. You can find the Terminal application at Applications/Accessories/Terminal, or it may already be on your menu bar.\n2. Type each of these commands and hit enter:\n\n  `ls` - This lists all the files in your home directory.\n  `pwd` - This displays the full directory path to your current directory, which is your home directory.\n  `cd /` - This will change you into the / root directory.\n  `ls` - This lists the contents of the / root directory.\n  `cd home` - This will change you into the home subdirectory of the / root directory.\n  `ls` - You should see a list of all the files in /home, including the directory for your username -- your home directory.\n  `pwd` - This displays the full directory path to your current directory, /home.\n  `cd ..` - .. means \"parent directory\", so this command moved you up to the parent directory. You were in /home, so now you are in /, the root directory.\n  `ls` - This lists the contents of the root directory, confirming where you are.\n\n#### Tips\n\n- You can use **Tab** to auto-complete directory and file names. So if you're inside the root directory and you type `cd ho` and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the /home directory.\n- The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Open a command prompt and hit the up key a few times.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n- What directory are you in after starting a new command line prompt?\n- After starting a new command line prompt, how would you get to the root directory?\n- How do you check what files and directories are in your current working directory?\n- If you are in directory `/home`, and you want to get to `/home/PythonWork/projects`, how would you do that?\n- What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n- What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using dir and cd to navigate your computer's filesystem from the command prompt.\n\n# Start learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.\n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","source":"setuplinux/index.md","raw":"---\ntitle: Setting Up Python on Linux\ndate: 2018-03-24 14:40:32\n---\n\nHere's what you need to do to set up your Linux machine.\n\n## Download and Install Python\n\nMost Linux machines have both Python 2 and Python 3 pre-installed. Open a Terminal window and type `python3` at the prompt. You should see something like the example in the Python shell section below. If you don't, please see an instructor.\n\n## Prepare a text editor\n\nWhile you can absolutely write python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n1. [**Download Sublime Text from here**](http://www.sublimetext.com/3). Install as you would any other program.\n2. Be sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to `True`. In the Sublime Text Menu, add content below **Preferences > Settings - User**. Make sure that it is inside the curly braces at the top of your file.\n\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n\n      ... rest of file\n\n  }\n  ```\n\n3. Save the file.\n\n# Accessing the Python Interpreter\n\nPractice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open a command prompt.\n2. To start Python, type `python3` at the command prompt and hit enter. You should see something like:\n\n  ```\n  Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n  [GCC 4.8.2] on linux\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n\n  The `>>>` indicates that you are at a Python prompt.\n\n3. Exit the Python prompt by typing `exit()` and hitting enter.\n\n# Navigating From a Terminal\n\nThe filesystem on your computer is like a tree made up of folders (also called \"directories\") and files. The filesystem has a root directory called `/`, and everything on your computer lives in subdirectories of this root directory.\n\nWe often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.\nThere are three commands that we'll be using at a command prompt to navigate the filesystem on your computer:\n\n- `ls` lists the contents of a directory (\"what's in this folder?\").\n- `pwd` prints the full directory path to your current directory. It stands for \"print working directory.\" (\"where am I?\")\n- `cd` moves you into a new directory (it stands for \"change directory\").\n    - `cd folder_name` - Go into `folder_name` directory.\n    - `cd ..` - Go up one level in the folder heirarchy.\n\nLet's practice using these commands.\n\n1. Open a command prompt. You can find the Terminal application at Applications/Accessories/Terminal, or it may already be on your menu bar.\n2. Type each of these commands and hit enter:\n\n  `ls` - This lists all the files in your home directory.\n  `pwd` - This displays the full directory path to your current directory, which is your home directory.\n  `cd /` - This will change you into the / root directory.\n  `ls` - This lists the contents of the / root directory.\n  `cd home` - This will change you into the home subdirectory of the / root directory.\n  `ls` - You should see a list of all the files in /home, including the directory for your username -- your home directory.\n  `pwd` - This displays the full directory path to your current directory, /home.\n  `cd ..` - .. means \"parent directory\", so this command moved you up to the parent directory. You were in /home, so now you are in /, the root directory.\n  `ls` - This lists the contents of the root directory, confirming where you are.\n\n#### Tips\n\n- You can use **Tab** to auto-complete directory and file names. So if you're inside the root directory and you type `cd ho` and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the /home directory.\n- The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Open a command prompt and hit the up key a few times.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n- What directory are you in after starting a new command line prompt?\n- After starting a new command line prompt, how would you get to the root directory?\n- How do you check what files and directories are in your current working directory?\n- If you are in directory `/home`, and you want to get to `/home/PythonWork/projects`, how would you do that?\n- What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n- What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using dir and cd to navigate your computer's filesystem from the command prompt.\n\n# Start learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.\n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","updated":"2018-06-01T21:37:57.268Z","path":"setuplinux/index.html","comments":1,"layout":"page","_id":"cjhwiurzo000e75j5q4knbd9d","content":"<p>Here’s what you need to do to set up your Linux machine.</p>\n<h2 id=\"Download-and-Install-Python\"><a href=\"#Download-and-Install-Python\" class=\"headerlink\" title=\"Download and Install Python\"></a>Download and Install Python</h2><p>Most Linux machines have both Python 2 and Python 3 pre-installed. Open a Terminal window and type <code>python3</code> at the prompt. You should see something like the example in the Python shell section below. If you don’t, please see an instructor.</p>\n<h2 id=\"Prepare-a-text-editor\"><a href=\"#Prepare-a-text-editor\" class=\"headerlink\" title=\"Prepare a text editor\"></a>Prepare a text editor</h2><p>While you can absolutely write python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ol>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text from here</strong></a>. Install as you would any other program.</li>\n<li><p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to <code>True</code>. In the Sublime Text Menu, add content below <strong>Preferences &gt; Settings - User</strong>. Make sure that it is inside the curly braces at the top of your file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ... rest of file</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Save the file.</p>\n</li>\n</ol>\n<h1 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h1><p>Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open a command prompt.</li>\n<li><p>To start Python, type <code>python3</code> at the command prompt and hit enter. You should see something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.4.0 (default, Apr 11 2014, 13:05:11)</span><br><span class=\"line\">[GCC 4.8.2] on linux</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</p>\n</li>\n<li><p>Exit the Python prompt by typing <code>exit()</code> and hitting enter.</p>\n</li>\n</ol>\n<h1 id=\"Navigating-From-a-Terminal\"><a href=\"#Navigating-From-a-Terminal\" class=\"headerlink\" title=\"Navigating From a Terminal\"></a>Navigating From a Terminal</h1><p>The filesystem on your computer is like a tree made up of folders (also called “directories”) and files. The filesystem has a root directory called <code>/</code>, and everything on your computer lives in subdirectories of this root directory.</p>\n<p>We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.<br>There are three commands that we’ll be using at a command prompt to navigate the filesystem on your computer:</p>\n<ul>\n<li><code>ls</code> lists the contents of a directory (“what’s in this folder?”).</li>\n<li><code>pwd</code> prints the full directory path to your current directory. It stands for “print working directory.” (“where am I?”)</li>\n<li><code>cd</code> moves you into a new directory (it stands for “change directory”).<ul>\n<li><code>cd folder_name</code> - Go into <code>folder_name</code> directory.</li>\n<li><code>cd ..</code> - Go up one level in the folder heirarchy.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s practice using these commands.</p>\n<ol>\n<li>Open a command prompt. You can find the Terminal application at Applications/Accessories/Terminal, or it may already be on your menu bar.</li>\n<li><p>Type each of these commands and hit enter:</p>\n<p><code>ls</code> - This lists all the files in your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, which is your home directory.<br><code>cd /</code> - This will change you into the / root directory.<br><code>ls</code> - This lists the contents of the / root directory.<br><code>cd home</code> - This will change you into the home subdirectory of the / root directory.<br><code>ls</code> - You should see a list of all the files in /home, including the directory for your username – your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, /home.<br><code>cd ..</code> - .. means “parent directory”, so this command moved you up to the parent directory. You were in /home, so now you are in /, the root directory.<br><code>ls</code> - This lists the contents of the root directory, confirming where you are.</p>\n</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ul>\n<li>You can use <strong>Tab</strong> to auto-complete directory and file names. So if you’re inside the root directory and you type <code>cd ho</code> and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the /home directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Open a command prompt and hit the up key a few times.</li>\n</ul>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>/home</code>, and you want to get to <code>/home/PythonWork/projects</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using dir and cd to navigate your computer’s filesystem from the command prompt.</p>\n<h1 id=\"Start-learning-Python\"><a href=\"#Start-learning-Python\" class=\"headerlink\" title=\"Start learning Python!\"></a>Start learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.</li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Here’s what you need to do to set up your Linux machine.</p>\n<h2 id=\"Download-and-Install-Python\"><a href=\"#Download-and-Install-Python\" class=\"headerlink\" title=\"Download and Install Python\"></a>Download and Install Python</h2><p>Most Linux machines have both Python 2 and Python 3 pre-installed. Open a Terminal window and type <code>python3</code> at the prompt. You should see something like the example in the Python shell section below. If you don’t, please see an instructor.</p>\n<h2 id=\"Prepare-a-text-editor\"><a href=\"#Prepare-a-text-editor\" class=\"headerlink\" title=\"Prepare a text editor\"></a>Prepare a text editor</h2><p>While you can absolutely write python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ol>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text from here</strong></a>. Install as you would any other program.</li>\n<li><p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to <code>True</code>. In the Sublime Text Menu, add content below <strong>Preferences &gt; Settings - User</strong>. Make sure that it is inside the curly braces at the top of your file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ... rest of file</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Save the file.</p>\n</li>\n</ol>\n<h1 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h1><p>Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open a command prompt.</li>\n<li><p>To start Python, type <code>python3</code> at the command prompt and hit enter. You should see something like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.4.0 (default, Apr 11 2014, 13:05:11)</span><br><span class=\"line\">[GCC 4.8.2] on linux</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</p>\n</li>\n<li><p>Exit the Python prompt by typing <code>exit()</code> and hitting enter.</p>\n</li>\n</ol>\n<h1 id=\"Navigating-From-a-Terminal\"><a href=\"#Navigating-From-a-Terminal\" class=\"headerlink\" title=\"Navigating From a Terminal\"></a>Navigating From a Terminal</h1><p>The filesystem on your computer is like a tree made up of folders (also called “directories”) and files. The filesystem has a root directory called <code>/</code>, and everything on your computer lives in subdirectories of this root directory.</p>\n<p>We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.<br>There are three commands that we’ll be using at a command prompt to navigate the filesystem on your computer:</p>\n<ul>\n<li><code>ls</code> lists the contents of a directory (“what’s in this folder?”).</li>\n<li><code>pwd</code> prints the full directory path to your current directory. It stands for “print working directory.” (“where am I?”)</li>\n<li><code>cd</code> moves you into a new directory (it stands for “change directory”).<ul>\n<li><code>cd folder_name</code> - Go into <code>folder_name</code> directory.</li>\n<li><code>cd ..</code> - Go up one level in the folder heirarchy.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s practice using these commands.</p>\n<ol>\n<li>Open a command prompt. You can find the Terminal application at Applications/Accessories/Terminal, or it may already be on your menu bar.</li>\n<li><p>Type each of these commands and hit enter:</p>\n<p><code>ls</code> - This lists all the files in your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, which is your home directory.<br><code>cd /</code> - This will change you into the / root directory.<br><code>ls</code> - This lists the contents of the / root directory.<br><code>cd home</code> - This will change you into the home subdirectory of the / root directory.<br><code>ls</code> - You should see a list of all the files in /home, including the directory for your username – your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, /home.<br><code>cd ..</code> - .. means “parent directory”, so this command moved you up to the parent directory. You were in /home, so now you are in /, the root directory.<br><code>ls</code> - This lists the contents of the root directory, confirming where you are.</p>\n</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ul>\n<li>You can use <strong>Tab</strong> to auto-complete directory and file names. So if you’re inside the root directory and you type <code>cd ho</code> and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the /home directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Open a command prompt and hit the up key a few times.</li>\n</ul>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>/home</code>, and you want to get to <code>/home/PythonWork/projects</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using dir and cd to navigate your computer’s filesystem from the command prompt.</p>\n<h1 id=\"Start-learning-Python\"><a href=\"#Start-learning-Python\" class=\"headerlink\" title=\"Start learning Python!\"></a>Start learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.</li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n"},{"title":"Setting Up Python on Mac","date":"2018-03-24T21:40:27.000Z","_content":"\n**Important**: While Macs come with Python 2.7.x pre-installed, but because Python 2's end-of-life is just around the corner, we'll be working with Python 3 during this session so there's some light installation ahead of us. This will require administrative privileges on your computer since the Python installation is usually done to protected directories. Along the way, we'll also set up a more advanced text editor that will help us by providing some really specific programming features.\n\nTo install Python 3 for Mac:\n\n1. Download the package available here: [**Python 3.6.0 Installation Package for Mac**](https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg).\n2. Double-click the downloaded file to start the installation process.\n3. Click through the wizard. The default settings are all fine to use. Close the wizard when complete. By default, the package installs into a central location which will require you to enter your system username and password during the process.\n\n## Accessing the Python Interpreter\n\nLet's test that your installation went well by running the `python3` interpreter in the `Terminal`. Practice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open Terminal.\n2. Enter the following into the terminal and press `enter`:\n  ```\n  $ python3\n  ```\n  You should then see something like this:\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)\n  [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>> quit()\n  ```\n  While inside the python interpreter:\n    - The `>>>` indicates that you are at a Python prompt.\n    - You can exit the Python prompt by typing `quit()` and pressing enter or by using `control+d`.\n\n# Installing a Text Editor (Sublime)\n\nWhile you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n- [**Download Sublime Text 3 from here**](http://www.sublimetext.com/3)\n\nOnce downloaded, install it as you would any other OS X application. Being explicit, this means double-clicking the downloaded `dmg` file, letting it open up, and subsequently dragging the `Sublime Text` application into your `Applications` folder.\n\nBe sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to True.\n\n1. Go **Sublime Text > Preferences > Settings**.\n2. In the `Preferences.sublime - settings-User` file, paste the following. This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.\n\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n      //... rest of file\n\n  }\n  ```\n\n3. Save the file.\n\n# Navigating From a Terminal\n\nThe way your computer organizes storage is called a filesystem. This filesystem is organized like a tree with folders (also called `directories`) and `files`. The highest point in the tree is the _root_ directory located at `/`. Everything you can access on your computer lives within the sub-directories of this root directory.\n\nWe often navigate the filesystem graphically (using Finder) where we can click and move deeper and across this directory tree. We can do that exact same navigation from the command line.\n\nTo do this, there are three commands that we'll be using:\n\n- `ls` lists the contents of a directory (\"what's in this folder?\").\n- `pwd` prints the full directory path to your current directory. It stands for \"print working directory.\" (\"where am I?\")\n- `cd` moves you into a new directory (it stands for \"change directory\").\n    - `cd folder_name` - Go into `folder_name` directory.\n    - `cd ..` - Go up one level in the folder heirarchy.\n\nLet's practice using these commands.\n\n1. Open up a Terminal (it's under `Applications/Utilities`)\n2. Type each of these commands in order and hit `enter`:\n\n  `ls` - This lists all the files in your home directory.\n  `pwd` - This displays the full directory path to your current directory, which is your home directory.\n  `cd /` - This will change you into the `/` (root) directory.\n  `ls` - This lists the contents of the `/` (root) directory.\n  `cd Users` - This will change you into the home subdirectory of the `/` (root) directory.\n  `ls` - You should see a list of all the computer's users' home directories (and possibly a Shared folder).\n  `pwd` - This displays the full directory path to your current directory, which in this case is `/Users`.\n  `cd ..` - `..` is a relative location meaning \"parent directory\". You were in `/Users`, so now you have moved up to your \"parent\", `/`, the root directory.\n  `ls` - This lists the contents of the root directory, confirming where you are.\n  `cd ~` - Just like how `..` means \"parent directory\", `~` means \"home\" directory. When you execute this command, you'll change back to your home directory, where all your user files are.\n\n#### Tips\n\n1. You can use `tab` to auto-complete directories, files, and programs. So from inside the root directory `/`, if you type `cd Us` and press the `tab` key, the command prompt will auto-complete the directory name, and you can then hit `enter` to change into the `/Users` directory.\n2. The command prompt maintains a command history. You can use the up arrow to cycle through old commands. You can also see a list of your history by using the `history` command.\n3. If you'd like to open a Finder window wherever you are in the Terminal, you can use the `open .` command. Turns out `.` is another \"special place\" that means \"the current directory\". So this command opens the current directory, which OS X generally does with the help of Finder.\n4. If you'd like to change to a specific location in the Terminal, and you have a Finder window open already to that place, you can type in `cd ` to the Terminal, drag the little blue folder at the top of the Finder window into the Terminal, and then press `enter`.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n* What directory are you in after starting a new command line prompt?\n* After starting a new command line prompt, how would you get to the root directory?\n* How do you check what files and directories are in your current working directory?\n* If you are in directory `/`, and you want to get to `/Users/Shared/`, how would you do that?\n* What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n* What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using `ls` and `cd` to navigate your computer's filesystem using Terminal.\n\n# Start learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.  \n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","source":"setupmac/index.md","raw":"---\ntitle: Setting Up Python on Mac\ndate: 2018-03-24 14:40:27\n---\n\n**Important**: While Macs come with Python 2.7.x pre-installed, but because Python 2's end-of-life is just around the corner, we'll be working with Python 3 during this session so there's some light installation ahead of us. This will require administrative privileges on your computer since the Python installation is usually done to protected directories. Along the way, we'll also set up a more advanced text editor that will help us by providing some really specific programming features.\n\nTo install Python 3 for Mac:\n\n1. Download the package available here: [**Python 3.6.0 Installation Package for Mac**](https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg).\n2. Double-click the downloaded file to start the installation process.\n3. Click through the wizard. The default settings are all fine to use. Close the wizard when complete. By default, the package installs into a central location which will require you to enter your system username and password during the process.\n\n## Accessing the Python Interpreter\n\nLet's test that your installation went well by running the `python3` interpreter in the `Terminal`. Practice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open Terminal.\n2. Enter the following into the terminal and press `enter`:\n  ```\n  $ python3\n  ```\n  You should then see something like this:\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)\n  [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>> quit()\n  ```\n  While inside the python interpreter:\n    - The `>>>` indicates that you are at a Python prompt.\n    - You can exit the Python prompt by typing `quit()` and pressing enter or by using `control+d`.\n\n# Installing a Text Editor (Sublime)\n\nWhile you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n- [**Download Sublime Text 3 from here**](http://www.sublimetext.com/3)\n\nOnce downloaded, install it as you would any other OS X application. Being explicit, this means double-clicking the downloaded `dmg` file, letting it open up, and subsequently dragging the `Sublime Text` application into your `Applications` folder.\n\nBe sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to True.\n\n1. Go **Sublime Text > Preferences > Settings**.\n2. In the `Preferences.sublime - settings-User` file, paste the following. This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.\n\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n      //... rest of file\n\n  }\n  ```\n\n3. Save the file.\n\n# Navigating From a Terminal\n\nThe way your computer organizes storage is called a filesystem. This filesystem is organized like a tree with folders (also called `directories`) and `files`. The highest point in the tree is the _root_ directory located at `/`. Everything you can access on your computer lives within the sub-directories of this root directory.\n\nWe often navigate the filesystem graphically (using Finder) where we can click and move deeper and across this directory tree. We can do that exact same navigation from the command line.\n\nTo do this, there are three commands that we'll be using:\n\n- `ls` lists the contents of a directory (\"what's in this folder?\").\n- `pwd` prints the full directory path to your current directory. It stands for \"print working directory.\" (\"where am I?\")\n- `cd` moves you into a new directory (it stands for \"change directory\").\n    - `cd folder_name` - Go into `folder_name` directory.\n    - `cd ..` - Go up one level in the folder heirarchy.\n\nLet's practice using these commands.\n\n1. Open up a Terminal (it's under `Applications/Utilities`)\n2. Type each of these commands in order and hit `enter`:\n\n  `ls` - This lists all the files in your home directory.\n  `pwd` - This displays the full directory path to your current directory, which is your home directory.\n  `cd /` - This will change you into the `/` (root) directory.\n  `ls` - This lists the contents of the `/` (root) directory.\n  `cd Users` - This will change you into the home subdirectory of the `/` (root) directory.\n  `ls` - You should see a list of all the computer's users' home directories (and possibly a Shared folder).\n  `pwd` - This displays the full directory path to your current directory, which in this case is `/Users`.\n  `cd ..` - `..` is a relative location meaning \"parent directory\". You were in `/Users`, so now you have moved up to your \"parent\", `/`, the root directory.\n  `ls` - This lists the contents of the root directory, confirming where you are.\n  `cd ~` - Just like how `..` means \"parent directory\", `~` means \"home\" directory. When you execute this command, you'll change back to your home directory, where all your user files are.\n\n#### Tips\n\n1. You can use `tab` to auto-complete directories, files, and programs. So from inside the root directory `/`, if you type `cd Us` and press the `tab` key, the command prompt will auto-complete the directory name, and you can then hit `enter` to change into the `/Users` directory.\n2. The command prompt maintains a command history. You can use the up arrow to cycle through old commands. You can also see a list of your history by using the `history` command.\n3. If you'd like to open a Finder window wherever you are in the Terminal, you can use the `open .` command. Turns out `.` is another \"special place\" that means \"the current directory\". So this command opens the current directory, which OS X generally does with the help of Finder.\n4. If you'd like to change to a specific location in the Terminal, and you have a Finder window open already to that place, you can type in `cd ` to the Terminal, drag the little blue folder at the top of the Finder window into the Terminal, and then press `enter`.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n* What directory are you in after starting a new command line prompt?\n* After starting a new command line prompt, how would you get to the root directory?\n* How do you check what files and directories are in your current working directory?\n* If you are in directory `/`, and you want to get to `/Users/Shared/`, how would you do that?\n* What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n* What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using `ls` and `cd` to navigate your computer's filesystem using Terminal.\n\n# Start learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.  \n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","updated":"2018-06-01T21:37:57.268Z","path":"setupmac/index.html","comments":1,"layout":"page","_id":"cjhwiurzs000i75j5o5qzt1ti","content":"<p><strong>Important</strong>: While Macs come with Python 2.7.x pre-installed, but because Python 2’s end-of-life is just around the corner, we’ll be working with Python 3 during this session so there’s some light installation ahead of us. This will require administrative privileges on your computer since the Python installation is usually done to protected directories. Along the way, we’ll also set up a more advanced text editor that will help us by providing some really specific programming features.</p>\n<p>To install Python 3 for Mac:</p>\n<ol>\n<li>Download the package available here: <a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg\" target=\"_blank\" rel=\"noopener\"><strong>Python 3.6.0 Installation Package for Mac</strong></a>.</li>\n<li>Double-click the downloaded file to start the installation process.</li>\n<li>Click through the wizard. The default settings are all fine to use. Close the wizard when complete. By default, the package installs into a central location which will require you to enter your system username and password during the process.</li>\n</ol>\n<h2 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h2><p>Let’s test that your installation went well by running the <code>python3</code> interpreter in the <code>Terminal</code>. Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open Terminal.</li>\n<li><p>Enter the following into the terminal and press <code>enter</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3</span><br></pre></td></tr></table></figure>\n<p>You should then see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)</span><br><span class=\"line\">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure>\n<p>While inside the python interpreter:</p>\n<ul>\n<li>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</li>\n<li>You can exit the Python prompt by typing <code>quit()</code> and pressing enter or by using <code>control+d</code>.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Installing-a-Text-Editor-Sublime\"><a href=\"#Installing-a-Text-Editor-Sublime\" class=\"headerlink\" title=\"Installing a Text Editor (Sublime)\"></a>Installing a Text Editor (Sublime)</h1><p>While you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text 3 from here</strong></a></li>\n</ul>\n<p>Once downloaded, install it as you would any other OS X application. Being explicit, this means double-clicking the downloaded <code>dmg</code> file, letting it open up, and subsequently dragging the <code>Sublime Text</code> application into your <code>Applications</code> folder.</p>\n<p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to True.</p>\n<ol>\n<li>Go <strong>Sublime Text &gt; Preferences &gt; Settings</strong>.</li>\n<li><p>In the <code>Preferences.sublime - settings-User</code> file, paste the following. This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">    //... rest of file</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Save the file.</p>\n</li>\n</ol>\n<h1 id=\"Navigating-From-a-Terminal\"><a href=\"#Navigating-From-a-Terminal\" class=\"headerlink\" title=\"Navigating From a Terminal\"></a>Navigating From a Terminal</h1><p>The way your computer organizes storage is called a filesystem. This filesystem is organized like a tree with folders (also called <code>directories</code>) and <code>files</code>. The highest point in the tree is the <em>root</em> directory located at <code>/</code>. Everything you can access on your computer lives within the sub-directories of this root directory.</p>\n<p>We often navigate the filesystem graphically (using Finder) where we can click and move deeper and across this directory tree. We can do that exact same navigation from the command line.</p>\n<p>To do this, there are three commands that we’ll be using:</p>\n<ul>\n<li><code>ls</code> lists the contents of a directory (“what’s in this folder?”).</li>\n<li><code>pwd</code> prints the full directory path to your current directory. It stands for “print working directory.” (“where am I?”)</li>\n<li><code>cd</code> moves you into a new directory (it stands for “change directory”).<ul>\n<li><code>cd folder_name</code> - Go into <code>folder_name</code> directory.</li>\n<li><code>cd ..</code> - Go up one level in the folder heirarchy.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s practice using these commands.</p>\n<ol>\n<li>Open up a Terminal (it’s under <code>Applications/Utilities</code>)</li>\n<li><p>Type each of these commands in order and hit <code>enter</code>:</p>\n<p><code>ls</code> - This lists all the files in your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, which is your home directory.<br><code>cd /</code> - This will change you into the <code>/</code> (root) directory.<br><code>ls</code> - This lists the contents of the <code>/</code> (root) directory.<br><code>cd Users</code> - This will change you into the home subdirectory of the <code>/</code> (root) directory.<br><code>ls</code> - You should see a list of all the computer’s users’ home directories (and possibly a Shared folder).<br><code>pwd</code> - This displays the full directory path to your current directory, which in this case is <code>/Users</code>.<br><code>cd ..</code> - <code>..</code> is a relative location meaning “parent directory”. You were in <code>/Users</code>, so now you have moved up to your “parent”, <code>/</code>, the root directory.<br><code>ls</code> - This lists the contents of the root directory, confirming where you are.<br><code>cd ~</code> - Just like how <code>..</code> means “parent directory”, <code>~</code> means “home” directory. When you execute this command, you’ll change back to your home directory, where all your user files are.</p>\n</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ol>\n<li>You can use <code>tab</code> to auto-complete directories, files, and programs. So from inside the root directory <code>/</code>, if you type <code>cd Us</code> and press the <code>tab</code> key, the command prompt will auto-complete the directory name, and you can then hit <code>enter</code> to change into the <code>/Users</code> directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. You can also see a list of your history by using the <code>history</code> command.</li>\n<li>If you’d like to open a Finder window wherever you are in the Terminal, you can use the <code>open .</code> command. Turns out <code>.</code> is another “special place” that means “the current directory”. So this command opens the current directory, which OS X generally does with the help of Finder.</li>\n<li>If you’d like to change to a specific location in the Terminal, and you have a Finder window open already to that place, you can type in <code>cd</code> to the Terminal, drag the little blue folder at the top of the Finder window into the Terminal, and then press <code>enter</code>.</li>\n</ol>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>/</code>, and you want to get to <code>/Users/Shared/</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using <code>ls</code> and <code>cd</code> to navigate your computer’s filesystem using Terminal.</p>\n<h1 id=\"Start-learning-Python\"><a href=\"#Start-learning-Python\" class=\"headerlink\" title=\"Start learning Python!\"></a>Start learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.  </li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Important</strong>: While Macs come with Python 2.7.x pre-installed, but because Python 2’s end-of-life is just around the corner, we’ll be working with Python 3 during this session so there’s some light installation ahead of us. This will require administrative privileges on your computer since the Python installation is usually done to protected directories. Along the way, we’ll also set up a more advanced text editor that will help us by providing some really specific programming features.</p>\n<p>To install Python 3 for Mac:</p>\n<ol>\n<li>Download the package available here: <a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg\" target=\"_blank\" rel=\"noopener\"><strong>Python 3.6.0 Installation Package for Mac</strong></a>.</li>\n<li>Double-click the downloaded file to start the installation process.</li>\n<li>Click through the wizard. The default settings are all fine to use. Close the wizard when complete. By default, the package installs into a central location which will require you to enter your system username and password during the process.</li>\n</ol>\n<h2 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h2><p>Let’s test that your installation went well by running the <code>python3</code> interpreter in the <code>Terminal</code>. Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open Terminal.</li>\n<li><p>Enter the following into the terminal and press <code>enter</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3</span><br></pre></td></tr></table></figure>\n<p>You should then see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)</span><br><span class=\"line\">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure>\n<p>While inside the python interpreter:</p>\n<ul>\n<li>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</li>\n<li>You can exit the Python prompt by typing <code>quit()</code> and pressing enter or by using <code>control+d</code>.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Installing-a-Text-Editor-Sublime\"><a href=\"#Installing-a-Text-Editor-Sublime\" class=\"headerlink\" title=\"Installing a Text Editor (Sublime)\"></a>Installing a Text Editor (Sublime)</h1><p>While you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text 3 from here</strong></a></li>\n</ul>\n<p>Once downloaded, install it as you would any other OS X application. Being explicit, this means double-clicking the downloaded <code>dmg</code> file, letting it open up, and subsequently dragging the <code>Sublime Text</code> application into your <code>Applications</code> folder.</p>\n<p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to True.</p>\n<ol>\n<li>Go <strong>Sublime Text &gt; Preferences &gt; Settings</strong>.</li>\n<li><p>In the <code>Preferences.sublime - settings-User</code> file, paste the following. This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">    //... rest of file</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Save the file.</p>\n</li>\n</ol>\n<h1 id=\"Navigating-From-a-Terminal\"><a href=\"#Navigating-From-a-Terminal\" class=\"headerlink\" title=\"Navigating From a Terminal\"></a>Navigating From a Terminal</h1><p>The way your computer organizes storage is called a filesystem. This filesystem is organized like a tree with folders (also called <code>directories</code>) and <code>files</code>. The highest point in the tree is the <em>root</em> directory located at <code>/</code>. Everything you can access on your computer lives within the sub-directories of this root directory.</p>\n<p>We often navigate the filesystem graphically (using Finder) where we can click and move deeper and across this directory tree. We can do that exact same navigation from the command line.</p>\n<p>To do this, there are three commands that we’ll be using:</p>\n<ul>\n<li><code>ls</code> lists the contents of a directory (“what’s in this folder?”).</li>\n<li><code>pwd</code> prints the full directory path to your current directory. It stands for “print working directory.” (“where am I?”)</li>\n<li><code>cd</code> moves you into a new directory (it stands for “change directory”).<ul>\n<li><code>cd folder_name</code> - Go into <code>folder_name</code> directory.</li>\n<li><code>cd ..</code> - Go up one level in the folder heirarchy.</li>\n</ul>\n</li>\n</ul>\n<p>Let’s practice using these commands.</p>\n<ol>\n<li>Open up a Terminal (it’s under <code>Applications/Utilities</code>)</li>\n<li><p>Type each of these commands in order and hit <code>enter</code>:</p>\n<p><code>ls</code> - This lists all the files in your home directory.<br><code>pwd</code> - This displays the full directory path to your current directory, which is your home directory.<br><code>cd /</code> - This will change you into the <code>/</code> (root) directory.<br><code>ls</code> - This lists the contents of the <code>/</code> (root) directory.<br><code>cd Users</code> - This will change you into the home subdirectory of the <code>/</code> (root) directory.<br><code>ls</code> - You should see a list of all the computer’s users’ home directories (and possibly a Shared folder).<br><code>pwd</code> - This displays the full directory path to your current directory, which in this case is <code>/Users</code>.<br><code>cd ..</code> - <code>..</code> is a relative location meaning “parent directory”. You were in <code>/Users</code>, so now you have moved up to your “parent”, <code>/</code>, the root directory.<br><code>ls</code> - This lists the contents of the root directory, confirming where you are.<br><code>cd ~</code> - Just like how <code>..</code> means “parent directory”, <code>~</code> means “home” directory. When you execute this command, you’ll change back to your home directory, where all your user files are.</p>\n</li>\n</ol>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ol>\n<li>You can use <code>tab</code> to auto-complete directories, files, and programs. So from inside the root directory <code>/</code>, if you type <code>cd Us</code> and press the <code>tab</code> key, the command prompt will auto-complete the directory name, and you can then hit <code>enter</code> to change into the <code>/Users</code> directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. You can also see a list of your history by using the <code>history</code> command.</li>\n<li>If you’d like to open a Finder window wherever you are in the Terminal, you can use the <code>open .</code> command. Turns out <code>.</code> is another “special place” that means “the current directory”. So this command opens the current directory, which OS X generally does with the help of Finder.</li>\n<li>If you’d like to change to a specific location in the Terminal, and you have a Finder window open already to that place, you can type in <code>cd</code> to the Terminal, drag the little blue folder at the top of the Finder window into the Terminal, and then press <code>enter</code>.</li>\n</ol>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>/</code>, and you want to get to <code>/Users/Shared/</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using <code>ls</code> and <code>cd</code> to navigate your computer’s filesystem using Terminal.</p>\n<h1 id=\"Start-learning-Python\"><a href=\"#Start-learning-Python\" class=\"headerlink\" title=\"Start learning Python!\"></a>Start learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.  </li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n"},{"title":"Workshop","date":"2018-03-25T01:36:01.000Z","_content":"Welcome to the Redmond Python Workshop!\n\n## What is a workshop?\n\nThe Redmond Python Workshop is a workshop given by the organization to walk beginners through the setup and basics of Python in a 6-hour course. We go over all of the basic material, allowing students to ask questions, and we have TAs there to help with any setup issues you encounter. It's one of the easiest ways to get started with Python. Join the <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup</a> and keep your eye out for upcoming Workshops.\n\n## Links\n\n- [**Part One Workshop**](/workshop1)\n- [**Part Two Workshop**](/workshop2)","source":"workshop/index.md","raw":"---\ntitle: Workshop\ndate: 2018-03-24 18:36:01\n---\nWelcome to the Redmond Python Workshop!\n\n## What is a workshop?\n\nThe Redmond Python Workshop is a workshop given by the organization to walk beginners through the setup and basics of Python in a 6-hour course. We go over all of the basic material, allowing students to ask questions, and we have TAs there to help with any setup issues you encounter. It's one of the easiest ways to get started with Python. Join the <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\">Meetup</a> and keep your eye out for upcoming Workshops.\n\n## Links\n\n- [**Part One Workshop**](/workshop1)\n- [**Part Two Workshop**](/workshop2)","updated":"2018-06-01T21:37:57.268Z","path":"workshop/index.html","comments":1,"layout":"page","_id":"cjhwiurzw000l75j58hcyrasq","content":"<p>Welcome to the Redmond Python Workshop!</p>\n<h2 id=\"What-is-a-workshop\"><a href=\"#What-is-a-workshop\" class=\"headerlink\" title=\"What is a workshop?\"></a>What is a workshop?</h2><p>The Redmond Python Workshop is a workshop given by the organization to walk beginners through the setup and basics of Python in a 6-hour course. We go over all of the basic material, allowing students to ask questions, and we have TAs there to help with any setup issues you encounter. It’s one of the easiest ways to get started with Python. Join the <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup</a> and keep your eye out for upcoming Workshops.</p>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"/workshop1\"><strong>Part One Workshop</strong></a></li>\n<li><a href=\"/workshop2\"><strong>Part Two Workshop</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to the Redmond Python Workshop!</p>\n<h2 id=\"What-is-a-workshop\"><a href=\"#What-is-a-workshop\" class=\"headerlink\" title=\"What is a workshop?\"></a>What is a workshop?</h2><p>The Redmond Python Workshop is a workshop given by the organization to walk beginners through the setup and basics of Python in a 6-hour course. We go over all of the basic material, allowing students to ask questions, and we have TAs there to help with any setup issues you encounter. It’s one of the easiest ways to get started with Python. Join the <a href=\"https://www.meetup.com/Redmond-Python-User-Group/\" target=\"_blank\" rel=\"noopener\">Meetup</a> and keep your eye out for upcoming Workshops.</p>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"/workshop1\"><strong>Part One Workshop</strong></a></li>\n<li><a href=\"/workshop2\"><strong>Part Two Workshop</strong></a></li>\n</ul>\n"},{"title":"Setting Up Python on Windows","date":"2018-03-24T21:40:23.000Z","_content":"Here's what you need to do to set up your Windows machine. If you already think you have Python 3 installed, please check with a staff member before completing these instructions.\n\n1. Open [this Python download link](https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe). Click \"run\" if prompted. Otherwise, save the file to your computer and double-click to start the installer.\n2. Windows may prompt you on whether you want to run or install Python. Click **Run** or **Yes** when these prompts may appear.\n3. Check the box to \"Add Python 3.6 to PATH\".\n4. Click **Install Now**. This will also install IDLE (official Python IDE), pip (used to install Python packages), and documentation tools that will make your Python learning experience much easier. Follow the instructions to complete the installation, and click CLOSE when complete.\n5. Open a command prompt (we will be doing this multiple times, so make a note of how to do this!):\n  - **Windows 8 or Windows 10**: Open the Start Menu and search for \"command prompt\"\n  - **Windows 7 or Vista**: Click on the Start menu (the Windows logo in the lower left of the screen), type `cmd` into the Search field directly above the Start menu button, and click \"cmd\" in the search results above the Search field.\n  - **Windows XP**: Click Start menu, click \"Run...\", type `cmd` into the text box, and hit enter.\n\nYou now have what's called a command prompt. This command prompt is another way of navigating your computer and running programs -- just textually instead of graphically. We are going to be running Python and Python scripts from this command prompt.\n\n3. At the command prompt (which will look something like `C:\\Users\\username>`, type:\n  ```\n  python\n  ```\n  You should see something that looks like this:\n\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n  You just started Python! The `>>>` indicates that you are at a new type of prompt -- a Python prompt. The command prompt lets you navigate your computer and run programs, and the Python prompt lets you write and run Python code interactively. If the number after Python is not 3 or greater, please tell an instructor or assistant.\n\n4. To exit the Python shell, type `exit()` and hit enter.  You'll now be back at the Windows command prompt (the `C:\\` that you saw earlier).\n\n# Prepare a Text Editor\n\nWhile you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n1. [**Download Sublime Text here**](http://www.sublimetext.com/3). Install as you would any other program.\n2. Be sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to True. Add the lines below to the file under **\"Preferences\" -- \"Settings - User\"**. Make sure that it is inside the curly braces at the top of your file.\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n      ... rest of file\n  }\n  ```\n  ```\n    // The number of spaces a tab is considered equal to\n    \"tab_size\": 4,\n\n    // Set to true to insert spaces when tab is pressed\n    \"translate_tabs_to_spaces\": true,\n  ```\n\nThis ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.\n\n# Accessing the Python Interpreter\n\nPractice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open a command prompt.\n2. To start Python, type `python` at the command prompt and hit enter. You should see something like this:\n\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n\n  The `>>>` indicates that you are at a Python prompt.\n3. Exit the Python prompt by typing `exit()` and hitting enter. Now you're back at the Windows command prompt `C:\\Users\\username>`.\n\n# Navigating From a Command Prompt\n\nThe filesystem on your computer is like a tree made up of folders (also called \"directories\") and files. The filesystem has a root directory called `/`, and everything on your computer lives in subdirectories of this root directory. We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.\n\nThere are two commands that we'll be using at a command prompt to navigate the filesystem on your computer:\n\n- `dir` - lists the contents of a directory.\n- `cd` - moves you into a new directory (it stands for \"change directory\").\n\nLet's practice using these commands. Open a command prompt, type each of these commands and hit enter:\n\n`dir` - *This lists all the files in your home directory.*\n`cd C:\\` - *This will change you into the C:\\ directory.*\n`dir` - *This lists the contents of the C:\\ directory.*\n`cd Users` - *This will change you into the Users subdirectory of the C:\\ directory.*\n`dir` - *You should see the names of all the files and directories in C:\\Users.*\n`cd ..` - *The two dots mean \"parent directory\", so this command moved you up to the parent directory. You were in `C:\\Users`, so now you are in `C:\\`, the root directory.*\n`dir` - *This lists the contents of the current directory (root).*\n\n#### Tips\n\n- You can use Tab to auto-complete directory and file names. So from inside the root directory, if you type `cd Use` and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the `C:\\Users` directory.\n- The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Note that the text that makes up the command prompt changes as you move around directories. The command prompt will always give the full directory path to your current directory.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n* What directory are you in after starting a new command line prompt?\n* After starting a new command line prompt, how would you get to the root directory?\n* How do you check what files and directories are in your current working directory?\n* If you are in directory `C:\\Users`, and you want to get to `C:\\Users\\PythonWork\\projects`, how would you do that?\n* What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n* What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using dir and cd to navigate your computer's filesystem from the command prompt.\n\n# Start Learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.  \n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","source":"setupwindows/index.md","raw":"---\ntitle: Setting Up Python on Windows\ndate: 2018-03-24 14:40:23\n---\nHere's what you need to do to set up your Windows machine. If you already think you have Python 3 installed, please check with a staff member before completing these instructions.\n\n1. Open [this Python download link](https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe). Click \"run\" if prompted. Otherwise, save the file to your computer and double-click to start the installer.\n2. Windows may prompt you on whether you want to run or install Python. Click **Run** or **Yes** when these prompts may appear.\n3. Check the box to \"Add Python 3.6 to PATH\".\n4. Click **Install Now**. This will also install IDLE (official Python IDE), pip (used to install Python packages), and documentation tools that will make your Python learning experience much easier. Follow the instructions to complete the installation, and click CLOSE when complete.\n5. Open a command prompt (we will be doing this multiple times, so make a note of how to do this!):\n  - **Windows 8 or Windows 10**: Open the Start Menu and search for \"command prompt\"\n  - **Windows 7 or Vista**: Click on the Start menu (the Windows logo in the lower left of the screen), type `cmd` into the Search field directly above the Start menu button, and click \"cmd\" in the search results above the Search field.\n  - **Windows XP**: Click Start menu, click \"Run...\", type `cmd` into the text box, and hit enter.\n\nYou now have what's called a command prompt. This command prompt is another way of navigating your computer and running programs -- just textually instead of graphically. We are going to be running Python and Python scripts from this command prompt.\n\n3. At the command prompt (which will look something like `C:\\Users\\username>`, type:\n  ```\n  python\n  ```\n  You should see something that looks like this:\n\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n  You just started Python! The `>>>` indicates that you are at a new type of prompt -- a Python prompt. The command prompt lets you navigate your computer and run programs, and the Python prompt lets you write and run Python code interactively. If the number after Python is not 3 or greater, please tell an instructor or assistant.\n\n4. To exit the Python shell, type `exit()` and hit enter.  You'll now be back at the Windows command prompt (the `C:\\` that you saw earlier).\n\n# Prepare a Text Editor\n\nWhile you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we'll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.\n\n1. [**Download Sublime Text here**](http://www.sublimetext.com/3). Install as you would any other program.\n2. Be sure that you've set tabs equal to 4 spaces and the tabs to spaces setting is set to True. Add the lines below to the file under **\"Preferences\" -- \"Settings - User\"**. Make sure that it is inside the curly braces at the top of your file.\n  ```\n  {\n\n      // The number of spaces a tab is considered equal to\n      \"tab_size\": 4,\n\n      // Set to true to insert spaces when tab is pressed\n      \"translate_tabs_to_spaces\": true,\n\n      ... rest of file\n  }\n  ```\n  ```\n    // The number of spaces a tab is considered equal to\n    \"tab_size\": 4,\n\n    // Set to true to insert spaces when tab is pressed\n    \"translate_tabs_to_spaces\": true,\n  ```\n\nThis ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.\n\n# Accessing the Python Interpreter\n\nPractice doing this a few times until you are comfortable entering and exiting the Python shell.\n\n1. Open a command prompt.\n2. To start Python, type `python` at the command prompt and hit enter. You should see something like this:\n\n  ```\n  Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n  >>>\n  ```\n\n  The `>>>` indicates that you are at a Python prompt.\n3. Exit the Python prompt by typing `exit()` and hitting enter. Now you're back at the Windows command prompt `C:\\Users\\username>`.\n\n# Navigating From a Command Prompt\n\nThe filesystem on your computer is like a tree made up of folders (also called \"directories\") and files. The filesystem has a root directory called `/`, and everything on your computer lives in subdirectories of this root directory. We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.\n\nThere are two commands that we'll be using at a command prompt to navigate the filesystem on your computer:\n\n- `dir` - lists the contents of a directory.\n- `cd` - moves you into a new directory (it stands for \"change directory\").\n\nLet's practice using these commands. Open a command prompt, type each of these commands and hit enter:\n\n`dir` - *This lists all the files in your home directory.*\n`cd C:\\` - *This will change you into the C:\\ directory.*\n`dir` - *This lists the contents of the C:\\ directory.*\n`cd Users` - *This will change you into the Users subdirectory of the C:\\ directory.*\n`dir` - *You should see the names of all the files and directories in C:\\Users.*\n`cd ..` - *The two dots mean \"parent directory\", so this command moved you up to the parent directory. You were in `C:\\Users`, so now you are in `C:\\`, the root directory.*\n`dir` - *This lists the contents of the current directory (root).*\n\n#### Tips\n\n- You can use Tab to auto-complete directory and file names. So from inside the root directory, if you type `cd Use` and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the `C:\\Users` directory.\n- The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Note that the text that makes up the command prompt changes as you move around directories. The command prompt will always give the full directory path to your current directory.\n\n#### Check Your Understanding\n\nAnswer these questions. Experiment at the command line if you need to! If you aren't sure about an answer, ask a helper.\n\n* What directory are you in after starting a new command line prompt?\n* After starting a new command line prompt, how would you get to the root directory?\n* How do you check what files and directories are in your current working directory?\n* If you are in directory `C:\\Users`, and you want to get to `C:\\Users\\PythonWork\\projects`, how would you do that?\n* What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you've run the command before)\n* What is the difference between a command prompt and a Python prompt?\n\n#### Success!\n\nYou've practiced using dir and cd to navigate your computer's filesystem from the command prompt.\n\n# Start Learning Python!\n\n- You may want to just quickly go through the [onboarding page](/onboarding).\n- Go through this [self-directed tutorial](/day_one_tutorial/) to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.\n\n## Install Dependencies for the Projects\n\n- Download the [Wordplay Project](https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip).\n- Download the [Colorwall Project](https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip) for Python 3.  \n\n## Practice\n\nTry some [practice exercises](/practice/). If you've been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.\n\n## Checkoff\n\nWhen you're ready, let an instructor or assistant know. Together you will go through the following check off steps:\n\n1. Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.\n2. Create a new Python file (with a `.py` extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.\n\n    `print(\"Hello world!\")`\n\n3. Open your text editor and press `Tab`. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  \n4. Test the Wordplay and ColorWall installations.\n    - Navigate to the Wordplay directory. Run the `words1.py` script from your computer's terminal. You should see a list of words that have two consecutive letter u's.\n    - Navigate to the Colorwall directory. Run the `run.py` script from your computer's terminal. You should see a grid with color animations that lasts about a minute.\n5. Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.\n","updated":"2018-06-01T21:37:57.268Z","path":"setupwindows/index.html","comments":1,"layout":"page","_id":"cjhwiurzx000n75j5imq5ndmx","content":"<p>Here’s what you need to do to set up your Windows machine. If you already think you have Python 3 installed, please check with a staff member before completing these instructions.</p>\n<ol>\n<li>Open <a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe\" target=\"_blank\" rel=\"noopener\">this Python download link</a>. Click “run” if prompted. Otherwise, save the file to your computer and double-click to start the installer.</li>\n<li>Windows may prompt you on whether you want to run or install Python. Click <strong>Run</strong> or <strong>Yes</strong> when these prompts may appear.</li>\n<li>Check the box to “Add Python 3.6 to PATH”.</li>\n<li>Click <strong>Install Now</strong>. This will also install IDLE (official Python IDE), pip (used to install Python packages), and documentation tools that will make your Python learning experience much easier. Follow the instructions to complete the installation, and click CLOSE when complete.</li>\n<li>Open a command prompt (we will be doing this multiple times, so make a note of how to do this!):<ul>\n<li><strong>Windows 8 or Windows 10</strong>: Open the Start Menu and search for “command prompt”</li>\n<li><strong>Windows 7 or Vista</strong>: Click on the Start menu (the Windows logo in the lower left of the screen), type <code>cmd</code> into the Search field directly above the Start menu button, and click “cmd” in the search results above the Search field.</li>\n<li><strong>Windows XP</strong>: Click Start menu, click “Run…”, type <code>cmd</code> into the text box, and hit enter.</li>\n</ul>\n</li>\n</ol>\n<p>You now have what’s called a command prompt. This command prompt is another way of navigating your computer and running programs – just textually instead of graphically. We are going to be running Python and Python scripts from this command prompt.</p>\n<ol start=\"3\">\n<li><p>At the command prompt (which will look something like <code>C:\\Users\\username&gt;</code>, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>You should see something that looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>You just started Python! The <code>&gt;&gt;&gt;</code> indicates that you are at a new type of prompt – a Python prompt. The command prompt lets you navigate your computer and run programs, and the Python prompt lets you write and run Python code interactively. If the number after Python is not 3 or greater, please tell an instructor or assistant.</p>\n</li>\n<li><p>To exit the Python shell, type <code>exit()</code> and hit enter.  You’ll now be back at the Windows command prompt (the <code>C:\\</code> that you saw earlier).</p>\n</li>\n</ol>\n<h1 id=\"Prepare-a-Text-Editor\"><a href=\"#Prepare-a-Text-Editor\" class=\"headerlink\" title=\"Prepare a Text Editor\"></a>Prepare a Text Editor</h1><p>While you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ol>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text here</strong></a>. Install as you would any other program.</li>\n<li><p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to True. Add the lines below to the file under <strong>“Preferences” – “Settings - User”</strong>. Make sure that it is inside the curly braces at the top of your file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">    ... rest of file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// The number of spaces a tab is considered equal to</span><br><span class=\"line\">&quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">// Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">&quot;translate_tabs_to_spaces&quot;: true,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.</p>\n<h1 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h1><p>Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open a command prompt.</li>\n<li><p>To start Python, type <code>python</code> at the command prompt and hit enter. You should see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</p>\n</li>\n<li>Exit the Python prompt by typing <code>exit()</code> and hitting enter. Now you’re back at the Windows command prompt <code>C:\\Users\\username&gt;</code>.</li>\n</ol>\n<h1 id=\"Navigating-From-a-Command-Prompt\"><a href=\"#Navigating-From-a-Command-Prompt\" class=\"headerlink\" title=\"Navigating From a Command Prompt\"></a>Navigating From a Command Prompt</h1><p>The filesystem on your computer is like a tree made up of folders (also called “directories”) and files. The filesystem has a root directory called <code>/</code>, and everything on your computer lives in subdirectories of this root directory. We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.</p>\n<p>There are two commands that we’ll be using at a command prompt to navigate the filesystem on your computer:</p>\n<ul>\n<li><code>dir</code> - lists the contents of a directory.</li>\n<li><code>cd</code> - moves you into a new directory (it stands for “change directory”).</li>\n</ul>\n<p>Let’s practice using these commands. Open a command prompt, type each of these commands and hit enter:</p>\n<p><code>dir</code> - <em>This lists all the files in your home directory.</em><br><code>cd C:\\</code> - <em>This will change you into the C:\\ directory.</em><br><code>dir</code> - <em>This lists the contents of the C:\\ directory.</em><br><code>cd Users</code> - <em>This will change you into the Users subdirectory of the C:\\ directory.</em><br><code>dir</code> - <em>You should see the names of all the files and directories in C:\\Users.</em><br><code>cd ..</code> - <em>The two dots mean “parent directory”, so this command moved you up to the parent directory. You were in <code>C:\\Users</code>, so now you are in <code>C:\\</code>, the root directory.</em><br><code>dir</code> - <em>This lists the contents of the current directory (root).</em></p>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ul>\n<li>You can use Tab to auto-complete directory and file names. So from inside the root directory, if you type <code>cd Use</code> and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the <code>C:\\Users</code> directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Note that the text that makes up the command prompt changes as you move around directories. The command prompt will always give the full directory path to your current directory.</li>\n</ul>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>C:\\Users</code>, and you want to get to <code>C:\\Users\\PythonWork\\projects</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using dir and cd to navigate your computer’s filesystem from the command prompt.</p>\n<h1 id=\"Start-Learning-Python\"><a href=\"#Start-Learning-Python\" class=\"headerlink\" title=\"Start Learning Python!\"></a>Start Learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.  </li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Here’s what you need to do to set up your Windows machine. If you already think you have Python 3 installed, please check with a staff member before completing these instructions.</p>\n<ol>\n<li>Open <a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-amd64.exe\" target=\"_blank\" rel=\"noopener\">this Python download link</a>. Click “run” if prompted. Otherwise, save the file to your computer and double-click to start the installer.</li>\n<li>Windows may prompt you on whether you want to run or install Python. Click <strong>Run</strong> or <strong>Yes</strong> when these prompts may appear.</li>\n<li>Check the box to “Add Python 3.6 to PATH”.</li>\n<li>Click <strong>Install Now</strong>. This will also install IDLE (official Python IDE), pip (used to install Python packages), and documentation tools that will make your Python learning experience much easier. Follow the instructions to complete the installation, and click CLOSE when complete.</li>\n<li>Open a command prompt (we will be doing this multiple times, so make a note of how to do this!):<ul>\n<li><strong>Windows 8 or Windows 10</strong>: Open the Start Menu and search for “command prompt”</li>\n<li><strong>Windows 7 or Vista</strong>: Click on the Start menu (the Windows logo in the lower left of the screen), type <code>cmd</code> into the Search field directly above the Start menu button, and click “cmd” in the search results above the Search field.</li>\n<li><strong>Windows XP</strong>: Click Start menu, click “Run…”, type <code>cmd</code> into the text box, and hit enter.</li>\n</ul>\n</li>\n</ol>\n<p>You now have what’s called a command prompt. This command prompt is another way of navigating your computer and running programs – just textually instead of graphically. We are going to be running Python and Python scripts from this command prompt.</p>\n<ol start=\"3\">\n<li><p>At the command prompt (which will look something like <code>C:\\Users\\username&gt;</code>, type:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>You should see something that looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>You just started Python! The <code>&gt;&gt;&gt;</code> indicates that you are at a new type of prompt – a Python prompt. The command prompt lets you navigate your computer and run programs, and the Python prompt lets you write and run Python code interactively. If the number after Python is not 3 or greater, please tell an instructor or assistant.</p>\n</li>\n<li><p>To exit the Python shell, type <code>exit()</code> and hit enter.  You’ll now be back at the Windows command prompt (the <code>C:\\</code> that you saw earlier).</p>\n</li>\n</ol>\n<h1 id=\"Prepare-a-Text-Editor\"><a href=\"#Prepare-a-Text-Editor\" class=\"headerlink\" title=\"Prepare a Text Editor\"></a>Prepare a Text Editor</h1><p>While you can absolutely write Python code in any text editor, it is a lot easier to use one that is aware of code content and provides relevant features. To that end, we’ll be using Sublime Text 3. While there are a multitude of other options, Sublime 3 provides a good blend of simplicity and functionality.</p>\n<ol>\n<li><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\"><strong>Download Sublime Text here</strong></a>. Install as you would any other program.</li>\n<li><p>Be sure that you’ve set tabs equal to 4 spaces and the tabs to spaces setting is set to True. Add the lines below to the file under <strong>“Preferences” – “Settings - User”</strong>. Make sure that it is inside the curly braces at the top of your file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // The number of spaces a tab is considered equal to</span><br><span class=\"line\">    &quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">    ... rest of file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// The number of spaces a tab is considered equal to</span><br><span class=\"line\">&quot;tab_size&quot;: 4,</span><br><span class=\"line\"></span><br><span class=\"line\">// Set to true to insert spaces when tab is pressed</span><br><span class=\"line\">&quot;translate_tabs_to_spaces&quot;: true,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>This ensures that when you hit the Tab button on your keyboard, your text editor will do the equivalent of typing four spaces.</p>\n<h1 id=\"Accessing-the-Python-Interpreter\"><a href=\"#Accessing-the-Python-Interpreter\" class=\"headerlink\" title=\"Accessing the Python Interpreter\"></a>Accessing the Python Interpreter</h1><p>Practice doing this a few times until you are comfortable entering and exiting the Python shell.</p>\n<ol>\n<li>Open a command prompt.</li>\n<li><p>To start Python, type <code>python</code> at the command prompt and hit enter. You should see something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>The <code>&gt;&gt;&gt;</code> indicates that you are at a Python prompt.</p>\n</li>\n<li>Exit the Python prompt by typing <code>exit()</code> and hitting enter. Now you’re back at the Windows command prompt <code>C:\\Users\\username&gt;</code>.</li>\n</ol>\n<h1 id=\"Navigating-From-a-Command-Prompt\"><a href=\"#Navigating-From-a-Command-Prompt\" class=\"headerlink\" title=\"Navigating From a Command Prompt\"></a>Navigating From a Command Prompt</h1><p>The filesystem on your computer is like a tree made up of folders (also called “directories”) and files. The filesystem has a root directory called <code>/</code>, and everything on your computer lives in subdirectories of this root directory. We often navigate the filesystem graphically by clicking on graphical folders. We can do the exact same navigation from the command line.</p>\n<p>There are two commands that we’ll be using at a command prompt to navigate the filesystem on your computer:</p>\n<ul>\n<li><code>dir</code> - lists the contents of a directory.</li>\n<li><code>cd</code> - moves you into a new directory (it stands for “change directory”).</li>\n</ul>\n<p>Let’s practice using these commands. Open a command prompt, type each of these commands and hit enter:</p>\n<p><code>dir</code> - <em>This lists all the files in your home directory.</em><br><code>cd C:\\</code> - <em>This will change you into the C:\\ directory.</em><br><code>dir</code> - <em>This lists the contents of the C:\\ directory.</em><br><code>cd Users</code> - <em>This will change you into the Users subdirectory of the C:\\ directory.</em><br><code>dir</code> - <em>You should see the names of all the files and directories in C:\\Users.</em><br><code>cd ..</code> - <em>The two dots mean “parent directory”, so this command moved you up to the parent directory. You were in <code>C:\\Users</code>, so now you are in <code>C:\\</code>, the root directory.</em><br><code>dir</code> - <em>This lists the contents of the current directory (root).</em></p>\n<h4 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h4><ul>\n<li>You can use Tab to auto-complete directory and file names. So from inside the root directory, if you type <code>cd Use</code> and hit Tab, the command prompt will auto-complete the directory name, and you can then hit enter to change into the <code>C:\\Users</code> directory.</li>\n<li>The command prompt maintains a command history. You can use the up arrow to cycle through old commands. Note that the text that makes up the command prompt changes as you move around directories. The command prompt will always give the full directory path to your current directory.</li>\n</ul>\n<h4 id=\"Check-Your-Understanding\"><a href=\"#Check-Your-Understanding\" class=\"headerlink\" title=\"Check Your Understanding\"></a>Check Your Understanding</h4><p>Answer these questions. Experiment at the command line if you need to! If you aren’t sure about an answer, ask a helper.</p>\n<ul>\n<li>What directory are you in after starting a new command line prompt?</li>\n<li>After starting a new command line prompt, how would you get to the root directory?</li>\n<li>How do you check what files and directories are in your current working directory?</li>\n<li>If you are in directory <code>C:\\Users</code>, and you want to get to <code>C:\\Users\\PythonWork\\projects</code>, how would you do that?</li>\n<li>What are 2 ways to avoid typing out a full navigation command? (hint: one requires that you’ve run the command before)</li>\n<li>What is the difference between a command prompt and a Python prompt?</li>\n</ul>\n<h4 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success!\"></a>Success!</h4><p>You’ve practiced using dir and cd to navigate your computer’s filesystem from the command prompt.</p>\n<h1 id=\"Start-Learning-Python\"><a href=\"#Start-Learning-Python\" class=\"headerlink\" title=\"Start Learning Python!\"></a>Start Learning Python!</h1><ul>\n<li>You may want to just quickly go through the <a href=\"/onboarding\">onboarding page</a>.</li>\n<li>Go through this <a href=\"/day_one_tutorial/\">self-directed tutorial</a> to start learning to read and write in Python. These concepts will be reviewed in the day two lesson, along with some more advanced topics.</li>\n</ul>\n<h2 id=\"Install-Dependencies-for-the-Projects\"><a href=\"#Install-Dependencies-for-the-Projects\" class=\"headerlink\" title=\"Install Dependencies for the Projects\"></a>Install Dependencies for the Projects</h2><ul>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Wordplay/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Wordplay Project</a>.</li>\n<li>Download the <a href=\"https://github.com/PhillyPythonWorkshop/Colorwall3/archive/master.zip\" target=\"_blank\" rel=\"noopener\">Colorwall Project</a> for Python 3.  </li>\n</ul>\n<h2 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h2><p>Try some <a href=\"/practice/\">practice exercises</a>. If you’ve been working on any other tutorials, feel free to go to those too, and ask an instructor to help anywhere you get stuck.</p>\n<h2 id=\"Checkoff\"><a href=\"#Checkoff\" class=\"headerlink\" title=\"Checkoff\"></a>Checkoff</h2><p>When you’re ready, let an instructor or assistant know. Together you will go through the following check off steps:</p>\n<ol>\n<li>Start a new command prompt, and from that command prompt start Python 3. Then quit Python 3.</li>\n<li><p>Create a new Python file (with a <code>.py</code> extension). In that file, type the following and save the file. From a command prompt, navigate to this file and execute that Python script.</p>\n<p> <code>print(&quot;Hello world!&quot;)</code></p>\n</li>\n<li><p>Open your text editor and press <code>Tab</code>. Use the left arrow key to go back in that line and show that your text editor is using spaces to indent, not tabs.  </p>\n</li>\n<li>Test the Wordplay and ColorWall installations.<ul>\n<li>Navigate to the Wordplay directory. Run the <code>words1.py</code> script from your computer’s terminal. You should see a list of words that have two consecutive letter u’s.</li>\n<li>Navigate to the Colorwall directory. Run the <code>run.py</code> script from your computer’s terminal. You should see a grid with color animations that lasts about a minute.</li>\n</ul>\n</li>\n<li>Show the instructor a practice exercise that seemed particularly challenging and how you worked it out.</li>\n</ol>\n"},{"title":"Workshop - Part 2","date":"2018-03-25T01:42:51.000Z","_content":"\n## Review Day 1 material\n\n* math\n* type()\n* variables\n* strings\n* booleans\n* if/elif/else\n* functions\n\n## lists\n\n* purpose\n* initialization\n* len() review\n* accessing elements\n* adding elements\n* changing elements\n* slicing lists\n\n## tuples\n\n* like lists but immutable\n* can perform all the same operations except changing elements\n* strings are like tuples - can slice, access elements, can not change elements\n\n## loops and more flow control\n\n* for loops\n* if statements inside for loops\n* nested for loops\n* range()\n* while loops\n* infinite loops\n* if statements inside while loops\n* break\n* input()\n\n## dictionaries\n\n* purpose\n* initialization\n* accessing elements\n* adding elements\n* changing elements\n* keys() and values()\n\n## modules\n\n* purpose\n* builtins\n* imports\n    * math\n        * math.pi\n        * math.sqrt()    \n    * random\n        * random.randint()\n        * random.choice()\n\n## Let's put it all together\n\nWalk through [state_capitals.py](/code/capitals.py). Copy and paste this whole file in your text editor and save it as `state_capitals.py`.\n\n* create a dictionary of states & capitals \n* import a module\n* write a while loop \n* select a random key and value from the list\n* take user input to guess state capital\n* evaluate user's input & respond\n* allow user to end game\n\n### Practice exercises\n\n#### Exercise 1 (as a class)\n\n1. Write a function that simulates the roll of two standard six sided die. \n2. Save it to a file called `dice_roll.py`.\n3. Open a Python interpreter from that same directory and `import dice_roll` and run the function inside your Python interpreter.\n\n#### Exercise 2 (individual work)\n\n1. Write a function that takes one argument.  \n    - If the argument is a list, it returns a random item from that list - simulating drawing a person's name from a hat.  \n    - If the argument is not a list, it returns the message `The argument must be a list.`\n2. Save the file and run it inside your Python interpreter.\n","source":"workshop2/index.md","raw":"---\ntitle: Workshop - Part 2\ndate: 2018-03-24 18:42:51\n---\n\n## Review Day 1 material\n\n* math\n* type()\n* variables\n* strings\n* booleans\n* if/elif/else\n* functions\n\n## lists\n\n* purpose\n* initialization\n* len() review\n* accessing elements\n* adding elements\n* changing elements\n* slicing lists\n\n## tuples\n\n* like lists but immutable\n* can perform all the same operations except changing elements\n* strings are like tuples - can slice, access elements, can not change elements\n\n## loops and more flow control\n\n* for loops\n* if statements inside for loops\n* nested for loops\n* range()\n* while loops\n* infinite loops\n* if statements inside while loops\n* break\n* input()\n\n## dictionaries\n\n* purpose\n* initialization\n* accessing elements\n* adding elements\n* changing elements\n* keys() and values()\n\n## modules\n\n* purpose\n* builtins\n* imports\n    * math\n        * math.pi\n        * math.sqrt()    \n    * random\n        * random.randint()\n        * random.choice()\n\n## Let's put it all together\n\nWalk through [state_capitals.py](/code/capitals.py). Copy and paste this whole file in your text editor and save it as `state_capitals.py`.\n\n* create a dictionary of states & capitals \n* import a module\n* write a while loop \n* select a random key and value from the list\n* take user input to guess state capital\n* evaluate user's input & respond\n* allow user to end game\n\n### Practice exercises\n\n#### Exercise 1 (as a class)\n\n1. Write a function that simulates the roll of two standard six sided die. \n2. Save it to a file called `dice_roll.py`.\n3. Open a Python interpreter from that same directory and `import dice_roll` and run the function inside your Python interpreter.\n\n#### Exercise 2 (individual work)\n\n1. Write a function that takes one argument.  \n    - If the argument is a list, it returns a random item from that list - simulating drawing a person's name from a hat.  \n    - If the argument is not a list, it returns the message `The argument must be a list.`\n2. Save the file and run it inside your Python interpreter.\n","updated":"2018-06-01T21:37:57.268Z","path":"workshop2/index.html","comments":1,"layout":"page","_id":"cjhwius0f000s75j5cgr0u8yw","content":"<h2 id=\"Review-Day-1-material\"><a href=\"#Review-Day-1-material\" class=\"headerlink\" title=\"Review Day 1 material\"></a>Review Day 1 material</h2><ul>\n<li>math</li>\n<li>type()</li>\n<li>variables</li>\n<li>strings</li>\n<li>booleans</li>\n<li>if/elif/else</li>\n<li>functions</li>\n</ul>\n<h2 id=\"lists\"><a href=\"#lists\" class=\"headerlink\" title=\"lists\"></a>lists</h2><ul>\n<li>purpose</li>\n<li>initialization</li>\n<li>len() review</li>\n<li>accessing elements</li>\n<li>adding elements</li>\n<li>changing elements</li>\n<li>slicing lists</li>\n</ul>\n<h2 id=\"tuples\"><a href=\"#tuples\" class=\"headerlink\" title=\"tuples\"></a>tuples</h2><ul>\n<li>like lists but immutable</li>\n<li>can perform all the same operations except changing elements</li>\n<li>strings are like tuples - can slice, access elements, can not change elements</li>\n</ul>\n<h2 id=\"loops-and-more-flow-control\"><a href=\"#loops-and-more-flow-control\" class=\"headerlink\" title=\"loops and more flow control\"></a>loops and more flow control</h2><ul>\n<li>for loops</li>\n<li>if statements inside for loops</li>\n<li>nested for loops</li>\n<li>range()</li>\n<li>while loops</li>\n<li>infinite loops</li>\n<li>if statements inside while loops</li>\n<li>break</li>\n<li>input()</li>\n</ul>\n<h2 id=\"dictionaries\"><a href=\"#dictionaries\" class=\"headerlink\" title=\"dictionaries\"></a>dictionaries</h2><ul>\n<li>purpose</li>\n<li>initialization</li>\n<li>accessing elements</li>\n<li>adding elements</li>\n<li>changing elements</li>\n<li>keys() and values()</li>\n</ul>\n<h2 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h2><ul>\n<li>purpose</li>\n<li>builtins</li>\n<li>imports<ul>\n<li>math<ul>\n<li>math.pi</li>\n<li>math.sqrt()    </li>\n</ul>\n</li>\n<li>random<ul>\n<li>random.randint()</li>\n<li>random.choice()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Let’s-put-it-all-together\"><a href=\"#Let’s-put-it-all-together\" class=\"headerlink\" title=\"Let’s put it all together\"></a>Let’s put it all together</h2><p>Walk through <a href=\"/code/capitals.py\">state_capitals.py</a>. Copy and paste this whole file in your text editor and save it as <code>state_capitals.py</code>.</p>\n<ul>\n<li>create a dictionary of states &amp; capitals </li>\n<li>import a module</li>\n<li>write a while loop </li>\n<li>select a random key and value from the list</li>\n<li>take user input to guess state capital</li>\n<li>evaluate user’s input &amp; respond</li>\n<li>allow user to end game</li>\n</ul>\n<h3 id=\"Practice-exercises\"><a href=\"#Practice-exercises\" class=\"headerlink\" title=\"Practice exercises\"></a>Practice exercises</h3><h4 id=\"Exercise-1-as-a-class\"><a href=\"#Exercise-1-as-a-class\" class=\"headerlink\" title=\"Exercise 1 (as a class)\"></a>Exercise 1 (as a class)</h4><ol>\n<li>Write a function that simulates the roll of two standard six sided die. </li>\n<li>Save it to a file called <code>dice_roll.py</code>.</li>\n<li>Open a Python interpreter from that same directory and <code>import dice_roll</code> and run the function inside your Python interpreter.</li>\n</ol>\n<h4 id=\"Exercise-2-individual-work\"><a href=\"#Exercise-2-individual-work\" class=\"headerlink\" title=\"Exercise 2 (individual work)\"></a>Exercise 2 (individual work)</h4><ol>\n<li>Write a function that takes one argument.  <ul>\n<li>If the argument is a list, it returns a random item from that list - simulating drawing a person’s name from a hat.  </li>\n<li>If the argument is not a list, it returns the message <code>The argument must be a list.</code></li>\n</ul>\n</li>\n<li>Save the file and run it inside your Python interpreter.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Review-Day-1-material\"><a href=\"#Review-Day-1-material\" class=\"headerlink\" title=\"Review Day 1 material\"></a>Review Day 1 material</h2><ul>\n<li>math</li>\n<li>type()</li>\n<li>variables</li>\n<li>strings</li>\n<li>booleans</li>\n<li>if/elif/else</li>\n<li>functions</li>\n</ul>\n<h2 id=\"lists\"><a href=\"#lists\" class=\"headerlink\" title=\"lists\"></a>lists</h2><ul>\n<li>purpose</li>\n<li>initialization</li>\n<li>len() review</li>\n<li>accessing elements</li>\n<li>adding elements</li>\n<li>changing elements</li>\n<li>slicing lists</li>\n</ul>\n<h2 id=\"tuples\"><a href=\"#tuples\" class=\"headerlink\" title=\"tuples\"></a>tuples</h2><ul>\n<li>like lists but immutable</li>\n<li>can perform all the same operations except changing elements</li>\n<li>strings are like tuples - can slice, access elements, can not change elements</li>\n</ul>\n<h2 id=\"loops-and-more-flow-control\"><a href=\"#loops-and-more-flow-control\" class=\"headerlink\" title=\"loops and more flow control\"></a>loops and more flow control</h2><ul>\n<li>for loops</li>\n<li>if statements inside for loops</li>\n<li>nested for loops</li>\n<li>range()</li>\n<li>while loops</li>\n<li>infinite loops</li>\n<li>if statements inside while loops</li>\n<li>break</li>\n<li>input()</li>\n</ul>\n<h2 id=\"dictionaries\"><a href=\"#dictionaries\" class=\"headerlink\" title=\"dictionaries\"></a>dictionaries</h2><ul>\n<li>purpose</li>\n<li>initialization</li>\n<li>accessing elements</li>\n<li>adding elements</li>\n<li>changing elements</li>\n<li>keys() and values()</li>\n</ul>\n<h2 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h2><ul>\n<li>purpose</li>\n<li>builtins</li>\n<li>imports<ul>\n<li>math<ul>\n<li>math.pi</li>\n<li>math.sqrt()    </li>\n</ul>\n</li>\n<li>random<ul>\n<li>random.randint()</li>\n<li>random.choice()</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Let’s-put-it-all-together\"><a href=\"#Let’s-put-it-all-together\" class=\"headerlink\" title=\"Let’s put it all together\"></a>Let’s put it all together</h2><p>Walk through <a href=\"/code/capitals.py\">state_capitals.py</a>. Copy and paste this whole file in your text editor and save it as <code>state_capitals.py</code>.</p>\n<ul>\n<li>create a dictionary of states &amp; capitals </li>\n<li>import a module</li>\n<li>write a while loop </li>\n<li>select a random key and value from the list</li>\n<li>take user input to guess state capital</li>\n<li>evaluate user’s input &amp; respond</li>\n<li>allow user to end game</li>\n</ul>\n<h3 id=\"Practice-exercises\"><a href=\"#Practice-exercises\" class=\"headerlink\" title=\"Practice exercises\"></a>Practice exercises</h3><h4 id=\"Exercise-1-as-a-class\"><a href=\"#Exercise-1-as-a-class\" class=\"headerlink\" title=\"Exercise 1 (as a class)\"></a>Exercise 1 (as a class)</h4><ol>\n<li>Write a function that simulates the roll of two standard six sided die. </li>\n<li>Save it to a file called <code>dice_roll.py</code>.</li>\n<li>Open a Python interpreter from that same directory and <code>import dice_roll</code> and run the function inside your Python interpreter.</li>\n</ol>\n<h4 id=\"Exercise-2-individual-work\"><a href=\"#Exercise-2-individual-work\" class=\"headerlink\" title=\"Exercise 2 (individual work)\"></a>Exercise 2 (individual work)</h4><ol>\n<li>Write a function that takes one argument.  <ul>\n<li>If the argument is a list, it returns a random item from that list - simulating drawing a person’s name from a hat.  </li>\n<li>If the argument is not a list, it returns the message <code>The argument must be a list.</code></li>\n</ul>\n</li>\n<li>Save the file and run it inside your Python interpreter.</li>\n</ol>\n"},{"title":"Workshop - Part 1","date":"2018-03-25T01:42:48.000Z","_content":"\nThis is the self-guided, self-paced tutorial for part 1. We've included a break in the middle, but remember to take a break to stretch, get some water, or take a moment to relax any time you need to. If at any time you have questions, ask away!\n\nIf you've not yet done so, ensure you've gone through [these setup instructions](/setup) to install and configure Python.\n\n## Using This Tutorial\n\nAs you go through this tutorial, you'll see code samples like this:\n\n`a = \"Hello\"`\n\nThis means that you can type this line in at the `>>>` prompt in your Python shell. Simply enter the line, hit **Return** or **Enter** after every line you enter, and note the output (although sometimes there won't be any!). \n\n**Tip**: Don't copy and paste commands -- type them out. You'll learn far more if you take the time to type everything yourself.\n\n### Math\n\nMath in Python looks a lot like math with a calculator.\n\n#### Addition\n\n```py\n2 + 2\n1.65 + 2.15\n2 + 1.65`\n```\n\n#### Subtraction\n\n```py\n12 - 5\n45.9 - 25.3\n2 - -4\n```\n#### Multiplication\n\nMultiplication uses the `*` (asterisk or star) symbol.\n\n```py\n6 * 7\n5.6 * 4.3\n6 * -5\n```\n\n#### Division\n\nDivision uses the `/` symbol.\n```py\n12/3\n16/5\n10/-5\n```\n**Note**: If you've used Python 2, you'll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division.\n\nTo get *only* the whole number in Python 3, use this syntax:\n```py\n16//5\n50//4\n```\n#### Modulus\n\nThinking back to long division that you may have learned in school, the modulus is the \"remainder\" after perfoming division.  It uses the `%` symbol.\n```py\n16%5\n50%4\n```\n#### Order of Operations\n\nOrder of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.\n\n```py\n5 + 4 * 3\n(5 + 4) * 3\n```\n### Types\n\nThere's a helpful function (more on what a function is later) called `type` that tells you the data type of a given variable. We can check for ourselves that Python considers '1' and '1.0' to be different data types:\n\n```py\ntype(1)\ntype(1.0)\n```\nSo now we've seen two data types: *integers* and *floats*. We'll see more data types as we work through the lesson.\n\nWe also used the term \"function\" without explaining what it is -- we'll talk about functions more in a bit, and write our own, but for now know these things:\n\n* Functions encapsulate some useful bit of work. We save that useful bit of work inside a function so we don't have to type it repeatedly. For example, some nice person decided that being able to determine the type of an object was useful, so he or she put the Python code that figures out an object's type into the function `type()`, and now we all get to use it, instead of having to write it ourselves.\n* Functions are sort of like functions in math class. You can provide input to a function and it produces output. The `type()` function takes data as an input, and produces what type of data the data is (e.g. an integer or a float) as output.\n* To use a function, write the name of the function followed by an open parenthesis, what the function takes as input (we call that input the arguments to the function), and then a close parenthesis.\n\nSo in our case, 'type' is the name of the function, and it takes one argument; in the two examples above, we first give type an argument of 1 and then give it an argument of 1.0.\n\n---\n**Stop for a moment here and try pressing the up arrow on your keyboard a few times. The Python interpreter saves a history of what you've entered, so you can arrow up to old commands and hit Return to re-run them -- just like your computer's command prompt!**\n\n---\n\n### Variables\n\nA lot of work gets done in Python using variables. A variable consists of an identifier (the variable's name) and a value stored in the variable -- any kind of value, not just a number. In the example below, `x` is our identifier and `4` is the value stored:\n```py\ntype(4)\nx = 4\nx\ntype(x)\n2 * x\n```\nGiving a name to something so that you can refer to it by that name later is called assignment. Above, we assigned the name 'x' to 4, and after that we can use x wherever we want to use the number 4.\n\nThe space between the identifier, the equal sign, and its value does not matter. The two variables below are indentical. However, you should be consistent in your code.\n\nx = 5\nx=5\n\nVariables can also be re-assigned.\n```py\nx = 3\nx\nx = 7\nx\n```\nBe careful when you do this though... accidentally re-assigning a variable can cause bugs in your code. \n\nA variable's identifier can contain letters, numbers, and underscores. However, identifiers **must** start with a letter and can not contain any other special characters. Here are some valid variable names:\n```py\nmagic_number = 1500\namountOfFlour = .75\nmy_name = \"Jessica\"\n```\nProjects develop naming conventions, so multi-word identifiers may use underscores (like `magic_number`), or \"camel case\" (like `amountOfFlour`). The most important thing is to **be consistent** within a project, because it makes the code more readable.\n\n### Strings\n\nSo far we've seen two data types: *integers* and *floats*. Another useful data type is a *string*, which is just what Python calls a bunch of characters (like numbers, letters, whitespace, and punctuation) put together between quotation marks:\n```py\n\"Hello\"\n\"Python, I'm your #1 fan!\"\n```\nLike with the numeric data types, we can check the type of a string:\n```py\ntype(\"Hello\")\ntype(1)\ntype(\"1\")\n```\nYou can assign a string value to a variable:\n```py\nmy_car = \"Toyota\"\n```\n#### String Concatenation\n\nYou can concatenate (join) strings together using the `+` sign:\n```py\n\"Hello\" + \"World\"\n\"I drive a \" + my_car\n```\nYou can not concatenate a string with another data type.\n```py\n\"Hello\" + 123\n```\nwill give you a *traceback*:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Can't convert 'int' object to str implicitly\n```\n\nA traceback provides details on what was happening when Python encounters an Exception or Error -- something it doesn't know how to handle. There are many kinds of Python errors, each with descriptive names to help us humans understand what went wrong. In this case we are getting a `TypeError`: we tried to do some operation on a data type that isn't supported for that data type.\n\nPython gives us a helpful error message as part of the `TypeError`:\n\n`\"cannot concatenate 'str' and 'int' objects\"`.\n\nWe can, however, use the `str()` function to convert a number to a string. Like the `type()` function we've been using, `str()` takes one argument as input and outputs it as a string.\n```py\nstr(4)\nstr(5.34)\nstr(\"Ice cream\")\n```\n#### String Length\n\nThere's another useful function that works on strings called `len()`. This returns the length of a string as an integer.\n```py\nlen(\"Hello\")\nlen(\"\")\npresident = \"Obama\"\nlen(president)\n```\n#### Quotes\n\nWe've been using double quotes around your strings, but either double or single quotes are valid in Python:\n```py\n'Hello world'\n\"Hello world\"\n```\nYou do have to be careful about using quotes inside strings:\n```py\n'Let's learn Python together!'\n```\nwill give you another `traceback`, for a `SyntaxError`. When Python evaluates this expression, it starts at the first single quote as the start of the string, and to the next single quote as the end of the string. Then it doesn't know what to do with the rest of the stuff that follows.\n\nThere are a few ways to solve this problem. One is to use double quotes on the outside:\n```py\n\"Let's learn Python together!\"\n```\nor we can *escape* the quote with a backslash:\n```py\n'Let\\'s learn Python together!'\n```\nThe backslash is a special character that tells Python to treat the next character literally, not as part of the syntax or code. Thus, you can do things like this:\n```py\nstr = \"Fernando said, \\\"Python is fun!\\\"\"\nprint(str)\n```\n#### Exercises\n\nLet's take a look at a couple of exercises. Read the following lines of code, but don't execute them. Try to figure out what they will do. Sketch them out with pen and paper if you need to. Then type them in your terminal and execute them to see what happens.\n\n1.\n\n```py\ntotal = 1.5 - 1/2 + ((-2.0/2) - (1.0/2))\nprint(total)\ntype(total)\n```\n\n2.\n\n```py\na = \"quick\"\nb = \"brown\"\nc = \"fox jumps over the lazy dog\"\nprint(\"The \" +  a * 3 + \" \" +  b * 3 + \" \" + c)\n```\n\n3.\n\n```py\nprint(2.0 * 123 + str(2.0) * 123)\n```\n\n---\n**Pause**: Let's take a break.  We've covered a lot!\n\n---\n\n#### Comments and New Lines\n\nBelow is an example of how to use comments and insert new lines:\n\n```py\n# The pound sign is used as a comment character in Python. Programmers\n# use comments to annotate code. Python ignores everything after the\n# comment character on a line.\n\n# Notice how the 'print' command has been inserting a new line at the\n# end of our strings.\nprint(\"The last three mayors of Philadelphia were:\")\n\n# We can insert newlines ourselves, using \"\\n\".\nprint(\"Michael Nutter\\nJohn Street\\nEd Rendell\")\n\n# \"\" Is the empty string. Since the print command will insert a\n# newline at the end, this will print a newline by itself:\nprint(\"\")\n\n# Here's a new kind of printing: you can use triple quotes to create\n# multiline strings.\nprint(\"\"\"Jim Kenney was elected Mayor\nof Philadelphia on November 3, 2015, beating\nRepublican challenger Melissa Murray Bailey.\"\"\")\n\nprint(\"\")\n\n# When you use triple quotes, whitespace is preserved.\nprint(\"\"\"Jim Kenney received\n    84% of the\n        popular vote\"\"\")\n```\n\n### Python Scripts\n\nSo far, we've been running code directly from the shell interpreter (the `>>>` prompt). This is great for testing and exploring short bits of code, but for longer projects we want to save our script in a file and run it from our computer's terminal. \n\n1. Copy and paste the entire code block from the previous section (including the comments) into a new text file and save it as `mayors.py`. Note the `.py` file extension, indicating that this is a Python script.\n2. Open your computer's terminal (not the Python shell) and navigate to the directory where you saved this file. At your computer's command prompt, type:\n\n  `python3 mayors.py`\n\n  to run this script. Study what happens. Edit this file so it displays the last four mayors of Philadelphia (Look it up on [Wikipedia](https://en.wikipedia.org/wiki/List_of_mayors_of_Philadelphia) if you need to!). Save it and run it again.\n\n**CHECKPOINT: Do you know how to do these things?**\n\n: How do you run a Python script from your computer's terminal?\n: How do you comment code in Python?\n: How do you print just a newline?\n: How do you print a multi-line string so that whitespace is preserved?\n\n#### Booleans\n\nSo far, the code we've written has been *unconditional*: no choice is getting made--all of the code runs. Python has another data type called a **boolean** that is helpful for writing code that makes decisions. Booleans hold two values: `True` and `False`.\n\nRe-open the Python console and try typing these:\n```py\nTrue\ntype(True)\nFalse\ntype(False)\ntrue\nfalse\n```\nYou can test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console:\n```py\n0 == 0\n1 == 0\n54 = 42\n```\nUse `==` to test for equality. Recall that `=` is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: `=` is assignment, `==` is comparison.\n\nUse `!=` to test for inequality:\n```py\n\"a\" != \"a\"\n\"a\" != \"A\"\n```\n`<`, `<=`, `>`, and `>=` have the same meaning as in math class. The result of these tests is a boolean:\n```py\n1 > 0\n2 >= 3\n-1 < 0\n.5 <= 1\n```\nYou can check for containment with the `in` keyword, which also results in a boolean:\n```py\n\"H\" in \"Hello\"\n\"X\" in \"Hello\"\n```\nOr check for a lack of containment with `not in`:\n```py\n\"a\" not in \"abcde\"\n\"Chicago\" not in \"Philadelphia Python Workshop\"\n```\n#### Flow Control\n\nNow that we know how to check if something is `True` or `False`, we can use this to make Python execute commands conditionally.\n\n```py\nif 6 > 5:\n     print(\"Six is greater than five!\")\n```\n\nThat was our first multi-line piece of code, and the way to enter it at a Python prompt is a little different. \n\n1. First, type the `if 6 > 5:` part, and hit `enter`. The next line will have `...` as a prompt, instead of the usual `>>>`. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.\n2. Type 4 spaces, type `print(\"Six is greater than five!\")`, and then hit `enter` to end the line. \n3. Finally, hit `enter` again to tell Python you are done with this code block. All together, it will look like this:\n\n```py\n>>> if 6 > 5:\n...      print(\"Six is greater than five!\")\nSix is greater than five!\n```\n\nSo what's going on here? When Python encounters the `if` keyword, it evaluates the expression following the keyword and before the colon. If that expression is `True`, Python executes the code in the indented code block under the `if` line. If that expression is `False`, Python skips over the code block.\n\nIn this case, because 6 really is greater than 5, Python executes the code block under the if statement, and we see \"Six is greater than five!\" printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:\n\n```py\nif 0 > 2:\n     print(\"Zero is greater than two!\")\n```\n\n```py\nif \"banana\" in \"bananarama\":\n    print(\"I miss the 80s.\")\n```\n\n**more choices: if and else**\n\nYou can use the `else` keyword to execute code only when the `if` expression isn't `True`:\n\n```py\nsister_age = 15\nbrother_age = 12\nif sister_age > brother_age:\n    print(\"sister is older\")\nelse:\n    print(\"brother is older\")\n```\n\nLike with `if`, the code block under the `else` statement must be indented so Python knows that it is a part of the `else` block.\n\n**compound conditionals: `and` and `or`**\n\nWe've been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the `and` and `or` keywords. \n\n- If two expressions are joined by an `and`, they both have to be `True` for the overall expression to be `True`. \n- If two expressions are joined by an `or`, as long as at least one is `True`, the overall expression is `True`.\n\nTry typing these out and see what you get:\n```py\n1 > 0 and 1 < 2\n1 < 2 and \"x\" in \"abc\"\n\"a\" in \"hello\" or \"e\" in \"hello\"\n1 <= 0 or \"a\" not in \"abc\"\n```\nGuess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting for tomorrow. Indenting is a crucial part of the syntax of Python.\n\n```py\ntemperature = 32\nif temperature > 60 and temperature < 75:\n    print(\"It's nice and cozy in here!\")\nelse:\n    print(\"Too extreme for me.\")\n```\n\n```py\nhour = 11\nif hour < 7 or hour > 23:\n    print(\"Go away!\")\n    print(\"I'm sleeping!\")\nelse:\n    print(\"Welcome to the cheese shop!\")\n    print(\"Can I interest you in some choice gouda?\")\n```\n\nYou can have as many lines of code as you want in if and else block; just make sure to indent them so Python knows they are a part of the block.\n\n**even more choices: elif and else**\n\nIf you have more than two cases, you can use the `elif` keyword to check more cases. Think of `elif` as Python-speak for else if. You can have as many `elif` cases as you want. Python will go down the code checking each `elif` until it finds a `True` condition or reaches the default `else` block.\n\n```py\nsister_age = 15\nbrother_age = 12\nif sister_age > brother_age:\n    print(\"sister is older\")\nelif sister_age == brother_age:\n    print(\"sister and brother are the same age\")\nelse:\n    print(\"brother is older\")\n```\n\nYou don't have to have an `else` block if you don't need it. That just means there isn't default code to execute when none of the `if` or `elif`conditions are `True`:\n\n```py\ncolor = \"orange\"\nif color == \"green\" or color == \"red\":\n  print(\"Christmas color!\")\nelif color == \"black\" or color == \"orange\":\n  print(\"Halloween color!\")\nelif color == \"pink\":\n  print(\"Valentine's Day color!\")\n```\n\nIf color had been \"purple\", that code wouldn't have printed anything.\n\n*Remember that `=` is for assignment and `==` is for comparison.*\n\n#### Functions\n\nFunctions take input from the user or the application and (usually) produce output (e.g. they return a value). You can then assign a variable to this output. As we've shown in previous sections, you call a function by using its name followed by its arguments in parenthesis.\n\nWhy are functions important?\n\n* They allow tasks to be run quickly and to be automated, i.e. they do some useful bit of work.\n* They let us re-use code without having to type it out each time.\n* They facilitate consistency and reduce the risk of error. \n\nPython has many built in functions. For example:\n\n`length = len(\"Mississippi\")`\n\nExecuting this code assigns the length of the string \"Mississippi\" to the variable length. We can write our own functions to encapsulate bits of useful work so we can reuse them. Here's how you do it:\n\n**Step 1: Write a Function signature**\n\nA function signature tells you how the function will be called. It starts with the keyword `def`, which tells Python that you are defining a function. Then comes a space, the name of your function, an open parenthesis, the comma-separated input parameters for your function, a close parenthesis, and a colon. \n\nHere's what a function signature looks like for a function that takes no arguments:\n\n```py\ndef myFunction():\n    # Your code would go here!\n```\n\nHere's what a function signature looks like for a function that takes one argument called my_string:\n\n`def myFunction(my_string):`\n\nAnd one for a function that takes two arguments:\n\n`def myFunction(myList, myInteger):`\n\nParameters should have names that usefully describe what they are used for in the function. \n\n>Note: We've used the words parameters and arguments seemingly interchangeably to reference the input to functions. The distinction isn't really important right now, but if you're curious: in function signatures the input is called parameters, and when you are calling the function the input is called arguments.\n\n**Step 2: Do useful work inside the function**\n\nUnderneath the function signature is where you do your useful work. Everything inside the function is indented, just like with if/else blocks, so Python knows that it is a part of the function. You can use the variables passed into the function as parameters, just like you can use variables once you define them outside of functions.\n\n```py\ndef add(x, y):\n    result = x + y\n```\n\n**Step 3: Return something**\n\nIf you want to be able to assign a variable to the output of a function, the function has to return that output using the `return` keyword.\n\n```py\ndef add(x, y):\n    result = x + y\n    return result\n```\n\nor, even shorter:\n```py\ndef add(x, y):\n    return x + y\n```\n\nYou can return any Python object: numbers, strings, booleans ... even other functions! Once you execute a return, you are done with the function -- you don't get to do any more work. That means that if you have a function like this:\n\n```py\ndef absoluteValue(number):\n    if number < 0:\n        return number * -1\n    return number\n```\n\nIf `number` is less than 0, you return number * -1 and never even get to the last line of the function. However, if number is greater than or equal to 0, the if expression evaluates to False, so we skip the code in the if block and return number.\n\nWe could have written the above function like this if we wanted. It's the same logic, just more typing:\n\n```py\ndef absoluteValue(number):\n    if number < 0:\n        return number * -1\n    else:\n        return number\n```\n\n**Step 4: Use the function**\n\nOnce you define a function you can use it as many times as you want. You can assign the value it returns to other variables and use those variables in other commands.\n\n```py\ndef add(x, y):\n    return x + y\n```\n\n```py\nresult1 = add(1234, 5678)\nprint(result1)\nresult2 = add(-1.5, .5)\nprint(result2)\nprint(\"The total sum is\", result1 + result2)\n```\n\nFunctions don't have to return anything if you don't want them to. They usually return something because we usually want to be able to assign variables to their output. If your function does not return anything, you won't be able to assign a variable to its output and won't be able to use its output anywhere else.\n\nWhat do you think will happen here? Try it and see:\n\n```py\ndef half_number(x):\n    print(x/2)\n\nhalf1 = half_number(20)\nprint(half1)\n```\n\nThat's it for part 1! Now you can take some time to try some of the [practice exercises](/practice/) and review anything here that seemed challenging. We'll review all this and get deeper into Python during part two's presentation.\n\n# [**Continue to Workshop: Part Two **](/workshop2)","source":"workshop1/index.md","raw":"---\ntitle: Workshop - Part 1\ndate: 2018-03-24 18:42:48\n---\n\nThis is the self-guided, self-paced tutorial for part 1. We've included a break in the middle, but remember to take a break to stretch, get some water, or take a moment to relax any time you need to. If at any time you have questions, ask away!\n\nIf you've not yet done so, ensure you've gone through [these setup instructions](/setup) to install and configure Python.\n\n## Using This Tutorial\n\nAs you go through this tutorial, you'll see code samples like this:\n\n`a = \"Hello\"`\n\nThis means that you can type this line in at the `>>>` prompt in your Python shell. Simply enter the line, hit **Return** or **Enter** after every line you enter, and note the output (although sometimes there won't be any!). \n\n**Tip**: Don't copy and paste commands -- type them out. You'll learn far more if you take the time to type everything yourself.\n\n### Math\n\nMath in Python looks a lot like math with a calculator.\n\n#### Addition\n\n```py\n2 + 2\n1.65 + 2.15\n2 + 1.65`\n```\n\n#### Subtraction\n\n```py\n12 - 5\n45.9 - 25.3\n2 - -4\n```\n#### Multiplication\n\nMultiplication uses the `*` (asterisk or star) symbol.\n\n```py\n6 * 7\n5.6 * 4.3\n6 * -5\n```\n\n#### Division\n\nDivision uses the `/` symbol.\n```py\n12/3\n16/5\n10/-5\n```\n**Note**: If you've used Python 2, you'll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division.\n\nTo get *only* the whole number in Python 3, use this syntax:\n```py\n16//5\n50//4\n```\n#### Modulus\n\nThinking back to long division that you may have learned in school, the modulus is the \"remainder\" after perfoming division.  It uses the `%` symbol.\n```py\n16%5\n50%4\n```\n#### Order of Operations\n\nOrder of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.\n\n```py\n5 + 4 * 3\n(5 + 4) * 3\n```\n### Types\n\nThere's a helpful function (more on what a function is later) called `type` that tells you the data type of a given variable. We can check for ourselves that Python considers '1' and '1.0' to be different data types:\n\n```py\ntype(1)\ntype(1.0)\n```\nSo now we've seen two data types: *integers* and *floats*. We'll see more data types as we work through the lesson.\n\nWe also used the term \"function\" without explaining what it is -- we'll talk about functions more in a bit, and write our own, but for now know these things:\n\n* Functions encapsulate some useful bit of work. We save that useful bit of work inside a function so we don't have to type it repeatedly. For example, some nice person decided that being able to determine the type of an object was useful, so he or she put the Python code that figures out an object's type into the function `type()`, and now we all get to use it, instead of having to write it ourselves.\n* Functions are sort of like functions in math class. You can provide input to a function and it produces output. The `type()` function takes data as an input, and produces what type of data the data is (e.g. an integer or a float) as output.\n* To use a function, write the name of the function followed by an open parenthesis, what the function takes as input (we call that input the arguments to the function), and then a close parenthesis.\n\nSo in our case, 'type' is the name of the function, and it takes one argument; in the two examples above, we first give type an argument of 1 and then give it an argument of 1.0.\n\n---\n**Stop for a moment here and try pressing the up arrow on your keyboard a few times. The Python interpreter saves a history of what you've entered, so you can arrow up to old commands and hit Return to re-run them -- just like your computer's command prompt!**\n\n---\n\n### Variables\n\nA lot of work gets done in Python using variables. A variable consists of an identifier (the variable's name) and a value stored in the variable -- any kind of value, not just a number. In the example below, `x` is our identifier and `4` is the value stored:\n```py\ntype(4)\nx = 4\nx\ntype(x)\n2 * x\n```\nGiving a name to something so that you can refer to it by that name later is called assignment. Above, we assigned the name 'x' to 4, and after that we can use x wherever we want to use the number 4.\n\nThe space between the identifier, the equal sign, and its value does not matter. The two variables below are indentical. However, you should be consistent in your code.\n\nx = 5\nx=5\n\nVariables can also be re-assigned.\n```py\nx = 3\nx\nx = 7\nx\n```\nBe careful when you do this though... accidentally re-assigning a variable can cause bugs in your code. \n\nA variable's identifier can contain letters, numbers, and underscores. However, identifiers **must** start with a letter and can not contain any other special characters. Here are some valid variable names:\n```py\nmagic_number = 1500\namountOfFlour = .75\nmy_name = \"Jessica\"\n```\nProjects develop naming conventions, so multi-word identifiers may use underscores (like `magic_number`), or \"camel case\" (like `amountOfFlour`). The most important thing is to **be consistent** within a project, because it makes the code more readable.\n\n### Strings\n\nSo far we've seen two data types: *integers* and *floats*. Another useful data type is a *string*, which is just what Python calls a bunch of characters (like numbers, letters, whitespace, and punctuation) put together between quotation marks:\n```py\n\"Hello\"\n\"Python, I'm your #1 fan!\"\n```\nLike with the numeric data types, we can check the type of a string:\n```py\ntype(\"Hello\")\ntype(1)\ntype(\"1\")\n```\nYou can assign a string value to a variable:\n```py\nmy_car = \"Toyota\"\n```\n#### String Concatenation\n\nYou can concatenate (join) strings together using the `+` sign:\n```py\n\"Hello\" + \"World\"\n\"I drive a \" + my_car\n```\nYou can not concatenate a string with another data type.\n```py\n\"Hello\" + 123\n```\nwill give you a *traceback*:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Can't convert 'int' object to str implicitly\n```\n\nA traceback provides details on what was happening when Python encounters an Exception or Error -- something it doesn't know how to handle. There are many kinds of Python errors, each with descriptive names to help us humans understand what went wrong. In this case we are getting a `TypeError`: we tried to do some operation on a data type that isn't supported for that data type.\n\nPython gives us a helpful error message as part of the `TypeError`:\n\n`\"cannot concatenate 'str' and 'int' objects\"`.\n\nWe can, however, use the `str()` function to convert a number to a string. Like the `type()` function we've been using, `str()` takes one argument as input and outputs it as a string.\n```py\nstr(4)\nstr(5.34)\nstr(\"Ice cream\")\n```\n#### String Length\n\nThere's another useful function that works on strings called `len()`. This returns the length of a string as an integer.\n```py\nlen(\"Hello\")\nlen(\"\")\npresident = \"Obama\"\nlen(president)\n```\n#### Quotes\n\nWe've been using double quotes around your strings, but either double or single quotes are valid in Python:\n```py\n'Hello world'\n\"Hello world\"\n```\nYou do have to be careful about using quotes inside strings:\n```py\n'Let's learn Python together!'\n```\nwill give you another `traceback`, for a `SyntaxError`. When Python evaluates this expression, it starts at the first single quote as the start of the string, and to the next single quote as the end of the string. Then it doesn't know what to do with the rest of the stuff that follows.\n\nThere are a few ways to solve this problem. One is to use double quotes on the outside:\n```py\n\"Let's learn Python together!\"\n```\nor we can *escape* the quote with a backslash:\n```py\n'Let\\'s learn Python together!'\n```\nThe backslash is a special character that tells Python to treat the next character literally, not as part of the syntax or code. Thus, you can do things like this:\n```py\nstr = \"Fernando said, \\\"Python is fun!\\\"\"\nprint(str)\n```\n#### Exercises\n\nLet's take a look at a couple of exercises. Read the following lines of code, but don't execute them. Try to figure out what they will do. Sketch them out with pen and paper if you need to. Then type them in your terminal and execute them to see what happens.\n\n1.\n\n```py\ntotal = 1.5 - 1/2 + ((-2.0/2) - (1.0/2))\nprint(total)\ntype(total)\n```\n\n2.\n\n```py\na = \"quick\"\nb = \"brown\"\nc = \"fox jumps over the lazy dog\"\nprint(\"The \" +  a * 3 + \" \" +  b * 3 + \" \" + c)\n```\n\n3.\n\n```py\nprint(2.0 * 123 + str(2.0) * 123)\n```\n\n---\n**Pause**: Let's take a break.  We've covered a lot!\n\n---\n\n#### Comments and New Lines\n\nBelow is an example of how to use comments and insert new lines:\n\n```py\n# The pound sign is used as a comment character in Python. Programmers\n# use comments to annotate code. Python ignores everything after the\n# comment character on a line.\n\n# Notice how the 'print' command has been inserting a new line at the\n# end of our strings.\nprint(\"The last three mayors of Philadelphia were:\")\n\n# We can insert newlines ourselves, using \"\\n\".\nprint(\"Michael Nutter\\nJohn Street\\nEd Rendell\")\n\n# \"\" Is the empty string. Since the print command will insert a\n# newline at the end, this will print a newline by itself:\nprint(\"\")\n\n# Here's a new kind of printing: you can use triple quotes to create\n# multiline strings.\nprint(\"\"\"Jim Kenney was elected Mayor\nof Philadelphia on November 3, 2015, beating\nRepublican challenger Melissa Murray Bailey.\"\"\")\n\nprint(\"\")\n\n# When you use triple quotes, whitespace is preserved.\nprint(\"\"\"Jim Kenney received\n    84% of the\n        popular vote\"\"\")\n```\n\n### Python Scripts\n\nSo far, we've been running code directly from the shell interpreter (the `>>>` prompt). This is great for testing and exploring short bits of code, but for longer projects we want to save our script in a file and run it from our computer's terminal. \n\n1. Copy and paste the entire code block from the previous section (including the comments) into a new text file and save it as `mayors.py`. Note the `.py` file extension, indicating that this is a Python script.\n2. Open your computer's terminal (not the Python shell) and navigate to the directory where you saved this file. At your computer's command prompt, type:\n\n  `python3 mayors.py`\n\n  to run this script. Study what happens. Edit this file so it displays the last four mayors of Philadelphia (Look it up on [Wikipedia](https://en.wikipedia.org/wiki/List_of_mayors_of_Philadelphia) if you need to!). Save it and run it again.\n\n**CHECKPOINT: Do you know how to do these things?**\n\n: How do you run a Python script from your computer's terminal?\n: How do you comment code in Python?\n: How do you print just a newline?\n: How do you print a multi-line string so that whitespace is preserved?\n\n#### Booleans\n\nSo far, the code we've written has been *unconditional*: no choice is getting made--all of the code runs. Python has another data type called a **boolean** that is helpful for writing code that makes decisions. Booleans hold two values: `True` and `False`.\n\nRe-open the Python console and try typing these:\n```py\nTrue\ntype(True)\nFalse\ntype(False)\ntrue\nfalse\n```\nYou can test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console:\n```py\n0 == 0\n1 == 0\n54 = 42\n```\nUse `==` to test for equality. Recall that `=` is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: `=` is assignment, `==` is comparison.\n\nUse `!=` to test for inequality:\n```py\n\"a\" != \"a\"\n\"a\" != \"A\"\n```\n`<`, `<=`, `>`, and `>=` have the same meaning as in math class. The result of these tests is a boolean:\n```py\n1 > 0\n2 >= 3\n-1 < 0\n.5 <= 1\n```\nYou can check for containment with the `in` keyword, which also results in a boolean:\n```py\n\"H\" in \"Hello\"\n\"X\" in \"Hello\"\n```\nOr check for a lack of containment with `not in`:\n```py\n\"a\" not in \"abcde\"\n\"Chicago\" not in \"Philadelphia Python Workshop\"\n```\n#### Flow Control\n\nNow that we know how to check if something is `True` or `False`, we can use this to make Python execute commands conditionally.\n\n```py\nif 6 > 5:\n     print(\"Six is greater than five!\")\n```\n\nThat was our first multi-line piece of code, and the way to enter it at a Python prompt is a little different. \n\n1. First, type the `if 6 > 5:` part, and hit `enter`. The next line will have `...` as a prompt, instead of the usual `>>>`. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.\n2. Type 4 spaces, type `print(\"Six is greater than five!\")`, and then hit `enter` to end the line. \n3. Finally, hit `enter` again to tell Python you are done with this code block. All together, it will look like this:\n\n```py\n>>> if 6 > 5:\n...      print(\"Six is greater than five!\")\nSix is greater than five!\n```\n\nSo what's going on here? When Python encounters the `if` keyword, it evaluates the expression following the keyword and before the colon. If that expression is `True`, Python executes the code in the indented code block under the `if` line. If that expression is `False`, Python skips over the code block.\n\nIn this case, because 6 really is greater than 5, Python executes the code block under the if statement, and we see \"Six is greater than five!\" printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:\n\n```py\nif 0 > 2:\n     print(\"Zero is greater than two!\")\n```\n\n```py\nif \"banana\" in \"bananarama\":\n    print(\"I miss the 80s.\")\n```\n\n**more choices: if and else**\n\nYou can use the `else` keyword to execute code only when the `if` expression isn't `True`:\n\n```py\nsister_age = 15\nbrother_age = 12\nif sister_age > brother_age:\n    print(\"sister is older\")\nelse:\n    print(\"brother is older\")\n```\n\nLike with `if`, the code block under the `else` statement must be indented so Python knows that it is a part of the `else` block.\n\n**compound conditionals: `and` and `or`**\n\nWe've been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the `and` and `or` keywords. \n\n- If two expressions are joined by an `and`, they both have to be `True` for the overall expression to be `True`. \n- If two expressions are joined by an `or`, as long as at least one is `True`, the overall expression is `True`.\n\nTry typing these out and see what you get:\n```py\n1 > 0 and 1 < 2\n1 < 2 and \"x\" in \"abc\"\n\"a\" in \"hello\" or \"e\" in \"hello\"\n1 <= 0 or \"a\" not in \"abc\"\n```\nGuess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting for tomorrow. Indenting is a crucial part of the syntax of Python.\n\n```py\ntemperature = 32\nif temperature > 60 and temperature < 75:\n    print(\"It's nice and cozy in here!\")\nelse:\n    print(\"Too extreme for me.\")\n```\n\n```py\nhour = 11\nif hour < 7 or hour > 23:\n    print(\"Go away!\")\n    print(\"I'm sleeping!\")\nelse:\n    print(\"Welcome to the cheese shop!\")\n    print(\"Can I interest you in some choice gouda?\")\n```\n\nYou can have as many lines of code as you want in if and else block; just make sure to indent them so Python knows they are a part of the block.\n\n**even more choices: elif and else**\n\nIf you have more than two cases, you can use the `elif` keyword to check more cases. Think of `elif` as Python-speak for else if. You can have as many `elif` cases as you want. Python will go down the code checking each `elif` until it finds a `True` condition or reaches the default `else` block.\n\n```py\nsister_age = 15\nbrother_age = 12\nif sister_age > brother_age:\n    print(\"sister is older\")\nelif sister_age == brother_age:\n    print(\"sister and brother are the same age\")\nelse:\n    print(\"brother is older\")\n```\n\nYou don't have to have an `else` block if you don't need it. That just means there isn't default code to execute when none of the `if` or `elif`conditions are `True`:\n\n```py\ncolor = \"orange\"\nif color == \"green\" or color == \"red\":\n  print(\"Christmas color!\")\nelif color == \"black\" or color == \"orange\":\n  print(\"Halloween color!\")\nelif color == \"pink\":\n  print(\"Valentine's Day color!\")\n```\n\nIf color had been \"purple\", that code wouldn't have printed anything.\n\n*Remember that `=` is for assignment and `==` is for comparison.*\n\n#### Functions\n\nFunctions take input from the user or the application and (usually) produce output (e.g. they return a value). You can then assign a variable to this output. As we've shown in previous sections, you call a function by using its name followed by its arguments in parenthesis.\n\nWhy are functions important?\n\n* They allow tasks to be run quickly and to be automated, i.e. they do some useful bit of work.\n* They let us re-use code without having to type it out each time.\n* They facilitate consistency and reduce the risk of error. \n\nPython has many built in functions. For example:\n\n`length = len(\"Mississippi\")`\n\nExecuting this code assigns the length of the string \"Mississippi\" to the variable length. We can write our own functions to encapsulate bits of useful work so we can reuse them. Here's how you do it:\n\n**Step 1: Write a Function signature**\n\nA function signature tells you how the function will be called. It starts with the keyword `def`, which tells Python that you are defining a function. Then comes a space, the name of your function, an open parenthesis, the comma-separated input parameters for your function, a close parenthesis, and a colon. \n\nHere's what a function signature looks like for a function that takes no arguments:\n\n```py\ndef myFunction():\n    # Your code would go here!\n```\n\nHere's what a function signature looks like for a function that takes one argument called my_string:\n\n`def myFunction(my_string):`\n\nAnd one for a function that takes two arguments:\n\n`def myFunction(myList, myInteger):`\n\nParameters should have names that usefully describe what they are used for in the function. \n\n>Note: We've used the words parameters and arguments seemingly interchangeably to reference the input to functions. The distinction isn't really important right now, but if you're curious: in function signatures the input is called parameters, and when you are calling the function the input is called arguments.\n\n**Step 2: Do useful work inside the function**\n\nUnderneath the function signature is where you do your useful work. Everything inside the function is indented, just like with if/else blocks, so Python knows that it is a part of the function. You can use the variables passed into the function as parameters, just like you can use variables once you define them outside of functions.\n\n```py\ndef add(x, y):\n    result = x + y\n```\n\n**Step 3: Return something**\n\nIf you want to be able to assign a variable to the output of a function, the function has to return that output using the `return` keyword.\n\n```py\ndef add(x, y):\n    result = x + y\n    return result\n```\n\nor, even shorter:\n```py\ndef add(x, y):\n    return x + y\n```\n\nYou can return any Python object: numbers, strings, booleans ... even other functions! Once you execute a return, you are done with the function -- you don't get to do any more work. That means that if you have a function like this:\n\n```py\ndef absoluteValue(number):\n    if number < 0:\n        return number * -1\n    return number\n```\n\nIf `number` is less than 0, you return number * -1 and never even get to the last line of the function. However, if number is greater than or equal to 0, the if expression evaluates to False, so we skip the code in the if block and return number.\n\nWe could have written the above function like this if we wanted. It's the same logic, just more typing:\n\n```py\ndef absoluteValue(number):\n    if number < 0:\n        return number * -1\n    else:\n        return number\n```\n\n**Step 4: Use the function**\n\nOnce you define a function you can use it as many times as you want. You can assign the value it returns to other variables and use those variables in other commands.\n\n```py\ndef add(x, y):\n    return x + y\n```\n\n```py\nresult1 = add(1234, 5678)\nprint(result1)\nresult2 = add(-1.5, .5)\nprint(result2)\nprint(\"The total sum is\", result1 + result2)\n```\n\nFunctions don't have to return anything if you don't want them to. They usually return something because we usually want to be able to assign variables to their output. If your function does not return anything, you won't be able to assign a variable to its output and won't be able to use its output anywhere else.\n\nWhat do you think will happen here? Try it and see:\n\n```py\ndef half_number(x):\n    print(x/2)\n\nhalf1 = half_number(20)\nprint(half1)\n```\n\nThat's it for part 1! Now you can take some time to try some of the [practice exercises](/practice/) and review anything here that seemed challenging. We'll review all this and get deeper into Python during part two's presentation.\n\n# [**Continue to Workshop: Part Two **](/workshop2)","updated":"2018-06-01T21:37:57.268Z","path":"workshop1/index.html","comments":1,"layout":"page","_id":"cjhwius0h000t75j53tongea7","content":"<p>This is the self-guided, self-paced tutorial for part 1. We’ve included a break in the middle, but remember to take a break to stretch, get some water, or take a moment to relax any time you need to. If at any time you have questions, ask away!</p>\n<p>If you’ve not yet done so, ensure you’ve gone through <a href=\"/setup\">these setup instructions</a> to install and configure Python.</p>\n<h2 id=\"Using-This-Tutorial\"><a href=\"#Using-This-Tutorial\" class=\"headerlink\" title=\"Using This Tutorial\"></a>Using This Tutorial</h2><p>As you go through this tutorial, you’ll see code samples like this:</p>\n<p><code>a = &quot;Hello&quot;</code></p>\n<p>This means that you can type this line in at the <code>&gt;&gt;&gt;</code> prompt in your Python shell. Simply enter the line, hit <strong>Return</strong> or <strong>Enter</strong> after every line you enter, and note the output (although sometimes there won’t be any!). </p>\n<p><strong>Tip</strong>: Don’t copy and paste commands – type them out. You’ll learn far more if you take the time to type everything yourself.</p>\n<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><p>Math in Python looks a lot like math with a calculator.</p>\n<h4 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1.65</span> + <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">1.65</span>`</span><br></pre></td></tr></table></figure>\n<h4 id=\"Subtraction\"><a href=\"#Subtraction\" class=\"headerlink\" title=\"Subtraction\"></a>Subtraction</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span> - <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">45.9</span> - <span class=\"number\">25.3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Multiplication\"><a href=\"#Multiplication\" class=\"headerlink\" title=\"Multiplication\"></a>Multiplication</h4><p>Multiplication uses the <code>*</code> (asterisk or star) symbol.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> * <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5.6</span> * <span class=\"number\">4.3</span></span><br><span class=\"line\"><span class=\"number\">6</span> * <span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Division\"><a href=\"#Division\" class=\"headerlink\" title=\"Division\"></a>Division</h4><p>Division uses the <code>/</code> symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">10</span>/<span class=\"number\">-5</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Note</strong>: If you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division.</p>\n<p>To get <em>only</em> the whole number in Python 3, use this syntax:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span>//<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">50</span>//<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Modulus\"><a href=\"#Modulus\" class=\"headerlink\" title=\"Modulus\"></a>Modulus</h4><p>Thinking back to long division that you may have learned in school, the modulus is the “remainder” after perfoming division.  It uses the <code>%</code> symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span>%<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">50</span>%<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Order-of-Operations\"><a href=\"#Order-of-Operations\" class=\"headerlink\" title=\"Order of Operations\"></a>Order of Operations</h4><p>Order of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> + <span class=\"number\">4</span> * <span class=\"number\">3</span></span><br><span class=\"line\">(<span class=\"number\">5</span> + <span class=\"number\">4</span>) * <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><p>There’s a helpful function (more on what a function is later) called <code>type</code> that tells you the data type of a given variable. We can check for ourselves that Python considers ‘1’ and ‘1.0’ to be different data types:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">1</span>)</span><br><span class=\"line\">type(<span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<p>So now we’ve seen two data types: <em>integers</em> and <em>floats</em>. We’ll see more data types as we work through the lesson.</p>\n<p>We also used the term “function” without explaining what it is – we’ll talk about functions more in a bit, and write our own, but for now know these things:</p>\n<ul>\n<li>Functions encapsulate some useful bit of work. We save that useful bit of work inside a function so we don’t have to type it repeatedly. For example, some nice person decided that being able to determine the type of an object was useful, so he or she put the Python code that figures out an object’s type into the function <code>type()</code>, and now we all get to use it, instead of having to write it ourselves.</li>\n<li>Functions are sort of like functions in math class. You can provide input to a function and it produces output. The <code>type()</code> function takes data as an input, and produces what type of data the data is (e.g. an integer or a float) as output.</li>\n<li>To use a function, write the name of the function followed by an open parenthesis, what the function takes as input (we call that input the arguments to the function), and then a close parenthesis.</li>\n</ul>\n<p>So in our case, ‘type’ is the name of the function, and it takes one argument; in the two examples above, we first give type an argument of 1 and then give it an argument of 1.0.</p>\n<hr>\n<p><strong>Stop for a moment here and try pressing the up arrow on your keyboard a few times. The Python interpreter saves a history of what you’ve entered, so you can arrow up to old commands and hit Return to re-run them – just like your computer’s command prompt!</strong></p>\n<hr>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>A lot of work gets done in Python using variables. A variable consists of an identifier (the variable’s name) and a value stored in the variable – any kind of value, not just a number. In the example below, <code>x</code> is our identifier and <code>4</code> is the value stored:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">4</span>)</span><br><span class=\"line\">x = <span class=\"number\">4</span></span><br><span class=\"line\">x</span><br><span class=\"line\">type(x)</span><br><span class=\"line\"><span class=\"number\">2</span> * x</span><br></pre></td></tr></table></figure></p>\n<p>Giving a name to something so that you can refer to it by that name later is called assignment. Above, we assigned the name ‘x’ to 4, and after that we can use x wherever we want to use the number 4.</p>\n<p>The space between the identifier, the equal sign, and its value does not matter. The two variables below are indentical. However, you should be consistent in your code.</p>\n<p>x = 5<br>x=5</p>\n<p>Variables can also be re-assigned.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span></span><br><span class=\"line\">x</span><br><span class=\"line\">x = <span class=\"number\">7</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure></p>\n<p>Be careful when you do this though… accidentally re-assigning a variable can cause bugs in your code. </p>\n<p>A variable’s identifier can contain letters, numbers, and underscores. However, identifiers <strong>must</strong> start with a letter and can not contain any other special characters. Here are some valid variable names:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic_number = <span class=\"number\">1500</span></span><br><span class=\"line\">amountOfFlour = <span class=\"number\">.75</span></span><br><span class=\"line\">my_name = <span class=\"string\">\"Jessica\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Projects develop naming conventions, so multi-word identifiers may use underscores (like <code>magic_number</code>), or “camel case” (like <code>amountOfFlour</code>). The most important thing is to <strong>be consistent</strong> within a project, because it makes the code more readable.</p>\n<h3 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h3><p>So far we’ve seen two data types: <em>integers</em> and <em>floats</em>. Another useful data type is a <em>string</em>, which is just what Python calls a bunch of characters (like numbers, letters, whitespace, and punctuation) put together between quotation marks:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">\"Python, I'm your #1 fan!\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Like with the numeric data types, we can check the type of a string:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">type(<span class=\"number\">1</span>)</span><br><span class=\"line\">type(<span class=\"string\">\"1\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>You can assign a string value to a variable:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_car = <span class=\"string\">\"Toyota\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"String-Concatenation\"><a href=\"#String-Concatenation\" class=\"headerlink\" title=\"String Concatenation\"></a>String Concatenation</h4><p>You can concatenate (join) strings together using the <code>+</code> sign:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span> + <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"string\">\"I drive a \"</span> + my_car</span><br></pre></td></tr></table></figure></p>\n<p>You can not concatenate a string with another data type.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span> + <span class=\"number\">123</span></span><br></pre></td></tr></table></figure></p>\n<p>will give you a <em>traceback</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">TypeError: Can&apos;t convert &apos;int&apos; object to str implicitly</span><br></pre></td></tr></table></figure>\n<p>A traceback provides details on what was happening when Python encounters an Exception or Error – something it doesn’t know how to handle. There are many kinds of Python errors, each with descriptive names to help us humans understand what went wrong. In this case we are getting a <code>TypeError</code>: we tried to do some operation on a data type that isn’t supported for that data type.</p>\n<p>Python gives us a helpful error message as part of the <code>TypeError</code>:</p>\n<p><code>&quot;cannot concatenate &#39;str&#39; and &#39;int&#39; objects&quot;</code>.</p>\n<p>We can, however, use the <code>str()</code> function to convert a number to a string. Like the <code>type()</code> function we’ve been using, <code>str()</code> takes one argument as input and outputs it as a string.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str(<span class=\"number\">4</span>)</span><br><span class=\"line\">str(<span class=\"number\">5.34</span>)</span><br><span class=\"line\">str(<span class=\"string\">\"Ice cream\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"String-Length\"><a href=\"#String-Length\" class=\"headerlink\" title=\"String Length\"></a>String Length</h4><p>There’s another useful function that works on strings called <code>len()</code>. This returns the length of a string as an integer.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">len(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">president = <span class=\"string\">\"Obama\"</span></span><br><span class=\"line\">len(president)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Quotes\"><a href=\"#Quotes\" class=\"headerlink\" title=\"Quotes\"></a>Quotes</h4><p>We’ve been using double quotes around your strings, but either double or single quotes are valid in Python:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Hello world'</span></span><br><span class=\"line\"><span class=\"string\">\"Hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You do have to be careful about using quotes inside strings:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Let'</span>s learn Python together!<span class=\"string\">'</span></span><br></pre></td></tr></table></figure></p>\n<p>will give you another <code>traceback</code>, for a <code>SyntaxError</code>. When Python evaluates this expression, it starts at the first single quote as the start of the string, and to the next single quote as the end of the string. Then it doesn’t know what to do with the rest of the stuff that follows.</p>\n<p>There are a few ways to solve this problem. One is to use double quotes on the outside:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Let's learn Python together!\"</span></span><br></pre></td></tr></table></figure></p>\n<p>or we can <em>escape</em> the quote with a backslash:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Let\\'s learn Python together!'</span></span><br></pre></td></tr></table></figure></p>\n<p>The backslash is a special character that tells Python to treat the next character literally, not as part of the syntax or code. Thus, you can do things like this:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"Fernando said, \\\"Python is fun!\\\"\"</span></span><br><span class=\"line\">print(str)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Exercises\"><a href=\"#Exercises\" class=\"headerlink\" title=\"Exercises\"></a>Exercises</h4><p>Let’s take a look at a couple of exercises. Read the following lines of code, but don’t execute them. Try to figure out what they will do. Sketch them out with pen and paper if you need to. Then type them in your terminal and execute them to see what happens.</p>\n<p>1.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = <span class=\"number\">1.5</span> - <span class=\"number\">1</span>/<span class=\"number\">2</span> + ((<span class=\"number\">-2.0</span>/<span class=\"number\">2</span>) - (<span class=\"number\">1.0</span>/<span class=\"number\">2</span>))</span><br><span class=\"line\">print(total)</span><br><span class=\"line\">type(total)</span><br></pre></td></tr></table></figure>\n<p>2.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">\"quick\"</span></span><br><span class=\"line\">b = <span class=\"string\">\"brown\"</span></span><br><span class=\"line\">c = <span class=\"string\">\"fox jumps over the lazy dog\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"The \"</span> +  a * <span class=\"number\">3</span> + <span class=\"string\">\" \"</span> +  b * <span class=\"number\">3</span> + <span class=\"string\">\" \"</span> + c)</span><br></pre></td></tr></table></figure>\n<p>3.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2.0</span> * <span class=\"number\">123</span> + str(<span class=\"number\">2.0</span>) * <span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>Pause</strong>: Let’s take a break.  We’ve covered a lot!</p>\n<hr>\n<h4 id=\"Comments-and-New-Lines\"><a href=\"#Comments-and-New-Lines\" class=\"headerlink\" title=\"Comments and New Lines\"></a>Comments and New Lines</h4><p>Below is an example of how to use comments and insert new lines:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The pound sign is used as a comment character in Python. Programmers</span></span><br><span class=\"line\"><span class=\"comment\"># use comments to annotate code. Python ignores everything after the</span></span><br><span class=\"line\"><span class=\"comment\"># comment character on a line.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Notice how the 'print' command has been inserting a new line at the</span></span><br><span class=\"line\"><span class=\"comment\"># end of our strings.</span></span><br><span class=\"line\">print(<span class=\"string\">\"The last three mayors of Philadelphia were:\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># We can insert newlines ourselves, using \"\\n\".</span></span><br><span class=\"line\">print(<span class=\"string\">\"Michael Nutter\\nJohn Street\\nEd Rendell\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># \"\" Is the empty string. Since the print command will insert a</span></span><br><span class=\"line\"><span class=\"comment\"># newline at the end, this will print a newline by itself:</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Here's a new kind of printing: you can use triple quotes to create</span></span><br><span class=\"line\"><span class=\"comment\"># multiline strings.</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"\"Jim Kenney was elected Mayor</span></span><br><span class=\"line\"><span class=\"string\">of Philadelphia on November 3, 2015, beating</span></span><br><span class=\"line\"><span class=\"string\">Republican challenger Melissa Murray Bailey.\"\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When you use triple quotes, whitespace is preserved.</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"\"Jim Kenney received</span></span><br><span class=\"line\"><span class=\"string\">    84% of the</span></span><br><span class=\"line\"><span class=\"string\">        popular vote\"\"\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-Scripts\"><a href=\"#Python-Scripts\" class=\"headerlink\" title=\"Python Scripts\"></a>Python Scripts</h3><p>So far, we’ve been running code directly from the shell interpreter (the <code>&gt;&gt;&gt;</code> prompt). This is great for testing and exploring short bits of code, but for longer projects we want to save our script in a file and run it from our computer’s terminal. </p>\n<ol>\n<li>Copy and paste the entire code block from the previous section (including the comments) into a new text file and save it as <code>mayors.py</code>. Note the <code>.py</code> file extension, indicating that this is a Python script.</li>\n<li><p>Open your computer’s terminal (not the Python shell) and navigate to the directory where you saved this file. At your computer’s command prompt, type:</p>\n<p><code>python3 mayors.py</code></p>\n<p>to run this script. Study what happens. Edit this file so it displays the last four mayors of Philadelphia (Look it up on <a href=\"https://en.wikipedia.org/wiki/List_of_mayors_of_Philadelphia\" target=\"_blank\" rel=\"noopener\">Wikipedia</a> if you need to!). Save it and run it again.</p>\n</li>\n</ol>\n<p><strong>CHECKPOINT: Do you know how to do these things?</strong></p>\n<p>: How do you run a Python script from your computer’s terminal?<br>: How do you comment code in Python?<br>: How do you print just a newline?<br>: How do you print a multi-line string so that whitespace is preserved?</p>\n<h4 id=\"Booleans\"><a href=\"#Booleans\" class=\"headerlink\" title=\"Booleans\"></a>Booleans</h4><p>So far, the code we’ve written has been <em>unconditional</em>: no choice is getting made–all of the code runs. Python has another data type called a <strong>boolean</strong> that is helpful for writing code that makes decisions. Booleans hold two values: <code>True</code> and <code>False</code>.</p>\n<p>Re-open the Python console and try typing these:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\">type(<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">type(<span class=\"keyword\">False</span>)</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure></p>\n<p>You can test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">54</span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure></p>\n<p>Use <code>==</code> to test for equality. Recall that <code>=</code> is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: <code>=</code> is assignment, <code>==</code> is comparison.</p>\n<p>Use <code>!=</code> to test for inequality:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"a\"</span> != <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"string\">\"a\"</span> != <span class=\"string\">\"A\"</span></span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> have the same meaning as in math class. The result of these tests is a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span> &gt;= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">-1</span> &lt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">.5</span> &lt;= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>You can check for containment with the <code>in</code> keyword, which also results in a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"H\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">\"X\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or check for a lack of containment with <code>not in</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abcde\"</span></span><br><span class=\"line\"><span class=\"string\">\"Chicago\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Philadelphia Python Workshop\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Flow-Control\"><a href=\"#Flow-Control\" class=\"headerlink\" title=\"Flow Control\"></a>Flow Control</h4><p>Now that we know how to check if something is <code>True</code> or <code>False</code>, we can use this to make Python execute commands conditionally.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>That was our first multi-line piece of code, and the way to enter it at a Python prompt is a little different. </p>\n<ol>\n<li>First, type the <code>if 6 &gt; 5:</code> part, and hit <code>enter</code>. The next line will have <code>...</code> as a prompt, instead of the usual <code>&gt;&gt;&gt;</code>. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.</li>\n<li>Type 4 spaces, type <code>print(&quot;Six is greater than five!&quot;)</code>, and then hit <code>enter</code> to end the line. </li>\n<li>Finally, hit <code>enter</code> again to tell Python you are done with this code block. All together, it will look like this:</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br><span class=\"line\">Six <span class=\"keyword\">is</span> greater than five!</span><br></pre></td></tr></table></figure>\n<p>So what’s going on here? When Python encounters the <code>if</code> keyword, it evaluates the expression following the keyword and before the colon. If that expression is <code>True</code>, Python executes the code in the indented code block under the <code>if</code> line. If that expression is <code>False</code>, Python skips over the code block.</p>\n<p>In this case, because 6 really is greater than 5, Python executes the code block under the if statement, and we see “Six is greater than five!” printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Zero is greater than two!\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">\"banana\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"bananarama\"</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"I miss the 80s.\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>more choices: if and else</strong></p>\n<p>You can use the <code>else</code> keyword to execute code only when the <code>if</code> expression isn’t <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sister_age = <span class=\"number\">15</span></span><br><span class=\"line\">brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Like with <code>if</code>, the code block under the <code>else</code> statement must be indented so Python knows that it is a part of the <code>else</code> block.</p>\n<p><strong>compound conditionals: <code>and</code> and <code>or</code></strong></p>\n<p>We’ve been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the <code>and</code> and <code>or</code> keywords. </p>\n<ul>\n<li>If two expressions are joined by an <code>and</code>, they both have to be <code>True</code> for the overall expression to be <code>True</code>. </li>\n<li>If two expressions are joined by an <code>or</code>, as long as at least one is <code>True</code>, the overall expression is <code>True</code>.</li>\n</ul>\n<p>Try typing these out and see what you get:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"e\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Guess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting for tomorrow. Indenting is a crucial part of the syntax of Python.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temperature = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> temperature &lt; <span class=\"number\">75</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"It's nice and cozy in here!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Too extreme for me.\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hour = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> hour &lt; <span class=\"number\">7</span> <span class=\"keyword\">or</span> hour &gt; <span class=\"number\">23</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Go away!\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"I'm sleeping!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Welcome to the cheese shop!\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Can I interest you in some choice gouda?\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You can have as many lines of code as you want in if and else block; just make sure to indent them so Python knows they are a part of the block.</p>\n<p><strong>even more choices: elif and else</strong></p>\n<p>If you have more than two cases, you can use the <code>elif</code> keyword to check more cases. Think of <code>elif</code> as Python-speak for else if. You can have as many <code>elif</code> cases as you want. Python will go down the code checking each <code>elif</code> until it finds a <code>True</code> condition or reaches the default <code>else</code> block.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sister_age = <span class=\"number\">15</span></span><br><span class=\"line\">brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> sister_age == brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister and brother are the same age\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You don’t have to have an <code>else</code> block if you don’t need it. That just means there isn’t default code to execute when none of the <code>if</code> or <code>elif</code>conditions are <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">color = <span class=\"string\">\"orange\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> color == <span class=\"string\">\"green\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Christmas color!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> color == <span class=\"string\">\"black\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"orange\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Halloween color!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> color == <span class=\"string\">\"pink\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Valentine's Day color!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>If color had been “purple”, that code wouldn’t have printed anything.</p>\n<p><em>Remember that <code>=</code> is for assignment and <code>==</code> is for comparison.</em></p>\n<h4 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h4><p>Functions take input from the user or the application and (usually) produce output (e.g. they return a value). You can then assign a variable to this output. As we’ve shown in previous sections, you call a function by using its name followed by its arguments in parenthesis.</p>\n<p>Why are functions important?</p>\n<ul>\n<li>They allow tasks to be run quickly and to be automated, i.e. they do some useful bit of work.</li>\n<li>They let us re-use code without having to type it out each time.</li>\n<li>They facilitate consistency and reduce the risk of error. </li>\n</ul>\n<p>Python has many built in functions. For example:</p>\n<p><code>length = len(&quot;Mississippi&quot;)</code></p>\n<p>Executing this code assigns the length of the string “Mississippi” to the variable length. We can write our own functions to encapsulate bits of useful work so we can reuse them. Here’s how you do it:</p>\n<p><strong>Step 1: Write a Function signature</strong></p>\n<p>A function signature tells you how the function will be called. It starts with the keyword <code>def</code>, which tells Python that you are defining a function. Then comes a space, the name of your function, an open parenthesis, the comma-separated input parameters for your function, a close parenthesis, and a colon. </p>\n<p>Here’s what a function signature looks like for a function that takes no arguments:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFunction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Your code would go here!</span></span><br></pre></td></tr></table></figure>\n<p>Here’s what a function signature looks like for a function that takes one argument called my_string:</p>\n<p><code>def myFunction(my_string):</code></p>\n<p>And one for a function that takes two arguments:</p>\n<p><code>def myFunction(myList, myInteger):</code></p>\n<p>Parameters should have names that usefully describe what they are used for in the function. </p>\n<blockquote>\n<p>Note: We’ve used the words parameters and arguments seemingly interchangeably to reference the input to functions. The distinction isn’t really important right now, but if you’re curious: in function signatures the input is called parameters, and when you are calling the function the input is called arguments.</p>\n</blockquote>\n<p><strong>Step 2: Do useful work inside the function</strong></p>\n<p>Underneath the function signature is where you do your useful work. Everything inside the function is indented, just like with if/else blocks, so Python knows that it is a part of the function. You can use the variables passed into the function as parameters, just like you can use variables once you define them outside of functions.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    result = x + y</span><br></pre></td></tr></table></figure>\n<p><strong>Step 3: Return something</strong></p>\n<p>If you want to be able to assign a variable to the output of a function, the function has to return that output using the <code>return</code> keyword.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>or, even shorter:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure></p>\n<p>You can return any Python object: numbers, strings, booleans … even other functions! Once you execute a return, you are done with the function – you don’t get to do any more work. That means that if you have a function like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">absoluteValue</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number * <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number</span><br></pre></td></tr></table></figure>\n<p>If <code>number</code> is less than 0, you return number * -1 and never even get to the last line of the function. However, if number is greater than or equal to 0, the if expression evaluates to False, so we skip the code in the if block and return number.</p>\n<p>We could have written the above function like this if we wanted. It’s the same logic, just more typing:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">absoluteValue</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number * <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number</span><br></pre></td></tr></table></figure>\n<p><strong>Step 4: Use the function</strong></p>\n<p>Once you define a function you can use it as many times as you want. You can assign the value it returns to other variables and use those variables in other commands.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result1 = add(<span class=\"number\">1234</span>, <span class=\"number\">5678</span>)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">result2 = add(<span class=\"number\">-1.5</span>, <span class=\"number\">.5</span>)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\">print(<span class=\"string\">\"The total sum is\"</span>, result1 + result2)</span><br></pre></td></tr></table></figure>\n<p>Functions don’t have to return anything if you don’t want them to. They usually return something because we usually want to be able to assign variables to their output. If your function does not return anything, you won’t be able to assign a variable to its output and won’t be able to use its output anywhere else.</p>\n<p>What do you think will happen here? Try it and see:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">half_number</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    print(x/<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">half1 = half_number(<span class=\"number\">20</span>)</span><br><span class=\"line\">print(half1)</span><br></pre></td></tr></table></figure>\n<p>That’s it for part 1! Now you can take some time to try some of the <a href=\"/practice/\">practice exercises</a> and review anything here that seemed challenging. We’ll review all this and get deeper into Python during part two’s presentation.</p>\n<h1 id=\"Continue-to-Workshop-Part-Two\"><a href=\"#Continue-to-Workshop-Part-Two\" class=\"headerlink\" title=\"Continue to Workshop: Part Two \"></a><a href=\"/workshop2\"><strong>Continue to Workshop: Part Two </strong></a></h1>","site":{"data":{}},"excerpt":"","more":"<p>This is the self-guided, self-paced tutorial for part 1. We’ve included a break in the middle, but remember to take a break to stretch, get some water, or take a moment to relax any time you need to. If at any time you have questions, ask away!</p>\n<p>If you’ve not yet done so, ensure you’ve gone through <a href=\"/setup\">these setup instructions</a> to install and configure Python.</p>\n<h2 id=\"Using-This-Tutorial\"><a href=\"#Using-This-Tutorial\" class=\"headerlink\" title=\"Using This Tutorial\"></a>Using This Tutorial</h2><p>As you go through this tutorial, you’ll see code samples like this:</p>\n<p><code>a = &quot;Hello&quot;</code></p>\n<p>This means that you can type this line in at the <code>&gt;&gt;&gt;</code> prompt in your Python shell. Simply enter the line, hit <strong>Return</strong> or <strong>Enter</strong> after every line you enter, and note the output (although sometimes there won’t be any!). </p>\n<p><strong>Tip</strong>: Don’t copy and paste commands – type them out. You’ll learn far more if you take the time to type everything yourself.</p>\n<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><p>Math in Python looks a lot like math with a calculator.</p>\n<h4 id=\"Addition\"><a href=\"#Addition\" class=\"headerlink\" title=\"Addition\"></a>Addition</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1.65</span> + <span class=\"number\">2.15</span></span><br><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">1.65</span>`</span><br></pre></td></tr></table></figure>\n<h4 id=\"Subtraction\"><a href=\"#Subtraction\" class=\"headerlink\" title=\"Subtraction\"></a>Subtraction</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span> - <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">45.9</span> - <span class=\"number\">25.3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - <span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Multiplication\"><a href=\"#Multiplication\" class=\"headerlink\" title=\"Multiplication\"></a>Multiplication</h4><p>Multiplication uses the <code>*</code> (asterisk or star) symbol.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> * <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5.6</span> * <span class=\"number\">4.3</span></span><br><span class=\"line\"><span class=\"number\">6</span> * <span class=\"number\">-5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Division\"><a href=\"#Division\" class=\"headerlink\" title=\"Division\"></a>Division</h4><p>Division uses the <code>/</code> symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">12</span>/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">16</span>/<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">10</span>/<span class=\"number\">-5</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Note</strong>: If you’ve used Python 2, you’ll see that division works differently in Python 3. Python 2 uses floor division for integers, meaning it will return only the whole number part of the answer. Python 3 performs true division, returning the real or true value of the division.</p>\n<p>To get <em>only</em> the whole number in Python 3, use this syntax:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span>//<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">50</span>//<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Modulus\"><a href=\"#Modulus\" class=\"headerlink\" title=\"Modulus\"></a>Modulus</h4><p>Thinking back to long division that you may have learned in school, the modulus is the “remainder” after perfoming division.  It uses the <code>%</code> symbol.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">16</span>%<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">50</span>%<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Order-of-Operations\"><a href=\"#Order-of-Operations\" class=\"headerlink\" title=\"Order of Operations\"></a>Order of Operations</h4><p>Order of operations works just like you learned in math class - Parentheses, Exponents, Multiplication, Division, Addition, Subtraction.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> + <span class=\"number\">4</span> * <span class=\"number\">3</span></span><br><span class=\"line\">(<span class=\"number\">5</span> + <span class=\"number\">4</span>) * <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><p>There’s a helpful function (more on what a function is later) called <code>type</code> that tells you the data type of a given variable. We can check for ourselves that Python considers ‘1’ and ‘1.0’ to be different data types:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">1</span>)</span><br><span class=\"line\">type(<span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<p>So now we’ve seen two data types: <em>integers</em> and <em>floats</em>. We’ll see more data types as we work through the lesson.</p>\n<p>We also used the term “function” without explaining what it is – we’ll talk about functions more in a bit, and write our own, but for now know these things:</p>\n<ul>\n<li>Functions encapsulate some useful bit of work. We save that useful bit of work inside a function so we don’t have to type it repeatedly. For example, some nice person decided that being able to determine the type of an object was useful, so he or she put the Python code that figures out an object’s type into the function <code>type()</code>, and now we all get to use it, instead of having to write it ourselves.</li>\n<li>Functions are sort of like functions in math class. You can provide input to a function and it produces output. The <code>type()</code> function takes data as an input, and produces what type of data the data is (e.g. an integer or a float) as output.</li>\n<li>To use a function, write the name of the function followed by an open parenthesis, what the function takes as input (we call that input the arguments to the function), and then a close parenthesis.</li>\n</ul>\n<p>So in our case, ‘type’ is the name of the function, and it takes one argument; in the two examples above, we first give type an argument of 1 and then give it an argument of 1.0.</p>\n<hr>\n<p><strong>Stop for a moment here and try pressing the up arrow on your keyboard a few times. The Python interpreter saves a history of what you’ve entered, so you can arrow up to old commands and hit Return to re-run them – just like your computer’s command prompt!</strong></p>\n<hr>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>A lot of work gets done in Python using variables. A variable consists of an identifier (the variable’s name) and a value stored in the variable – any kind of value, not just a number. In the example below, <code>x</code> is our identifier and <code>4</code> is the value stored:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">4</span>)</span><br><span class=\"line\">x = <span class=\"number\">4</span></span><br><span class=\"line\">x</span><br><span class=\"line\">type(x)</span><br><span class=\"line\"><span class=\"number\">2</span> * x</span><br></pre></td></tr></table></figure></p>\n<p>Giving a name to something so that you can refer to it by that name later is called assignment. Above, we assigned the name ‘x’ to 4, and after that we can use x wherever we want to use the number 4.</p>\n<p>The space between the identifier, the equal sign, and its value does not matter. The two variables below are indentical. However, you should be consistent in your code.</p>\n<p>x = 5<br>x=5</p>\n<p>Variables can also be re-assigned.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">3</span></span><br><span class=\"line\">x</span><br><span class=\"line\">x = <span class=\"number\">7</span></span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure></p>\n<p>Be careful when you do this though… accidentally re-assigning a variable can cause bugs in your code. </p>\n<p>A variable’s identifier can contain letters, numbers, and underscores. However, identifiers <strong>must</strong> start with a letter and can not contain any other special characters. Here are some valid variable names:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">magic_number = <span class=\"number\">1500</span></span><br><span class=\"line\">amountOfFlour = <span class=\"number\">.75</span></span><br><span class=\"line\">my_name = <span class=\"string\">\"Jessica\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Projects develop naming conventions, so multi-word identifiers may use underscores (like <code>magic_number</code>), or “camel case” (like <code>amountOfFlour</code>). The most important thing is to <strong>be consistent</strong> within a project, because it makes the code more readable.</p>\n<h3 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h3><p>So far we’ve seen two data types: <em>integers</em> and <em>floats</em>. Another useful data type is a <em>string</em>, which is just what Python calls a bunch of characters (like numbers, letters, whitespace, and punctuation) put together between quotation marks:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">\"Python, I'm your #1 fan!\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Like with the numeric data types, we can check the type of a string:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">type(<span class=\"number\">1</span>)</span><br><span class=\"line\">type(<span class=\"string\">\"1\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>You can assign a string value to a variable:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_car = <span class=\"string\">\"Toyota\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"String-Concatenation\"><a href=\"#String-Concatenation\" class=\"headerlink\" title=\"String Concatenation\"></a>String Concatenation</h4><p>You can concatenate (join) strings together using the <code>+</code> sign:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span> + <span class=\"string\">\"World\"</span></span><br><span class=\"line\"><span class=\"string\">\"I drive a \"</span> + my_car</span><br></pre></td></tr></table></figure></p>\n<p>You can not concatenate a string with another data type.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span> + <span class=\"number\">123</span></span><br></pre></td></tr></table></figure></p>\n<p>will give you a <em>traceback</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">TypeError: Can&apos;t convert &apos;int&apos; object to str implicitly</span><br></pre></td></tr></table></figure>\n<p>A traceback provides details on what was happening when Python encounters an Exception or Error – something it doesn’t know how to handle. There are many kinds of Python errors, each with descriptive names to help us humans understand what went wrong. In this case we are getting a <code>TypeError</code>: we tried to do some operation on a data type that isn’t supported for that data type.</p>\n<p>Python gives us a helpful error message as part of the <code>TypeError</code>:</p>\n<p><code>&quot;cannot concatenate &#39;str&#39; and &#39;int&#39; objects&quot;</code>.</p>\n<p>We can, however, use the <code>str()</code> function to convert a number to a string. Like the <code>type()</code> function we’ve been using, <code>str()</code> takes one argument as input and outputs it as a string.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str(<span class=\"number\">4</span>)</span><br><span class=\"line\">str(<span class=\"number\">5.34</span>)</span><br><span class=\"line\">str(<span class=\"string\">\"Ice cream\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"String-Length\"><a href=\"#String-Length\" class=\"headerlink\" title=\"String Length\"></a>String Length</h4><p>There’s another useful function that works on strings called <code>len()</code>. This returns the length of a string as an integer.<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">len(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">president = <span class=\"string\">\"Obama\"</span></span><br><span class=\"line\">len(president)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Quotes\"><a href=\"#Quotes\" class=\"headerlink\" title=\"Quotes\"></a>Quotes</h4><p>We’ve been using double quotes around your strings, but either double or single quotes are valid in Python:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Hello world'</span></span><br><span class=\"line\"><span class=\"string\">\"Hello world\"</span></span><br></pre></td></tr></table></figure></p>\n<p>You do have to be careful about using quotes inside strings:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Let'</span>s learn Python together!<span class=\"string\">'</span></span><br></pre></td></tr></table></figure></p>\n<p>will give you another <code>traceback</code>, for a <code>SyntaxError</code>. When Python evaluates this expression, it starts at the first single quote as the start of the string, and to the next single quote as the end of the string. Then it doesn’t know what to do with the rest of the stuff that follows.</p>\n<p>There are a few ways to solve this problem. One is to use double quotes on the outside:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Let's learn Python together!\"</span></span><br></pre></td></tr></table></figure></p>\n<p>or we can <em>escape</em> the quote with a backslash:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Let\\'s learn Python together!'</span></span><br></pre></td></tr></table></figure></p>\n<p>The backslash is a special character that tells Python to treat the next character literally, not as part of the syntax or code. Thus, you can do things like this:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"Fernando said, \\\"Python is fun!\\\"\"</span></span><br><span class=\"line\">print(str)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Exercises\"><a href=\"#Exercises\" class=\"headerlink\" title=\"Exercises\"></a>Exercises</h4><p>Let’s take a look at a couple of exercises. Read the following lines of code, but don’t execute them. Try to figure out what they will do. Sketch them out with pen and paper if you need to. Then type them in your terminal and execute them to see what happens.</p>\n<p>1.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = <span class=\"number\">1.5</span> - <span class=\"number\">1</span>/<span class=\"number\">2</span> + ((<span class=\"number\">-2.0</span>/<span class=\"number\">2</span>) - (<span class=\"number\">1.0</span>/<span class=\"number\">2</span>))</span><br><span class=\"line\">print(total)</span><br><span class=\"line\">type(total)</span><br></pre></td></tr></table></figure>\n<p>2.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">\"quick\"</span></span><br><span class=\"line\">b = <span class=\"string\">\"brown\"</span></span><br><span class=\"line\">c = <span class=\"string\">\"fox jumps over the lazy dog\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"The \"</span> +  a * <span class=\"number\">3</span> + <span class=\"string\">\" \"</span> +  b * <span class=\"number\">3</span> + <span class=\"string\">\" \"</span> + c)</span><br></pre></td></tr></table></figure>\n<p>3.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2.0</span> * <span class=\"number\">123</span> + str(<span class=\"number\">2.0</span>) * <span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>Pause</strong>: Let’s take a break.  We’ve covered a lot!</p>\n<hr>\n<h4 id=\"Comments-and-New-Lines\"><a href=\"#Comments-and-New-Lines\" class=\"headerlink\" title=\"Comments and New Lines\"></a>Comments and New Lines</h4><p>Below is an example of how to use comments and insert new lines:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The pound sign is used as a comment character in Python. Programmers</span></span><br><span class=\"line\"><span class=\"comment\"># use comments to annotate code. Python ignores everything after the</span></span><br><span class=\"line\"><span class=\"comment\"># comment character on a line.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Notice how the 'print' command has been inserting a new line at the</span></span><br><span class=\"line\"><span class=\"comment\"># end of our strings.</span></span><br><span class=\"line\">print(<span class=\"string\">\"The last three mayors of Philadelphia were:\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># We can insert newlines ourselves, using \"\\n\".</span></span><br><span class=\"line\">print(<span class=\"string\">\"Michael Nutter\\nJohn Street\\nEd Rendell\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># \"\" Is the empty string. Since the print command will insert a</span></span><br><span class=\"line\"><span class=\"comment\"># newline at the end, this will print a newline by itself:</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Here's a new kind of printing: you can use triple quotes to create</span></span><br><span class=\"line\"><span class=\"comment\"># multiline strings.</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"\"Jim Kenney was elected Mayor</span></span><br><span class=\"line\"><span class=\"string\">of Philadelphia on November 3, 2015, beating</span></span><br><span class=\"line\"><span class=\"string\">Republican challenger Melissa Murray Bailey.\"\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># When you use triple quotes, whitespace is preserved.</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"\"Jim Kenney received</span></span><br><span class=\"line\"><span class=\"string\">    84% of the</span></span><br><span class=\"line\"><span class=\"string\">        popular vote\"\"\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Python-Scripts\"><a href=\"#Python-Scripts\" class=\"headerlink\" title=\"Python Scripts\"></a>Python Scripts</h3><p>So far, we’ve been running code directly from the shell interpreter (the <code>&gt;&gt;&gt;</code> prompt). This is great for testing and exploring short bits of code, but for longer projects we want to save our script in a file and run it from our computer’s terminal. </p>\n<ol>\n<li>Copy and paste the entire code block from the previous section (including the comments) into a new text file and save it as <code>mayors.py</code>. Note the <code>.py</code> file extension, indicating that this is a Python script.</li>\n<li><p>Open your computer’s terminal (not the Python shell) and navigate to the directory where you saved this file. At your computer’s command prompt, type:</p>\n<p><code>python3 mayors.py</code></p>\n<p>to run this script. Study what happens. Edit this file so it displays the last four mayors of Philadelphia (Look it up on <a href=\"https://en.wikipedia.org/wiki/List_of_mayors_of_Philadelphia\" target=\"_blank\" rel=\"noopener\">Wikipedia</a> if you need to!). Save it and run it again.</p>\n</li>\n</ol>\n<p><strong>CHECKPOINT: Do you know how to do these things?</strong></p>\n<p>: How do you run a Python script from your computer’s terminal?<br>: How do you comment code in Python?<br>: How do you print just a newline?<br>: How do you print a multi-line string so that whitespace is preserved?</p>\n<h4 id=\"Booleans\"><a href=\"#Booleans\" class=\"headerlink\" title=\"Booleans\"></a>Booleans</h4><p>So far, the code we’ve written has been <em>unconditional</em>: no choice is getting made–all of the code runs. Python has another data type called a <strong>boolean</strong> that is helpful for writing code that makes decisions. Booleans hold two values: <code>True</code> and <code>False</code>.</p>\n<p>Re-open the Python console and try typing these:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\">type(<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\">type(<span class=\"keyword\">False</span>)</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure></p>\n<p>You can test if Python objects are equal or unequal. The result is a boolean. Try typing these expressions in your Python console:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">54</span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure></p>\n<p>Use <code>==</code> to test for equality. Recall that <code>=</code> is used for assignment of a variable to a value. This is an important idea and can be a source of bugs until you get used to it: <code>=</code> is assignment, <code>==</code> is comparison.</p>\n<p>Use <code>!=</code> to test for inequality:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"a\"</span> != <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"string\">\"a\"</span> != <span class=\"string\">\"A\"</span></span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> have the same meaning as in math class. The result of these tests is a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span> &gt;= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">-1</span> &lt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">.5</span> &lt;= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>You can check for containment with the <code>in</code> keyword, which also results in a boolean:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"H\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">\"X\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or check for a lack of containment with <code>not in</code>:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abcde\"</span></span><br><span class=\"line\"><span class=\"string\">\"Chicago\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"Philadelphia Python Workshop\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Flow-Control\"><a href=\"#Flow-Control\" class=\"headerlink\" title=\"Flow Control\"></a>Flow Control</h4><p>Now that we know how to check if something is <code>True</code> or <code>False</code>, we can use this to make Python execute commands conditionally.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>That was our first multi-line piece of code, and the way to enter it at a Python prompt is a little different. </p>\n<ol>\n<li>First, type the <code>if 6 &gt; 5:</code> part, and hit <code>enter</code>. The next line will have <code>...</code> as a prompt, instead of the usual <code>&gt;&gt;&gt;</code>. This is Python telling us that we are in the middle of a code block, and so long as we indent our code it should be a part of this code block.</li>\n<li>Type 4 spaces, type <code>print(&quot;Six is greater than five!&quot;)</code>, and then hit <code>enter</code> to end the line. </li>\n<li>Finally, hit <code>enter</code> again to tell Python you are done with this code block. All together, it will look like this:</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> <span class=\"number\">6</span> &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>     print(<span class=\"string\">\"Six is greater than five!\"</span>)</span><br><span class=\"line\">Six <span class=\"keyword\">is</span> greater than five!</span><br></pre></td></tr></table></figure>\n<p>So what’s going on here? When Python encounters the <code>if</code> keyword, it evaluates the expression following the keyword and before the colon. If that expression is <code>True</code>, Python executes the code in the indented code block under the <code>if</code> line. If that expression is <code>False</code>, Python skips over the code block.</p>\n<p>In this case, because 6 really is greater than 5, Python executes the code block under the if statement, and we see “Six is greater than five!” printed to the screen. Guess what will happen with these other expressions, then type them out and see if your guess was correct:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">     print(<span class=\"string\">\"Zero is greater than two!\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">\"banana\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"bananarama\"</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"I miss the 80s.\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>more choices: if and else</strong></p>\n<p>You can use the <code>else</code> keyword to execute code only when the <code>if</code> expression isn’t <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sister_age = <span class=\"number\">15</span></span><br><span class=\"line\">brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Like with <code>if</code>, the code block under the <code>else</code> statement must be indented so Python knows that it is a part of the <code>else</code> block.</p>\n<p><strong>compound conditionals: <code>and</code> and <code>or</code></strong></p>\n<p>We’ve been testing single conditions, but we can also test multiple conditions that result in execution of some code. You can check multiple expressions together using the <code>and</code> and <code>or</code> keywords. </p>\n<ul>\n<li>If two expressions are joined by an <code>and</code>, they both have to be <code>True</code> for the overall expression to be <code>True</code>. </li>\n<li>If two expressions are joined by an <code>or</code>, as long as at least one is <code>True</code>, the overall expression is <code>True</code>.</li>\n</ul>\n<p>Try typing these out and see what you get:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> &lt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt; <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"string\">\"x\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span> <span class=\"keyword\">or</span> <span class=\"string\">\"e\"</span> <span class=\"keyword\">in</span> <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"string\">\"a\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">\"abc\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Guess what will happen when you enter these next two examples, and then type them out and see if you are correct. If you have trouble with the indenting, call over a staff member and practice together. It is important to be comfortable with indenting for tomorrow. Indenting is a crucial part of the syntax of Python.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temperature = <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperature &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> temperature &lt; <span class=\"number\">75</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"It's nice and cozy in here!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Too extreme for me.\"</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hour = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> hour &lt; <span class=\"number\">7</span> <span class=\"keyword\">or</span> hour &gt; <span class=\"number\">23</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Go away!\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"I'm sleeping!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Welcome to the cheese shop!\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Can I interest you in some choice gouda?\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You can have as many lines of code as you want in if and else block; just make sure to indent them so Python knows they are a part of the block.</p>\n<p><strong>even more choices: elif and else</strong></p>\n<p>If you have more than two cases, you can use the <code>elif</code> keyword to check more cases. Think of <code>elif</code> as Python-speak for else if. You can have as many <code>elif</code> cases as you want. Python will go down the code checking each <code>elif</code> until it finds a <code>True</code> condition or reaches the default <code>else</code> block.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sister_age = <span class=\"number\">15</span></span><br><span class=\"line\">brother_age = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> sister_age &gt; brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister is older\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> sister_age == brother_age:</span><br><span class=\"line\">    print(<span class=\"string\">\"sister and brother are the same age\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"brother is older\"</span>)</span><br></pre></td></tr></table></figure>\n<p>You don’t have to have an <code>else</code> block if you don’t need it. That just means there isn’t default code to execute when none of the <code>if</code> or <code>elif</code>conditions are <code>True</code>:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">color = <span class=\"string\">\"orange\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> color == <span class=\"string\">\"green\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"red\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Christmas color!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> color == <span class=\"string\">\"black\"</span> <span class=\"keyword\">or</span> color == <span class=\"string\">\"orange\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Halloween color!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> color == <span class=\"string\">\"pink\"</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Valentine's Day color!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>If color had been “purple”, that code wouldn’t have printed anything.</p>\n<p><em>Remember that <code>=</code> is for assignment and <code>==</code> is for comparison.</em></p>\n<h4 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h4><p>Functions take input from the user or the application and (usually) produce output (e.g. they return a value). You can then assign a variable to this output. As we’ve shown in previous sections, you call a function by using its name followed by its arguments in parenthesis.</p>\n<p>Why are functions important?</p>\n<ul>\n<li>They allow tasks to be run quickly and to be automated, i.e. they do some useful bit of work.</li>\n<li>They let us re-use code without having to type it out each time.</li>\n<li>They facilitate consistency and reduce the risk of error. </li>\n</ul>\n<p>Python has many built in functions. For example:</p>\n<p><code>length = len(&quot;Mississippi&quot;)</code></p>\n<p>Executing this code assigns the length of the string “Mississippi” to the variable length. We can write our own functions to encapsulate bits of useful work so we can reuse them. Here’s how you do it:</p>\n<p><strong>Step 1: Write a Function signature</strong></p>\n<p>A function signature tells you how the function will be called. It starts with the keyword <code>def</code>, which tells Python that you are defining a function. Then comes a space, the name of your function, an open parenthesis, the comma-separated input parameters for your function, a close parenthesis, and a colon. </p>\n<p>Here’s what a function signature looks like for a function that takes no arguments:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFunction</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Your code would go here!</span></span><br></pre></td></tr></table></figure>\n<p>Here’s what a function signature looks like for a function that takes one argument called my_string:</p>\n<p><code>def myFunction(my_string):</code></p>\n<p>And one for a function that takes two arguments:</p>\n<p><code>def myFunction(myList, myInteger):</code></p>\n<p>Parameters should have names that usefully describe what they are used for in the function. </p>\n<blockquote>\n<p>Note: We’ve used the words parameters and arguments seemingly interchangeably to reference the input to functions. The distinction isn’t really important right now, but if you’re curious: in function signatures the input is called parameters, and when you are calling the function the input is called arguments.</p>\n</blockquote>\n<p><strong>Step 2: Do useful work inside the function</strong></p>\n<p>Underneath the function signature is where you do your useful work. Everything inside the function is indented, just like with if/else blocks, so Python knows that it is a part of the function. You can use the variables passed into the function as parameters, just like you can use variables once you define them outside of functions.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    result = x + y</span><br></pre></td></tr></table></figure>\n<p><strong>Step 3: Return something</strong></p>\n<p>If you want to be able to assign a variable to the output of a function, the function has to return that output using the <code>return</code> keyword.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>or, even shorter:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure></p>\n<p>You can return any Python object: numbers, strings, booleans … even other functions! Once you execute a return, you are done with the function – you don’t get to do any more work. That means that if you have a function like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">absoluteValue</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number * <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number</span><br></pre></td></tr></table></figure>\n<p>If <code>number</code> is less than 0, you return number * -1 and never even get to the last line of the function. However, if number is greater than or equal to 0, the if expression evaluates to False, so we skip the code in the if block and return number.</p>\n<p>We could have written the above function like this if we wanted. It’s the same logic, just more typing:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">absoluteValue</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number * <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number</span><br></pre></td></tr></table></figure>\n<p><strong>Step 4: Use the function</strong></p>\n<p>Once you define a function you can use it as many times as you want. You can assign the value it returns to other variables and use those variables in other commands.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result1 = add(<span class=\"number\">1234</span>, <span class=\"number\">5678</span>)</span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">result2 = add(<span class=\"number\">-1.5</span>, <span class=\"number\">.5</span>)</span><br><span class=\"line\">print(result2)</span><br><span class=\"line\">print(<span class=\"string\">\"The total sum is\"</span>, result1 + result2)</span><br></pre></td></tr></table></figure>\n<p>Functions don’t have to return anything if you don’t want them to. They usually return something because we usually want to be able to assign variables to their output. If your function does not return anything, you won’t be able to assign a variable to its output and won’t be able to use its output anywhere else.</p>\n<p>What do you think will happen here? Try it and see:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">half_number</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    print(x/<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">half1 = half_number(<span class=\"number\">20</span>)</span><br><span class=\"line\">print(half1)</span><br></pre></td></tr></table></figure>\n<p>That’s it for part 1! Now you can take some time to try some of the <a href=\"/practice/\">practice exercises</a> and review anything here that seemed challenging. We’ll review all this and get deeper into Python during part two’s presentation.</p>\n<h1 id=\"Continue-to-Workshop-Part-Two\"><a href=\"#Continue-to-Workshop-Part-Two\" class=\"headerlink\" title=\"Continue to Workshop: Part Two \"></a><a href=\"/workshop2\"><strong>Continue to Workshop: Part Two </strong></a></h1>"}],"Post":[{"title":"March 1, 2018","date":"2018-03-02T03:07:51.000Z","cover_index":"https://i.imgur.com/Ymy2e6j.jpg","subtitle":"Project night + further brainstorming for the meetup.","_content":"\nAnother great project night! We started brainstorming ideas on other talks and formats that the meetup could utilize to allow members to get more value out of it. More snacks, soda, and girl scout cookies.\n\n![](https://secure.meetupstatic.com/photos/event/5/4/4/600_468901348.jpeg)\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/","source":"_posts/01-mar-2018.md","raw":"---\ntitle: March 1, 2018\ndate: 2018-03-01 19:07:51\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/Ymy2e6j.jpg\nsubtitle: Project night + further brainstorming for the meetup.\n---\n\nAnother great project night! We started brainstorming ideas on other talks and formats that the meetup could utilize to allow members to get more value out of it. More snacks, soda, and girl scout cookies.\n\n![](https://secure.meetupstatic.com/photos/event/5/4/4/600_468901348.jpeg)\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/","slug":"01-mar-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurym000075j5ujhfxz2c","content":"<p>Another great project night! We started brainstorming ideas on other talks and formats that the meetup could utilize to allow members to get more value out of it. More snacks, soda, and girl scout cookies.</p>\n<p><img src=\"https://secure.meetupstatic.com/photos/event/5/4/4/600_468901348.jpeg\" alt=\"\"></p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Another great project night! We started brainstorming ideas on other talks and formats that the meetup could utilize to allow members to get more value out of it. More snacks, soda, and girl scout cookies.</p>\n<p><img src=\"https://secure.meetupstatic.com/photos/event/5/4/4/600_468901348.jpeg\" alt=\"\"></p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbcb/</a></p>\n"},{"title":"March 6, 2018","date":"2018-03-07T03:14:05.000Z","cover_index":"http://pcad.lib.washington.edu/media/pcad-images/1349.jpg","subtitle":"A one-off Tuesday meeting at the Redmond Library. Talked about Testing and Data Science.","_content":"\nA small group met and discussed testing and data science as well as microframeworks. Inspired the lightning talk that happened on the 15th of March. \n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/247235932/","source":"_posts/06-mar-2018.md","raw":"---\ntitle: March 6, 2018\ndate: 2018-03-06 19:14:05\ntags: python, meetup-recap\ncover_index: http://pcad.lib.washington.edu/media/pcad-images/1349.jpg\nsubtitle: A one-off Tuesday meeting at the Redmond Library. Talked about Testing and Data Science.\n---\n\nA small group met and discussed testing and data science as well as microframeworks. Inspired the lightning talk that happened on the 15th of March. \n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/247235932/","slug":"06-mar-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiuryz000275j5z38k4yzu","content":"<p>A small group met and discussed testing and data science as well as microframeworks. Inspired the lightning talk that happened on the 15th of March. </p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/247235932/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/247235932/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>A small group met and discussed testing and data science as well as microframeworks. Inspired the lightning talk that happened on the 15th of March. </p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/247235932/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/247235932/</a></p>\n"},{"title":"February 15, 2018","date":"2018-02-16T03:03:46.000Z","cover_index":"https://i.imgur.com/Shcgpgj.jpg","subtitle":"Our second meetup.","_content":"\n- The first hour of this meeting from 6:30-7:30 was strictly an introduction to Python 3 workshop to get folks started with the material. \n- From 7:30 - 8:30 we each went over the material on your own while asking questions.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/","source":"_posts/15-feb-2018.md","raw":"---\ntitle: February 15, 2018\ndate: 2018-02-15 19:03:46\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/Shcgpgj.jpg\nsubtitle: Our second meetup.\n---\n\n- The first hour of this meeting from 6:30-7:30 was strictly an introduction to Python 3 workshop to get folks started with the material. \n- From 7:30 - 8:30 we each went over the material on your own while asking questions.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/","slug":"15-feb-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurz8000575j5q6tgr3k2","content":"<ul>\n<li>The first hour of this meeting from 6:30-7:30 was strictly an introduction to Python 3 workshop to get folks started with the material. </li>\n<li>From 7:30 - 8:30 we each went over the material on your own while asking questions.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>The first hour of this meeting from 6:30-7:30 was strictly an introduction to Python 3 workshop to get folks started with the material. </li>\n<li>From 7:30 - 8:30 we each went over the material on your own while asking questions.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbtb/</a></p>\n"},{"title":"February 22, 2018","date":"2018-02-23T03:06:12.000Z","cover_index":"https://i.imgur.com/tDxdCss.jpg","subtitle":"Our third meetup and first project night.","_content":"\nThis was our first project night. There was no formal speaker or talk, we just worked on projects! Lots of snacks and good chats.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/","source":"_posts/22-feb-2018.md","raw":"---\ntitle: February 22, 2018\ndate: 2018-02-22 19:06:12\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/tDxdCss.jpg\nsubtitle: Our third meetup and first project night.\n---\n\nThis was our first project night. There was no formal speaker or talk, we just worked on projects! Lots of snacks and good chats.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/","slug":"22-feb-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurzd000775j5806nwoh6","content":"<p>This was our first project night. There was no formal speaker or talk, we just worked on projects! Lots of snacks and good chats.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>This was our first project night. There was no formal speaker or talk, we just worked on projects! Lots of snacks and good chats.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/xvvbjpyxdbdc/</a></p>\n"},{"title":"March 22, 2018","date":"2018-03-23T02:14:41.000Z","cover_index":"https://i.imgur.com/ncGKn4q.jpg","subtitle":"Discussed web scrapers using Beautiful Soup.","_content":"\nFounder [Fernando](https://github.com/fernando-mc) gave a great talk on Beautiful Soup and walked us through the basics of web scraping. [His code can be found here](https://github.com/fernando-mc/beautiful-soup-web-scraping).\n\n![](https://secure.meetupstatic.com/photos/event/c/7/a/1/600_469551105.jpeg)\n\nOrganizer [Suri](https://github.com/suramrit/) expanded on Fernando's code and built something cool with it. [His code can be found here](https://github.com/suramrit/beautiful-soup-web-scraping).\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/","source":"_posts/22-mar-2018.md","raw":"---\ntitle: March 22, 2018\ndate: 2018-03-22 19:14:41\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/ncGKn4q.jpg\nsubtitle: Discussed web scrapers using Beautiful Soup.\n---\n\nFounder [Fernando](https://github.com/fernando-mc) gave a great talk on Beautiful Soup and walked us through the basics of web scraping. [His code can be found here](https://github.com/fernando-mc/beautiful-soup-web-scraping).\n\n![](https://secure.meetupstatic.com/photos/event/c/7/a/1/600_469551105.jpeg)\n\nOrganizer [Suri](https://github.com/suramrit/) expanded on Fernando's code and built something cool with it. [His code can be found here](https://github.com/suramrit/beautiful-soup-web-scraping).\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/","slug":"22-mar-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurzh000975j5n2nxkj9i","content":"<p>Founder <a href=\"https://github.com/fernando-mc\" target=\"_blank\" rel=\"noopener\">Fernando</a> gave a great talk on Beautiful Soup and walked us through the basics of web scraping. <a href=\"https://github.com/fernando-mc/beautiful-soup-web-scraping\" target=\"_blank\" rel=\"noopener\">His code can be found here</a>.</p>\n<p><img src=\"https://secure.meetupstatic.com/photos/event/c/7/a/1/600_469551105.jpeg\" alt=\"\"></p>\n<p>Organizer <a href=\"https://github.com/suramrit/\" target=\"_blank\" rel=\"noopener\">Suri</a> expanded on Fernando’s code and built something cool with it. <a href=\"https://github.com/suramrit/beautiful-soup-web-scraping\" target=\"_blank\" rel=\"noopener\">His code can be found here</a>.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Founder <a href=\"https://github.com/fernando-mc\" target=\"_blank\" rel=\"noopener\">Fernando</a> gave a great talk on Beautiful Soup and walked us through the basics of web scraping. <a href=\"https://github.com/fernando-mc/beautiful-soup-web-scraping\" target=\"_blank\" rel=\"noopener\">His code can be found here</a>.</p>\n<p><img src=\"https://secure.meetupstatic.com/photos/event/c/7/a/1/600_469551105.jpeg\" alt=\"\"></p>\n<p>Organizer <a href=\"https://github.com/suramrit/\" target=\"_blank\" rel=\"noopener\">Suri</a> expanded on Fernando’s code and built something cool with it. <a href=\"https://github.com/suramrit/beautiful-soup-web-scraping\" target=\"_blank\" rel=\"noopener\">His code can be found here</a>.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbdc/</a></p>\n"},{"title":"March 8, 2018","date":"2018-03-09T03:14:09.000Z","cover_index":"https://i.imgur.com/4lYGZ64.jpg","subtitle":"Project night.","_content":"A great project night. Discussed upcoming lightning talk--lots of interest from other members.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/","source":"_posts/08-mar-2018.md","raw":"---\ntitle: March 8, 2018\ndate: 2018-03-08 19:14:09\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/4lYGZ64.jpg\nsubtitle: Project night.\n---\nA great project night. Discussed upcoming lightning talk--lots of interest from other members.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/","slug":"08-mar-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurzm000d75j5h646bpm9","content":"<p>A great project night. Discussed upcoming lightning talk–lots of interest from other members.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>A great project night. Discussed upcoming lightning talk–lots of interest from other members.</p>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfblb/</a></p>\n"},{"title":"March 15, 2018","date":"2018-03-16T02:14:38.000Z","cover_index":"https://i.imgur.com/ITLKOQ0.jpg","subtitle":"Discussed Flask framework and built a REST API.","_content":"\n- [Nick](https://www.github.com/mkpt) did a lightning talk about the Flask Framework. We built an API live at the meetup. [The code and slides can be found here](https://github.com/mkpt/basic-flask-api).\n- Afterwards [Rakesh](https://www.github.com/rakeshsinghranchi) deployed it to Microsoft Azure. [The code can be found here](https://github.com/rakeshsinghranchi/basic-flask-api).\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/","source":"_posts/15-mar-2018.md","raw":"---\ntitle: March 15, 2018\ndate: 2018-03-15 19:14:38\ntags: python, meetup-recap\ncover_index: https://i.imgur.com/ITLKOQ0.jpg\nsubtitle: Discussed Flask framework and built a REST API.\n---\n\n- [Nick](https://www.github.com/mkpt) did a lightning talk about the Flask Framework. We built an API live at the meetup. [The code and slides can be found here](https://github.com/mkpt/basic-flask-api).\n- Afterwards [Rakesh](https://www.github.com/rakeshsinghranchi) deployed it to Microsoft Azure. [The code can be found here](https://github.com/rakeshsinghranchi/basic-flask-api).\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/","slug":"15-mar-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurzq000g75j50xjym9wr","content":"<ul>\n<li><a href=\"https://www.github.com/mkpt\" target=\"_blank\" rel=\"noopener\">Nick</a> did a lightning talk about the Flask Framework. We built an API live at the meetup. <a href=\"https://github.com/mkpt/basic-flask-api\" target=\"_blank\" rel=\"noopener\">The code and slides can be found here</a>.</li>\n<li>Afterwards <a href=\"https://www.github.com/rakeshsinghranchi\" target=\"_blank\" rel=\"noopener\">Rakesh</a> deployed it to Microsoft Azure. <a href=\"https://github.com/rakeshsinghranchi/basic-flask-api\" target=\"_blank\" rel=\"noopener\">The code can be found here</a>.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://www.github.com/mkpt\" target=\"_blank\" rel=\"noopener\">Nick</a> did a lightning talk about the Flask Framework. We built an API live at the meetup. <a href=\"https://github.com/mkpt/basic-flask-api\" target=\"_blank\" rel=\"noopener\">The code and slides can be found here</a>.</li>\n<li>Afterwards <a href=\"https://www.github.com/rakeshsinghranchi\" target=\"_blank\" rel=\"noopener\">Rakesh</a> deployed it to Microsoft Azure. <a href=\"https://github.com/rakeshsinghranchi/basic-flask-api\" target=\"_blank\" rel=\"noopener\">The code can be found here</a>.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/kwsqkpyxfbtb/</a></p>\n"},{"title":"February 6, 2018","date":"2018-02-07T03:01:36.000Z","cover_index":"http://seeitall.com/assets/images/sn.jpg","subtitle":"Our first meetup.","_content":"Our first meetup! \n\n- Members met and discussed why they were there and what interests they had in Python.\n- Fernando walked us through some of the basics of Python.\n- More organizers expressed interest in building out the meetup.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/247173963/","source":"_posts/6-feb-2018.md","raw":"---\ntitle: February 6, 2018\ndate: 2018-02-06 19:01:36\ntags: python, meetup-recap\ncover_index: http://seeitall.com/assets/images/sn.jpg\nsubtitle: Our first meetup.\n---\nOur first meetup! \n\n- Members met and discussed why they were there and what interests they had in Python.\n- Fernando walked us through some of the basics of Python.\n- More organizers expressed interest in building out the meetup.\n\nhttps://www.meetup.com/Redmond-Python-User-Group/events/247173963/","slug":"6-feb-2018","published":1,"updated":"2018-06-01T21:37:57.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhwiurzu000k75j5rg3tj6j1","content":"<p>Our first meetup! </p>\n<ul>\n<li>Members met and discussed why they were there and what interests they had in Python.</li>\n<li>Fernando walked us through some of the basics of Python.</li>\n<li>More organizers expressed interest in building out the meetup.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/247173963/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/247173963/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Our first meetup! </p>\n<ul>\n<li>Members met and discussed why they were there and what interests they had in Python.</li>\n<li>Fernando walked us through some of the basics of Python.</li>\n<li>More organizers expressed interest in building out the meetup.</li>\n</ul>\n<p><a href=\"https://www.meetup.com/Redmond-Python-User-Group/events/247173963/\" target=\"_blank\" rel=\"noopener\">https://www.meetup.com/Redmond-Python-User-Group/events/247173963/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhwiurzd000775j5806nwoh6","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzm000c75j5a3cw1sin"},{"post_id":"cjhwiurym000075j5ujhfxz2c","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzp000f75j5tjdyucj5"},{"post_id":"cjhwiurzh000975j5n2nxkj9i","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzu000j75j5xgu3r0hf"},{"post_id":"cjhwiurzm000d75j5h646bpm9","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzx000m75j5dnhq1iw5"},{"post_id":"cjhwiuryz000275j5z38k4yzu","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzy000o75j51u5bwffa"},{"post_id":"cjhwiurzq000g75j50xjym9wr","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzz000p75j548g1rmam"},{"post_id":"cjhwiurzu000k75j5rg3tj6j1","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwiurzz000q75j5351pfi6v"},{"post_id":"cjhwiurz8000575j5q6tgr3k2","tag_id":"cjhwiurz3000475j5l10hfcef","_id":"cjhwius00000r75j5erha2awv"}],"Tag":[{"name":"python, meetup-recap","_id":"cjhwiurz3000475j5l10hfcef"}]}}